<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="T:Microsoft.Xna.Framework.BatteryChargeStatus">
      <summary>Indicates battery charge status.</summary>
      <param name="Charging">Indicates a battery is charging.</param>
      <param name="Critical">Indicates a critically low level of battery charge.</param>
      <param name="High">Indicates a high level of battery charge.</param>
      <param name="Low">Indicates a low level of battery charge.</param>
      <param name="NoSystemBattery">Indicates that no battery is present.</param>
      <param name="Unknown">Indicates an unknown battery condition.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingBox">
      <summary>Defines an axis-aligned box-shaped 3D volume. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingBox.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
      <summary>The maximum point the BoundingBox contains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
      <summary>The minimum point the BoundingBox contains.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates an instance of BoundingBox. Reference page contains links to related code samples.</summary>
      <param name="min">The minimum point the BoundingBox includes.</param>
      <param name="max">The maximum point the BoundingBox includes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Tests whether the BoundingBox contains another BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Tests whether the BoundingBox contains a BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates the smallest BoundingBox that will contain a group of points.</summary>
      <param name="points">A list of points the BoundingBox should contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
      <param name="result">[OutAttribute] The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
      <param name="original">One of the BoundingBoxs to contain.</param>
      <param name="additional">One of the BoundingBoxs to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
      <param name="original">One of the BoundingBox instances to contain.</param>
      <param name="additional">One of the BoundingBox instances to contain.</param>
      <param name="result">[OutAttribute] The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="obj">The Object to compare with the current BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
      <summary>Gets an array of points that make up the corners of the BoundingBox.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets the array of points that make up the corners of the BoundingBox.</summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingBox intersects another BoundingBox. Reference page contains links to related code samples.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingBox intersects a BoundingFrustum. Reference page contains links to related code samples.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere. Reference page contains links to related code samples.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingBox intersects a Plane. Reference page contains links to related code samples.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingBox intersects a Ray. Reference page contains links to related code samples.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingBox intersects another BoundingBox. Reference page contains links to related code samples.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingBox instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere. Reference page contains links to related code samples.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingBox intersects a Plane. Reference page contains links to related code samples.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingBox intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingBox intersects a Ray. Reference page contains links to related code samples.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="a">BoundingBox to compare.</param>
      <param name="b">BoundingBox to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are not equal.</summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
      <summary>Returns a String that represents the current BoundingBox.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
      <summary>Defines a frustum and helps determine whether forms intersect with it.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a new instance of BoundingFrustum. Reference page contains links to related conceptual articles.</summary>
      <param name="value">Combined matrix that usually takes view × projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
      <param name="point">The point to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.</summary>
      <param name="other">The BoundingFrustum to compare with the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the BoundingFrustum.</summary>
      <param name="obj">The Object to compare with the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
      <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingFrustum are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Plane.</summary>
      <param name="plane">The Plane to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Ray.</summary>
      <param name="ray">The Ray to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingFrustum intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingFrustum intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingFrustum intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingFrustum intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingFrustum intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are equal.</summary>
      <param name="a">The BoundingFrustum to the left of the equality operator.</param>
      <param name="b">The BoundingFrustum to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are not equal.</summary>
      <param name="a">The BoundingFrustum to the left of the inequality operator.</param>
      <param name="b">The BoundingFrustum to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
      <summary>Returns a String that represents the current BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
      <summary>Gets the bottom plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
      <summary>Gets the far plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
      <summary>Gets the left plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
      <summary>Gets or sets the Matrix that describes this bounding frustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
      <summary>Gets the near plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
      <summary>Gets the right plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
      <summary>Gets the top plane of the BoundingFrustum.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingSphere">
      <summary>Defines a sphere.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
      <summary>The center point of the sphere.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
      <summary>The radius of the sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of BoundingSphere.</summary>
      <param name="center">Center point of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
      <param name="point">The point to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
      <param name="result">[OutAttribute] The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a BoundingSphere that can contain a specified list of points. Reference page contains links to related code samples.</summary>
      <param name="points">List of points the BoundingSphere must contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
      <param name="result">[OutAttribute] The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether the specified BoundingSphere is equal to the current BoundingSphere.</summary>
      <param name="other">The BoundingSphere to compare with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the BoundingSphere.</summary>
      <param name="obj">The Object to compare with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Plane.</summary>
      <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Ray.</summary>
      <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingSphere intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingSphere and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingSphere intersects another BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingSphere instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingSphere intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingSphere intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingSphere intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of BoundingSphere are equal.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of BoundingSphere are not equal.</summary>
      <param name="a">The BoundingSphere to the left of the inequality operator.</param>
      <param name="b">The BoundingSphere to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
      <summary>Returns a String that represents the current BoundingSphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
      <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
      <param name="result">[OutAttribute] The transformed BoundingSphere.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.ContainmentType">
      <summary>Indicates the extent to which bounding volumes intersect or contain one another.</summary>
      <param name="Contains">Indicates that one bounding volume completely contains the other.</param>
      <param name="Disjoint">Indicates there is no overlap between the bounding volumes.</param>
      <param name="Intersects">Indicates that the bounding volumes partially overlap.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Curve">
      <summary>Stores an arbitrary collection of 2D CurveKey points, and provides methods for evaluating features of the curve they define.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
      <summary>Initializes a new instance of Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Clone">
      <summary>Creates a copy of the Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes both the TangentIn and the TangentOut for a CurveKey specified by its index.</summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param>
      <param name="tangentType">The type of tangents to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes a specified type of TangentIn and a specified type of TangentOut for a given CurveKey.</summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param>
      <param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all CurveKeys in this Curve, using a specified tangent type for both TangentIn and TangentOut.</summary>
      <param name="tangentType">The type of TangentOut and TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all CurveKeys in this Curve, using different tangent types for TangentOut and TangentIn.</summary>
      <param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
      <summary>Finds the value at a position on the Curve.</summary>
      <param name="position">The position on the Curve.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
      <summary>Gets a value indicating whether the curve is constant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.Keys">
      <summary>The points that make up the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
      <summary>Specifies how to handle weighting values that are greater than the last control point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
      <summary>Specifies how to handle weighting values that are less than the first control point in the curve.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveContinuity">
      <summary>Defines the continuity of CurveKeys on a Curve.</summary>
      <param name="Smooth">Interpolation can be used between this CurveKey and the next.</param>
      <param name="Step">Interpolation cannot be used between this CurveKey and the next. Specifying a position between the two points returns this point.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKey">
      <summary>Represents a point in a multi-point curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
      <param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
      <summary>Creates a copy of the CurveKey.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.CompareTo(Microsoft.Xna.Framework.CurveKey)">
      <summary>Compares this instance to another CurveKey and returns an indication of their relative values.</summary>
      <param name="other">CurveKey to compare to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the specified Object is equal to the CurveKey.</summary>
      <param name="other">The Object to compare with the current CurveKey.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are not equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
      <summary>Describes whether the segment between this point and the next point in the curve is discrete or continuous.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
      <summary>Position of the CurveKey in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
      <summary>Describes the tangent when approaching this point from the previous point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
      <summary>Describes the tangent when leaving this point to the next point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
      <summary>Describes the value of this point.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
      <summary>Contains the CurveKeys making up a Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
      <summary>Initializes a new instance of CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
      <summary>Adds a CurveKey to the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
      <summary>Removes all CurveKeys from the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
      <summary>Creates a copy of the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the CurveKeyCollection contains a specific CurveKey.</summary>
      <param name="item">true if the CurveKey is found in the CurveKeyCollection; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
      <summary>Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.</summary>
      <param name="array">The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines the index of a CurveKey in the CurveKeyCollection.</summary>
      <param name="item">CurveKey to locate in the CurveKeyCollection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
      <summary>Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
      <summary>Removes the CurveKey at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
      <summary>Gets the number of elements contained in the CurveKeyCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
      <summary>Returns a value indicating whether the CurveKeyCollection is read-only.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The array index of the element.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveLoopType">
      <summary>Defines how the value of a Curve will be determined for positions before the first point on the Curve or after the last point on the Curve.</summary>
      <param name="Constant">The Curve will evaluate to its first key for positions before the first point in the Curve and to the last key for positions after the last point.</param>
      <param name="Cycle">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.</param>
      <param name="CycleOffset">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve. The value will be offset by the difference between the values of the first and last CurveKey multiplied by the number of times the position wraps around. If the position is before the first point in the Curve, the difference will be subtracted from its value; otherwise, the difference will be added.</param>
      <param name="Linear">Linear interpolation will be performed to determine the value.</param>
      <param name="Oscillate">Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveTangent">
      <summary>Specifies different tangent types to be calculated for CurveKey points in a Curve.</summary>
      <param name="Flat">A Flat tangent always has a value equal to zero.</param>
      <param name="Linear">A Linear tangent at a CurveKey is equal to the difference between its Value and the Value of the preceding or succeeding CurveKey. For example, in Curve MyCurve, where i is greater than zero and (i + 1) is less than the total number of CurveKeys in MyCurve, the linear TangentIn of MyCurve.Keys[i] is equal to: ( MyCurve.Keys[i].Value - MyCurve.Keys[i - 1].Value ) Similarly, the linear TangentOut is equal to: ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i].Value.)</param>
      <param name="Smooth">A Smooth tangent smooths the inflection between a TangentIn and TangentOut by taking into account the values of both neighbors of the CurveKey. The smooth TangentIn of MyCurve.Keys[i] is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i].Position - MyCurve.Keys[i - 1].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i-1].Position ) ) ) Similarly, the smooth TangentOut is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i - 1].Position ) ) )</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.FrameworkDispatcher">
      <summary>Implements the Windows-specific portion of a FrameworkDispatcher class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.FrameworkDispatcher.Update">
      <summary>Updates the status of various framework components (such as power state and media) and raises related events. If your game does not use the Game class, you must call this method (the recommendation is once per frame) yourself.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.MathHelper">
      <summary>Contains commonly used precalculated values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
      <summary>Represents the log base ten of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
      <summary>Represents the log base two of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
      <summary>Represents the value of pi.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
      <summary>Represents the value of pi divided by two.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
      <summary>Represents the value of pi divided by four.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
      <summary>Represents the value of pi times two.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.</summary>
      <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
      <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
      <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
      <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
      <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
      <summary>Restricts a value to be within a specified range. Reference page contains links to related code samples.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value. If value is less than min, min will be returned.</param>
      <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
      <summary>Calculates the absolute value of the difference of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position.</param>
      <param name="tangent1">Source tangent.</param>
      <param name="value2">Source position.</param>
      <param name="tangent2">Source tangent.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>Linearly interpolates between two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
      <summary>Returns the greater of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
      <summary>Returns the lesser of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radians">The angle in radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degrees">The angle in degrees.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
      <summary>Reduces a given angle to a value between π and -π.</summary>
      <param name="angle">The angle to reduce, in radians.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Matrix">
      <summary>Defines a matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M11">
      <summary>Value at row 1 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M12">
      <summary>Value at row 1 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M13">
      <summary>Value at row 1 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M14">
      <summary>Value at row 1 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M21">
      <summary>Value at row 2 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M22">
      <summary>Value at row 2 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M23">
      <summary>Value at row 2 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M24">
      <summary>Value at row 2 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M31">
      <summary>Value at row 3 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M32">
      <summary>Value at row 3 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M33">
      <summary>Value at row 3 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M34">
      <summary>Value at row 3 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M41">
      <summary>Value at row 4 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M42">
      <summary>Value at row 4 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M43">
      <summary>Value at row 4 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M44">
      <summary>Value at row 4 column 4 of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Matrix.</summary>
      <param name="m11">Value to initialize m11 to.</param>
      <param name="m12">Value to initialize m12 to.</param>
      <param name="m13">Value to initialize m13 to.</param>
      <param name="m14">Value to initialize m14 to.</param>
      <param name="m21">Value to initialize m21 to.</param>
      <param name="m22">Value to initialize m22 to.</param>
      <param name="m23">Value to initialize m23 to.</param>
      <param name="m24">Value to initialize m24 to.</param>
      <param name="m31">Value to initialize m31 to.</param>
      <param name="m32">Value to initialize m32 to.</param>
      <param name="m33">Value to initialize m33 to.</param>
      <param name="m34">Value to initialize m34 to.</param>
      <param name="m41">Value to initialize m41 to.</param>
      <param name="m42">Value to initialize m42 to.</param>
      <param name="m43">Value to initialize m43 to.</param>
      <param name="m44">Value to initialize m44 to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
      <param name="result">[OutAttribute] The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <param name="result">[OutAttribute] The created view matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related code samples.</summary>
      <param name="fieldOfView">Field of view in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related code samples.</summary>
      <param name="fieldOfView">Field of view in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The perspective projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <param name="result">[OutAttribute] The created projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
      <summary>Creates a Matrix that reflects the coordinate system about a specified Plane.</summary>
      <param name="value">The Plane about which to create a reflection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.</summary>
      <param name="value">The Plane about which to create a reflection.</param>
      <param name="result">[OutAttribute] A Matrix that creates the reflection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The rotation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scale">Amount to scale by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scale">Value to scale by.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
      <summary>Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
      <param name="result">[OutAttribute] A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <param name="result">[OutAttribute] The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
      <param name="result">[OutAttribute] The created world matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Extracts the scalar, translation, and rotation components from a 3D scale/rotate/translate (SRT) Matrix.  Reference page contains code sample.</summary>
      <param name="scale">[OutAttribute] The scalar component of the transform matrix, expressed as a Vector3.</param>
      <param name="rotation">[OutAttribute] The rotation component of the transform matrix, expressed as a Quaternion.</param>
      <param name="translation">[OutAttribute] The translation component of the transform matrix, expressed as a Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
      <summary>Calculates the determinant of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
      <summary>Determines whether the specified Object is equal to the Matrix.</summary>
      <param name="other">The Object to compare with the current Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">The source matrix.</param>
      <param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Negated matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Compares a matrix for equality with another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Tests a matrix for inequality with another matrix.</summary>
      <param name="matrix1">The matrix on the left of the equal sign.</param>
      <param name="matrix2">The matrix on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix1">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
      <param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Transposed matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
      <summary>Gets and sets the backward vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Down">
      <summary>Gets and sets the down vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
      <summary>Gets and sets the forward vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
      <summary>Returns an instance of the identity matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Left">
      <summary>Gets and sets the left vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Right">
      <summary>Gets and sets the right vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
      <summary>Gets and sets the translation vector of the Matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Up">
      <summary>Gets and sets the up vector of the Matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Plane">
      <summary>Defines a plane.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.D">
      <summary>The distance of the Plane along its normal from the origin.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Normal">
      <summary>The normal vector of the Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="value">Vector4 with X, Y, and Z components defining the normal of the Plane. The W component defines the distance of the Plane along the normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="normal">The normal vector to the Plane.</param>
      <param name="d">The Plane's distance along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="point1">One point of a triangle defining the Plane.</param>
      <param name="point2">One point of a triangle defining the Plane.</param>
      <param name="point3">One point of a triangle defining the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="a">X component of the normal defining the Plane.</param>
      <param name="b">Y component of the normal defining the Plane.</param>
      <param name="c">Z component of the normal defining the Plane.</param>
      <param name="d">Distance of the Plane along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
      <param name="result">[OutAttribute] The dot product of the specified Vector4 and this Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">[OutAttribute] The resulting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">[OutAttribute] The resulting dot product.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the Plane.</summary>
      <param name="obj">The Object to compare with the current Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether the specified Plane is equal to the Plane.</summary>
      <param name="other">The Plane to compare with the current Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current Plane intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current Plane intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current Plane intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current Plane intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current Plane intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize">
      <summary>Changes the coefficients of the Normal vector of this Plane to make it of unit length.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane)">
      <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
      <param name="value">The Plane to normalize.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Plane@)">
      <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
      <param name="value">The Plane to normalize.</param>
      <param name="result">[OutAttribute] An existing plane Plane filled in with a normalized version of the specified plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of Plane are equal.</summary>
      <param name="lhs">The object to the left of the equality operator.</param>
      <param name="rhs">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of Plane are not equal.</summary>
      <param name="lhs">The object to the left of the inequality operator.</param>
      <param name="rhs">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.ToString">
      <summary>Returns a String that represents the current Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a normalized Plane by a Matrix.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized Plane by a Matrix.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
      <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
      <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the rotation.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
      <summary>Describes the intersection between a plane and a bounding volume.</summary>
      <param name="Back">There is no intersection, and the bounding volume is in the negative half-space of the Plane.</param>
      <param name="Front">There is no intersection, and the bounding volume is in the positive half-space of the Plane.</param>
      <param name="Intersecting">The Plane is intersected.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlayerIndex">
      <summary>Specifies the game controller associated with a player.</summary>
      <param name="One">The first controller.</param>
      <param name="Two">The second controller.</param>
      <param name="Three">The third controller.</param>
      <param name="Four">The fourth controller.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Point">
      <summary>Defines a point in 2D space.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.X">
      <summary>Specifies the x-coordinate of the Point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.Y">
      <summary>Specifies the y-coordinate of the Point.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of Point.</summary>
      <param name="x">The x-coordinate of the Point.</param>
      <param name="y">The y-coordinate of the Point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="obj">The object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="other">The Point to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="a">Point on the left side of the equal sign.</param>
      <param name="b">Point on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are not equal.</summary>
      <param name="a">The Point on the left side of the equal sign.</param>
      <param name="b">The Point on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.ToString">
      <summary>Returns a String that represents the current Point.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Point.Zero">
      <summary>Returns the point (0,0).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.PowerLineStatus">
      <summary>Indicates the status of the system powerline.</summary>
      <param name="Offline">The system is offline.</param>
      <param name="Online">The system is online.</param>
      <param name="Unknown">The power status of the system is unknown.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PowerStatus">
      <summary>Contains system power information, including battery life status and power line status.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryChargeStatus">
      <summary>Gets the BatteryChargeStatus associated with the system.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryFullLifetime">
      <summary>Gets the full charge lifetime of the primary battery power source.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryLifePercent">
      <summary>Gets the approximate percentage of full battery time remaining.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryLifeRemaining">
      <summary>Gets the approximate battery life remaining.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.PowerLineStatus">
      <summary>Gets the PowerLineStatus associated with the system.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.PowerStatus.PowerStateChanged">
      <summary>Raised when the power state changes.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Quaternion">
      <summary>Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.W">
      <summary>Specifies the rotation component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.X">
      <summary>Specifies the x-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
      <summary>Specifies the y-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
      <summary>Specifies the z-value of the vector component of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="vectorPart">The vector component of the quaternion.</param>
      <param name="scalarPart">The rotation component of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="x">The x-value of the quaternion.</param>
      <param name="y">The y-value of the quaternion.</param>
      <param name="z">The z-value of the quaternion.</param>
      <param name="w">The w-value of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <param name="result">[OutAttribute] Result of adding the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
      <param name="result">[OutAttribute] The Quaternion rotation representing the concatenation of value1 followed by value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
      <summary>Transforms this Quaternion into its conjugate.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the conjugate of a specified Quaternion.</summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the conjugate of a specified Quaternion.</summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
      <param name="result">[OutAttribute] An existing Quaternion filled in to be the conjugate of the specified one.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
      <param name="result">[OutAttribute] The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing Quaternion filled in to express the specified yaw, pitch, and roll angles.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <param name="result">[OutAttribute] Dot product of the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
      <summary>Determines whether the specified Object is equal to the Quaternion.</summary>
      <param name="other">The Quaternion to compare with the current Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
      <summary>Get the hash code of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
      <param name="result">[OutAttribute] The inverse of the Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
      <summary>Calculates the length of a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
      <param name="result">[OutAttribute] The resulting quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">[OutAttribute] Negated quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">[OutAttribute] Normalized quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compares two Quaternions for equality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compare two Quaternions for inequality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
      <param name="result">[OutAttribute] Result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
      <summary>Retireves a string representation of the current object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
      <summary>Returns a Quaternion representing no rotation.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Ray">
      <summary>Defines a ray.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Direction">
      <summary>Unit vector specifying the direction the Ray is pointing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Position">
      <summary>Specifies the starting point of the Ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Ray.</summary>
      <param name="position">The starting point of the Ray.</param>
      <param name="direction">Unit vector describing the direction of the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
      <summary>Determines whether two instances of Ray are equal.</summary>
      <param name="obj">The Object to compare with the current Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether the specified Ray is equal to the current Ray.</summary>
      <param name="other">The Ray to compare with the current Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the Ray intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the Ray intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the Ray intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether this Ray intersects a specified Plane.</summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current Ray intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current Ray intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane@,System.Nullable{System.Single}@)">
      <summary>Determines whether this Ray intersects a specified Plane.</summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
      <param name="result">[OutAttribute] The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of Ray are equal.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of Ray are not equal.</summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.ToString">
      <summary>Returns a String that represents the current Ray.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Rectangle">
      <summary>Defines a rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
      <summary>Specifies the height of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
      <summary>Specifies the width of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.X">
      <summary>Specifies the x-coordinate of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
      <summary>Specifies the y-coordinate of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of Rectangle.</summary>
      <param name="x">The x-coordinate of the rectangle.</param>
      <param name="y">The y-coordinate of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)">
      <summary>Determines whether this Rectangle contains a specified Point.</summary>
      <param name="value">The Point to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)">
      <summary>Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.</summary>
      <param name="x">The x-coordinate of the specified point.</param>
      <param name="y">The y-coordinate of the specified point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
      <summary>Determines whether this Rectangle contains a specified Point.</summary>
      <param name="value">The Point to evaluate.</param>
      <param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
      <param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether the specified Object is equal to the Rectangle.</summary>
      <param name="other">The Object to compare with the current Rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
      <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
      <param name="horizontalAmount">Value to push the sides out by.</param>
      <param name="verticalAmount">Value to push the top and bottom out by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
      <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
      <param name="value">The Rectangle to evaluate</param>
      <param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="amount">The values to adjust the position of the Rectangle by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="offsetX">Change in the x-position.</param>
      <param name="offsetY">Change in the y-position.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for equality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
      <param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
      <summary>Returns the y-coordinate of the bottom of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Center">
      <summary>Gets the Point that specifies the center of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
      <summary>Returns a Rectangle with all of its values set to zero.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.IsEmpty">
      <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
      <summary>Returns the x-coordinate of the left side of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Location">
      <summary>Gets or sets the upper-left value of the Rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
      <summary>Returns the x-coordinate of the right side of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
      <summary>Returns the y-coordinate of the top of the rectangle.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.TargetPlatform">
      <summary>Defines the target platform to be used when compiling content.</summary>
      <param name="Unknown">Represents an unknown platform.</param>
      <param name="Windows">The Windows platform.</param>
      <param name="Xbox360">The Xbox 360 game console.</param>
      <param name="Zune">A Zune device.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector2">
      <summary>Defines a vector with two components.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
      <summary>Creates a new instance of Vector2.</summary>
      <param name="value">Value to initialize both components to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of Vector2.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 2D Cartesian coordinates of the specified point are placed in this Vector2 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
      <summary>Determines whether the specified Object is equal to the Vector2.</summary>
      <param name="other">The Object to compare with the current Vector2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source Vector2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
      <param name="result">[OutAttribute] The created reflect vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the vector (x, y, 0, 1) by the specified matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] An existing Vector2 filled in with the result of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2s by a specified Quaternion.</summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="rotation">The transform Matrix to use.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2s by a specified Matrix and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to transform by.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 2D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2 vector normals by a specified Matrix.</summary>
      <param name="sourceArray">The array of vector normals to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2 vector normals by a specified Matrix and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of vector normals to be transformed.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.One">
      <summary>Returns a Vector2 with both of its components set to one.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
      <summary>Returns the unit vector for the x-axis.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
      <summary>Returns the unit vector for the y-axis.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
      <summary>Returns a Vector2 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector3">
      <summary>Defines a vector with three components.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
      <summary>Creates a new instance of Vector3.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The cross product of the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
      <summary>Determines whether the specified Object is equal to the Vector3.</summary>
      <param name="other">The Vector3 to compare with the current Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">The source Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <param name="result">[OutAttribute] The reflected vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector by the given matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The transformed vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] An existing Vector3 filled in with the results of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified transform Matrix to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified Quaternion rotation to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms an array of 3D vector normals by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector3 normals to transform.</param>
      <param name="matrix">The transform matrix to apply.</param>
      <param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.</summary>
      <param name="sourceArray">The source array of Vector3 normals.</param>
      <param name="sourceIndex">The starting index in the source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The destination Vector3 array.</param>
      <param name="destinationIndex">The starting index in the destination array.</param>
      <param name="length">The number of vectors to transform.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
      <summary>Returns a unit Vector3 designating backward in a right-handed coordinate system (0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Down">
      <summary>Returns a unit Vector3 designating down (0, −1, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
      <summary>Returns a unit Vector3 designating forward in a right-handed coordinate system(0, 0, −1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Left">
      <summary>Returns a unit Vector3 designating left (−1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.One">
      <summary>Returns a Vector3 with ones in all of its components.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Right">
      <summary>Returns a unit Vector3 pointing to the right (1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
      <summary>Returns the x unit Vector3 (1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
      <summary>Returns the y unit Vector3 (0, 1, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
      <summary>Returns the z unit Vector3 (0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Up">
      <summary>Returns a unit vector designating up (0, 1, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
      <summary>Returns a Vector3 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector4">
      <summary>Defines a vector with four components.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.W">
      <summary>Gets or sets the w-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
      <summary>Creates a new instance of Vector4.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
      <summary>Determines whether the specified Object is equal to the Vector4.</summary>
      <param name="other">The Vector4 to compare with the current Vector4.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
      <summary>Turns the current vector into a unit vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="vector">The source Vector4.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a normalized version of the specified vector.</summary>
      <param name="vector">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value1">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector4 by the specified Matrix.</summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector4 by the given Matrix.</summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Quaternion.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.One">
      <summary>Returns a Vector4 with all of its components set to one.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
      <summary>Returns the Vector4 (0, 0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
      <summary>Returns the Vector4 (1, 0, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
      <summary>Returns the Vector4 (0, 1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
      <summary>Returns the Vector4 (0, 0, 1, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
      <summary>Returns a Vector4 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioCategory">
      <summary>Represents a particular category of sounds. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)">
      <summary>Determines whether the specified AudioCategory is equal to this AudioCategory.</summary>
      <param name="other">AudioCategory to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this AudioCategory.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)">
      <summary>Determines whether the specified AudioCategory instances are equal.</summary>
      <param name="value1">Object to the left of the equality operator.</param>
      <param name="value2">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)">
      <summary>Determines whether the specified AudioCategory instances are not equal.</summary>
      <param name="value1">Object to the left of the inequality operator.</param>
      <param name="value2">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Pause">
      <summary>Pauses all sounds associated with this category.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Resume">
      <summary>Resumes all paused sounds associated with this category.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)">
      <summary>Sets the volume of all sounds associated with this category. Reference page contains links to related code samples.</summary>
      <param name="volume">Volume amplitude multiplier. volume is normally between 0.0 (silence) and 1.0 (full volume), but can range from 0.0f to float.MaxValue. Volume levels map to decibels (dB) as shown in the following table. VolumeDescription 0.0f-96 dB (silence) 1.0f +0 dB (full volume as authored) 2.0f +6 dB (6 dB greater than authored)</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
      <summary>Stops all sounds associated with this category.</summary>
      <param name="options">Enumerated value specifying how the sounds should be stopped.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.ToString">
      <summary>Returns a String representation of this AudioCategory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioCategory.Name">
      <summary>Specifies the friendly name of this category.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioEmitter">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEmitter.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.DopplerScale">
      <summary>Gets or sets a scalar applied to the level of Doppler effect calculated between this and any AudioListener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Forward">
      <summary>Gets or sets the forward orientation vector for this emitter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Position">
      <summary>Gets or sets the position of this emitter. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Up">
      <summary>Gets or sets the upward orientation vector for this emitter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Velocity">
      <summary>Gets or sets the velocity vector of this emitter.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioEngine">
      <summary>Represents the audio engine. Applications use the methods of the audio engine to instantiate and manipulate core audio objects. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion">
      <summary>Specifies the current content version.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)">
      <summary>Initializes a new instance of this class, using a path to an XACT global settings file.</summary>
      <param name="settingsFile">Path to a global settings file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.String)">
      <summary>Initializes a new instance of this class, using a settings file, a specific audio renderer, and a specific speaker configuration.</summary>
      <param name="settingsFile">Path to a global settings file.</param>
      <param name="lookAheadTime">Interactive audio and branch event look-ahead time, in milliseconds.</param>
      <param name="rendererId">A string that specifies the audio renderer to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)">
      <summary>Gets an audio category. Reference page contains links to related code samples.</summary>
      <param name="name">Friendly name of the category to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)">
      <summary>Gets the value of a global variable. Reference page contains links to related conceptual articles.</summary>
      <param name="name">Friendly name of the variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)">
      <summary>Sets the value of a global variable.</summary>
      <param name="name">Value of the global variable.</param>
      <param name="value">Friendly name of the global variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Update">
      <summary>Performs periodic work required by the audio engine. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.RendererDetails">
      <summary>Gets a collection of audio renderers.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioListener">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioListener.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Forward">
      <summary>Gets or sets the forward orientation vector for this listener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Position">
      <summary>Gets or sets the position of this listener. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Up">
      <summary>Gets or sets the upward orientation vector for this listener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Velocity">
      <summary>Gets or sets the velocity vector of this listener.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioStopOptions">
      <summary>Controls how Cue objects should stop when Stop is called.</summary>
      <param name="AsAuthored">Indicates the cue should stop normally, playing any release phase or transition specified in the content.</param>
      <param name="Immediate">Indicates the cue should stop immediately, ignoring any release phase or transition specified in the content.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Cue">
      <summary>Defines methods for managing the playback of sounds. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Calculates the 3D audio values between an AudioEmitter and an AudioListener object, and applies the resulting values to this Cue.  Reference page contains code sample.</summary>
      <param name="listener">The listener to calculate.</param>
      <param name="emitter">The emitter to calculate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the Cue.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.GetVariable(System.String)">
      <summary>Gets a cue-instance variable value based on its friendly name.</summary>
      <param name="name">Friendly name of the variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Pause">
      <summary>Pauses playback. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Play">
      <summary>Requests playback of a prepared or preparing Cue. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Resume">
      <summary>Resumes playback of a paused Cue. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.SetVariable(System.String,System.Single)">
      <summary>Sets the value of a cue-instance variable based on its friendly name.</summary>
      <param name="name">Friendly name of the variable to set.</param>
      <param name="value">Value to assign to the variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
      <summary>Stops playback of a Cue. Reference page contains links to related code samples.</summary>
      <param name="options">Enumerated value specifying how the sound should stop. If set to None, the sound will play any release phase or transition specified in the audio designer. If set to Immediate, the sound will stop immediately, ignoring any release phases or transitions.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsCreated">
      <summary>Returns whether the cue has been created.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsDisposed">
      <summary>Gets a value indicating whether the object has been disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPaused">
      <summary>Returns whether the cue is currently paused.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPlaying">
      <summary>Returns whether the cue is playing.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPrepared">
      <summary>Returns whether the cue is prepared to play.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPreparing">
      <summary>Returns whether the cue is preparing to play.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsStopped">
      <summary>Returns whether the cue is currently stopped.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsStopping">
      <summary>Returns whether the cue is stopping playback.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.Name">
      <summary>Returns the friendly name of the cue.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.Cue.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InstancePlayLimitException">
      <summary>The exception that is thrown when there is an attempt to play more than 16 SoundEffectInstance sounds concurrently.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor">
      <summary>Initializes a new instance of the InstancePlayLimitException class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message.</summary>
      <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="inner">Exception that is the cause of the current exception. If innerException is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoAudioHardwareException">
      <summary>The exception that is thrown when no audio hardware is present, or when audio hardware is installed, but the device drivers for the audio hardware are not present or enabled.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.RendererDetail">
      <summary>Represents an audio renderer, which is a device that can render audio to a user.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare to this object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.op_Equality(Microsoft.Xna.Framework.Audio.RendererDetail,Microsoft.Xna.Framework.Audio.RendererDetail)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.op_Inequality(Microsoft.Xna.Framework.Audio.RendererDetail,Microsoft.Xna.Framework.Audio.RendererDetail)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.RendererDetail.FriendlyName">
      <summary>Gets the human-readable name for the renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.RendererDetail.RendererId">
      <summary>Specifies the string that identifies the renderer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundBank">
      <summary>Represents a sound bank, which is a collection of cues. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
      <summary>Initializes a new instance of this class using a sound bank from file.</summary>
      <param name="audioEngine">Audio engine that will be associated with this sound bank.</param>
      <param name="filename">Path to the sound bank file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)">
      <summary>Gets a cue from the sound bank. Reference page contains links to related code samples.</summary>
      <param name="name">Friendly name of the cue to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)">
      <summary>Plays a cue. Reference page contains links to related code samples.</summary>
      <param name="name">Name of the cue to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Plays a cue using 3D positional information specified in an AudioListener and AudioEmitter. Reference page contains links to related code samples.</summary>
      <param name="name">Name of the cue to play.</param>
      <param name="listener">AudioListener that specifies listener 3D audio information.</param>
      <param name="emitter">AudioEmitter that specifies emitter 3D audio information.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsInUse">
      <summary>Returns whether the sound bank is currently in use.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.SoundBank.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffect">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance">
      <summary>Creates a new SoundEffectInstance for this SoundEffect. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose">
      <summary>Releases the resources used by the SoundEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the SoundEffect is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play">
      <summary>Creates a new SoundEffectInstance, and plays it. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)">
      <summary>Creates a new SoundEffectInstance, and plays it using the specified volume, pitch, and panning. Reference page contains links to related code samples.</summary>
      <param name="volume">Volume, ranging from 0.0f (silence) to 1.0f (full volume). 1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <param name="pitch">Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave). 0.0f is unity (normal) pitch.</param>
      <param name="pan">Panning, ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale">
      <summary>Gets or sets a value that adjusts the effect of distance calculations on the sound (emitter).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale">
      <summary>Gets or sets a value that adjusts the effect of doppler calculations on the sound (emitter).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Duration">
      <summary>Gets the duration of the SoundEffect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume">
      <summary>Gets or sets the master volume that affects all SoundEffectInstance sounds.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Name">
      <summary>Gets or sets the asset name of the SoundEffect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound">
      <summary>Returns the speed of sound: 343.5 meters per second.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance">
      <summary>Provides a single playing, paused, or stopped instance of a SoundEffect sound.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applies 3D positioning to the sound using a single listener. Reference page contains links to related code samples.</summary>
      <param name="listener">Position of the listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applies 3D position to the sound using multiple listeners. Reference page contains links to related code samples.</summary>
      <param name="listeners">Positions of each listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose">
      <summary>Releases the resources used by the Dispose.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the SoundEffectInstance is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause">
      <summary>Pauses a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play">
      <summary>Plays or resumes a SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume">
      <summary>Resumes playback for a SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop">
      <summary>Immediately stops playing a SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)">
      <summary>Stops playing a SoundEffectInstance, either immediately or as authored. Reference page contains links to related code samples.</summary>
      <param name="immediate">Whether to stop playing immediately, or to break out of the loop region and play the release. Specify true to stop playing immediately, or false to break out of the loop region and play the release phase (the remainder of the sound).</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped">
      <summary>Gets a value that indicates whether looping is enabled for the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan">
      <summary>Gets or sets the panning for the SoundEffectInstance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch">
      <summary>Gets or sets the pitch adjustment for the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State">
      <summary>Gets the current state (playing, paused, or stopped) of the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume">
      <summary>Gets or sets the volume of the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundState">
      <summary>Current state (playing, paused, or stopped) of a SoundEffectInstance.</summary>
      <param name="Paused">The SoundEffectInstance is paused.</param>
      <param name="Playing">The SoundEffectInstance is playing.</param>
      <param name="Stopped">The SoundEffectInstance is stopped.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.WaveBank">
      <summary>Represents a wave bank, which is a collection of wave files. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
      <summary>Initializes a new, in-memory instance of this class using a specified AudioEngine and path to a wave bank file.</summary>
      <param name="audioEngine">Instance of an AudioEngine to associate this wave bank with.</param>
      <param name="nonStreamingWaveBankFilename">Path to the wave bank file to load.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)">
      <summary>Initializes a new, streaming instance of this class, using a provided AudioEngine and streaming wave bank parameters.</summary>
      <param name="audioEngine">Instance of an AudioEngine to associate this wave bank with.</param>
      <param name="streamingWaveBankFilename">Path to the wave bank file to stream from.</param>
      <param name="offset">Offset within the wave bank data file. This offset must be DVD sector aligned.</param>
      <param name="packetsize">Stream packet size, in sectors, to use for each stream. The minimum value is 2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsInUse">
      <summary>Returns whether the wave bank is currently in use.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared">
      <summary>Returns whether the wave bank is prepared to play.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.WaveBank.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentLoadException">
      <summary>Exception used to report errors from the ContentManager.Load method.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor">
      <summary>Creates a new instance of ContentLoadException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="info">Describes the value types that were being loaded when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentManager">
      <summary>The ContentManager is the run-time component which loads managed objects from the binary files produced by the design time content pipeline. It also manages the lifespan of the loaded objects, disposing the content manager will also dispose any assets which are themselves IDisposable.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of ContentManager.  Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider that the ContentManager should use to locate services.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider,System.String)">
      <summary>Initializes a new instance of ContentManager.  Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="rootDirectory">The root directory to search for content.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose">
      <summary>Releases all resources used by the ContentManager class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the ContentManager and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Load``1(System.String)">
      <summary>Loads an asset that has been processed by the Content Pipeline.  Reference page contains code sample.</summary>
      <param name="assetName">Asset name, relative to the loader root directory, and not including the .xnb file extension.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.OpenStream(System.String)">
      <summary>Opens a stream for reading the specified asset. Derived classes can replace this to implement pack files or asset compression.</summary>
      <param name="assetName">The name of the asset being read.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.ReadAsset``1(System.String,System.Action{System.IDisposable})">
      <summary>Low-level worker method that reads asset data.</summary>
      <param name="assetName">The name of the asset to be loaded from disk.</param>
      <param name="recordDisposableObject">Delegate function for handling the disposition of assets. If recordDisposableObject is null, the default lifespan tracking and management is used, so unloading or disposing of the content manager frees everything that has been loaded through it. If recordDisposableObject specifies a valid delegate, that delegate is used instead of the default lifespan tracking and is called every time the loader encounters a type that implements IDisposable. You must use your own code to unload assets loaded in this fashion, since ContentManager's Unload method will not be aware of them.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Unload">
      <summary>Disposes all data that was loaded by this ContentManager.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory">
      <summary>Gets or sets the root directory associated with this ContentManager.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.ServiceProvider">
      <summary>Gets the service provider associated with the ContentManager.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentReader">
      <summary>A worker object that implements most of ContentManager.Load. A new ContentReader is constructed for each asset loaded.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadColor">
      <summary>Reads a Color value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadDouble">
      <summary>Reads a double value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadExternalReference``1">
      <summary>Reads a link to an external file.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadMatrix">
      <summary>Reads a Matrix value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadQuaternion">
      <summary>Reads a Quaternion value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, this method reads data only from the base type.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If a base class of the actual object type is specified only data from the base type will be read.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(``0)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, the method reads data only from the base type.</summary>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, this method reads data only from the base type.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResource``1(System.Action{``0})">
      <summary>Reads a shared resource ID, and records it for subsequent fix-up.</summary>
      <param name="fixup">The fix-up action to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSingle">
      <summary>Reads a float value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector2">
      <summary>Reads a Vector2 value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector3">
      <summary>Reads a Vector3 value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector4">
      <summary>Reads a Vector4 value from the current stream.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName">
      <summary>Gets the name of the asset currently being read by this ContentReader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.ContentManager">
      <summary>Gets the ContentManager associated with the ContentReader.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerAttribute">
      <summary>A custom Attribute that marks a field or property to control how it is serialized or to indicate that protected or private data should be included in serialization.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.#ctor">
      <summary>Creates a new instance of ContentSerializerAttribute.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Clone">
      <summary>Creates a copy of the ContentSerializerAttribute.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.AllowNull">
      <summary>Get or set a value indicating whether this member can have a null value (default=true).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.CollectionItemName">
      <summary>Gets or sets the XML element name for each item in a collection (default = "Item").  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.ElementName">
      <summary>Gets or sets the XML element name (default=name of the managed type member).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.FlattenContent">
      <summary>Gets or sets a value idicating whether to write member contents directly into the current XML context rather than wrapping the member in a new XML element (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.HasCollectionItemName">
      <summary>Indicates whether an explicit CollectionItemName string is being used or the default value.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Optional">
      <summary>Indicates whether to write this element if the member is null and skip past it if not found when deserializing XML (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.SharedResource">
      <summary>Indicates whether this member is referenced from multiple parents and should be serialized as a unique ID reference (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute">
      <summary>A custom Attribute that marks a collection class to specify the XML element name for each item in the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.#ctor(System.String)">
      <summary>Creates a new instance of ContentSerializerCollectionItemNameAttribute.  Reference page contains code sample.</summary>
      <param name="collectionItemName">The name for each item in the collection.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.CollectionItemName">
      <summary>Gets the name that will be used for each item in the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute">
      <summary>A custom Attribute that marks public fields or properties to prevent them from being serialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.#ctor">
      <summary>Creates a new instance of ContentSerializerIgnoreAttribute.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.#ctor(System.String)">
      <summary>Creates a new instance of ContentSerializerRuntimeTypeAttribute.</summary>
      <param name="runtimeType">The run-time type name of the object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.RuntimeType">
      <summary>Gets the run-time type for the object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.#ctor(System.Int32)">
      <summary>Creates a new instance of ContentSerializerTypeVersionAttribute.</summary>
      <param name="typeVersion">The run-time type version of the object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.TypeVersion">
      <summary>Gets the run-time type version for the object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader">
      <summary>Worker for reading a specific managed type from a binary format.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.#ctor(System.Type)">
      <summary>Creates a new instance of ContentTypeReader.</summary>
      <param name="targetType">The type handled by this reader component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Initialize(Microsoft.Xna.Framework.Content.ContentTypeReaderManager)">
      <summary>Retrieves and caches nested type readers. Called by the framework at creation time.</summary>
      <param name="manager">The content manager.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">The object receiving the data, or null if a new instance of the object should be created.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.CanDeserializeIntoExistingObject">
      <summary>Determines if deserialization into an existing object is possible.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TargetType">
      <summary>Gets the type handled by this reader component.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TypeVersion">
      <summary>Gets a format version number for this type.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader`1">
      <summary>Worker for reading a specific managed type from a binary format. Derive from this class to add new data types to the content pipeline system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.#ctor">
      <summary>Creates a new instance of ContentTypeReader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads an object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,`0)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReaderManager">
      <summary>A manager that constructs and keeps track of type reader objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(System.Type)">
      <summary>Looks up a reader for the specified type.</summary>
      <param name="targetType">The type the reader will handle.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ResourceContentManager">
      <summary>Subclass of ContentManager, which is specialized to read from .resx resource files rather than directly from individual files on disk.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.#ctor(System.IServiceProvider,System.Resources.ResourceManager)">
      <summary>Creates a new instance of ResourceContentManager.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="resourceManager">The resource manager for the ResourceContentManager to read from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.OpenStream(System.String)">
      <summary>Opens a stream for reading the specified resource. Derived classes can replace this to implement pack files or asset compression.</summary>
      <param name="assetName">The name of the asset being read.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.BoundingBoxConverter">
      <summary>Provides a unified way of converting BoundingBox values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingBoxConverter.#ctor">
      <summary>Initializes a new instance of the BoundingBoxConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingBoxConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingBoxConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingBoxConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this BoundingBoxConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.BoundingSphereConverter">
      <summary>Provides a unified way of converting BoundingSphere values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingSphereConverter.#ctor">
      <summary>Initializes a new instance of the BoundingSphereConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingSphereConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingSphereConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.BoundingSphereConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this BoundingSphereConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.ColorConverter">
      <summary>Provides a unified way of converting Color values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.ColorConverter.#ctor">
      <summary>Initializes a new instance of the ColorConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to the type of this converter.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.ColorConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Re-creates an object given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.MathTypeConverter">
      <summary>Provides a unified way of converting math type values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Design.MathTypeConverter.propertyDescriptions">
      <summary>Represents a collection of PropertyDescriptor objects.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Design.MathTypeConverter.supportStringConvert">
      <summary>Returns whether string conversion is supported.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.#ctor">
      <summary>Initializes a new instance of the MathTypeConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
      <param name="context">The format context.</param>
      <param name="sourceType">The type you want to convert from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the type of this converter.</summary>
      <param name="context">The format context.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether changing a value on this object requires a call to CreateInstance to create a new value, using the specified context.</summary>
      <param name="context">The format context.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the value parameter.</summary>
      <param name="context">The format context.</param>
      <param name="value">The type of array for which to get properties.</param>
      <param name="attributes">An array to use as a filter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MathTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports properties, using the specified context.</summary>
      <param name="context">The format context.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.MatrixConverter">
      <summary>Provides a unified way of converting Matrix values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MatrixConverter.#ctor">
      <summary>Initializes a new instance of the MatrixConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.MatrixConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this MatrixConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.PlaneConverter">
      <summary>Provides a unified way of converting Plane values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PlaneConverter.#ctor">
      <summary>Initializes a new instance of the PlaneConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PlaneConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PlaneConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this PlaneConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.PointConverter">
      <summary>Provides a unified way of converting Point values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PointConverter.#ctor">
      <summary>Initializes a new instance of the PointConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this PointConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.QuaternionConverter">
      <summary>Provides a unified way of converting Quaternion values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.QuaternionConverter.#ctor">
      <summary>Initializes a new instance of the QuaternionConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this QuaternionConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.RayConverter">
      <summary>Provides a unified way of converting Ray values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RayConverter.#ctor">
      <summary>Initializes a new instance of the RayConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RayConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this RayConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.RectangleConverter">
      <summary>Provides a unified way of converting Rectangle values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RectangleConverter.#ctor">
      <summary>Initializes a new instance of the RectangleConverter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this RectangleConverter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.Vector2Converter">
      <summary>Provides a unified way of converting Vector2 values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector2Converter.#ctor">
      <summary>Initializes a new instance of the Vector2Converter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this Vector2Converter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.Vector3Converter">
      <summary>Provides a unified way of converting Vector3 values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector3Converter.#ctor">
      <summary>Initializes a new instance of the Vector3Converter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this Vector3Converter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Design.Vector4Converter">
      <summary>Provides a unified way of converting Vector4 values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector4Converter.#ctor">
      <summary>Initializes a new instance of the Vector4Converter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">The format context.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this Vector4Converter is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">The format context.</param>
      <param name="propertyValues">The new property values.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarAnimation">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset)">
      <summary>Creates a new instance of AvatarAnimation, and initializes it with the specified animation.</summary>
      <param name="animationPreset">The specified standard animation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Finalize">
      <summary>Allows the avatar animation to attempt to free resources, and it performs other cleanup operations before garbage collection reclaims the animation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Update(System.TimeSpan,System.Boolean)">
      <summary>Updates the current time position of the avatar animation.</summary>
      <param name="elapsedAnimationTime">Elapsed time since the last animation frame. This value can be either a positive or negative time span. If the value is negative, animation playback is reversed.</param>
      <param name="loop">true if the animation playback is to be looped; otherwise, false.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.BoneTransforms">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.CurrentPosition">
      <summary>Gets or sets the current time position in the animation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Expression">
      <summary>Gets the expression of the related animation at the current time position.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.IsDisposed">
      <summary>Gets the disposed state of the avatar animation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarAnimation.Length">
      <summary>Gets the length of the current animation.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset">
      <summary>Defines standard animations for avatars.</summary>
      <param name="Celebrate">Gender-neutral, celebrating.</param>
      <param name="Clap">Gender-neutral, applauding.</param>
      <param name="FemaleAngry">Female, angry.</param>
      <param name="FemaleConfused">Female, confused.</param>
      <param name="FemaleCry">Female, cry.</param>
      <param name="FemaleIdleCheckNails">Female, checking nails.</param>
      <param name="FemaleIdleFixShoe">Female, fixing shoe.</param>
      <param name="FemaleIdleLookAround">Female, looking around.</param>
      <param name="FemaleIdleShiftWeight">Female, shifting weight from one foot to another</param>
      <param name="FemaleLaugh">Female, laughing.</param>
      <param name="FemaleShocked">Female, shocked or surprised.</param>
      <param name="FemaleYawn">Female, yawning.</param>
      <param name="MaleAngry">Male, angry.</param>
      <param name="MaleConfused">Male, confused.</param>
      <param name="MaleCry">Male, crying.</param>
      <param name="MaleIdleCheckHand">Male, checking hand.</param>
      <param name="MaleIdleLookAround">Male, looking around.</param>
      <param name="MaleIdleShiftWeight">Male, shifting weight from one foot to another.</param>
      <param name="MaleIdleStretch">Male, stretching.</param>
      <param name="MaleLaugh">Male, laughing.</param>
      <param name="MaleSurprised">Male, surprised.</param>
      <param name="MaleYawn">Male, yawning.</param>
      <param name="Stand0">Gender-neutral, standing, variation 0.</param>
      <param name="Stand1">Gender-neutral, standing, variation 1.</param>
      <param name="Stand2">Gender-neutral, standing, variation 2.</param>
      <param name="Stand3">Gender-neutral, standing, variation 3.</param>
      <param name="Stand4">Gender-neutral, standing, variation 4.</param>
      <param name="Stand5">Gender-neutral, standing, variation 5.</param>
      <param name="Stand6">Gender-neutral, standing, variation 6.</param>
      <param name="Stand7">Gender-neutral, standing, variation 7.</param>
      <param name="Wave">Gender-neutral, waving.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarBodyType">
      <summary>Defines the body type of the avatar.</summary>
      <param name="Female">Female avatar.</param>
      <param name="Male">Male avatar.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarBone">
      <summary />
      <param name="AnkleLeft">Left ankle.</param>
      <param name="AnkleRight">Right ankle.</param>
      <param name="BackLower">Lower back.</param>
      <param name="BackUpper">Upper back.</param>
      <param name="CollarLeft">Left collar.</param>
      <param name="CollarRight">Right collar</param>
      <param name="ElbowLeft">Left elbow</param>
      <param name="ElbowRight">Right elbow</param>
      <param name="FingerIndex2Left">Left index finger, 2nd joint.</param>
      <param name="FingerIndex2Right">Right index finger, 2nd joint.</param>
      <param name="FingerIndex3Left">Left index finger, 3rd joint.</param>
      <param name="FingerIndex3Right">Right index finger, 3rd joint.</param>
      <param name="FingerIndexLeft">Left index finger, 1st joint.</param>
      <param name="FingerIndexRight">Right index finger, 1st joint.</param>
      <param name="FingerMiddle2Left">Left middle finger, 2nd joint.</param>
      <param name="FingerMiddle2Right">Right middle finger, 2nd joint.</param>
      <param name="FingerMiddle3Left">Left middle finger, 3rd joint.</param>
      <param name="FingerMiddle3Right">Right middle finger, 3rd joint.</param>
      <param name="FingerMiddleLeft">Left middle finger, 1st joint.</param>
      <param name="FingerMiddleRight">Right middle finger, 1st joint.</param>
      <param name="FingerRing2Left">Left ring finger, 2nd joint.</param>
      <param name="FingerRing2Right">Right ring finger, 2nd joint.</param>
      <param name="FingerRing3Left">Left ring finger, 3rd joint.</param>
      <param name="FingerRing3Right">Right ring finger, 3rd joint.</param>
      <param name="FingerRingLeft">Left ring finger, 1st joint.</param>
      <param name="FingerRingRight">Right ring finger, 1st joint.</param>
      <param name="FingerSmall2Left">Left pinky finger, 2nd joint.</param>
      <param name="FingerSmall2Right">Right pinky finger, 2nd joint.</param>
      <param name="FingerSmall3Left">Left pinky finger, 3rd joint.</param>
      <param name="FingerSmall3Right">Right pinky finger, 3rd joint.</param>
      <param name="FingerSmallLeft">Left pinky finger, 1st joint.</param>
      <param name="FingerSmallRight">Right pinky finger, 2nd joint.</param>
      <param name="FingerThumb2Left">Left thumb, 2nd joint.</param>
      <param name="FingerThumb2Right">Right thumb, 2nd joint.</param>
      <param name="FingerThumb3Left">Left thumb, 3rd joint.</param>
      <param name="FingerThumb3Right">Right thumb, 3rd joint.</param>
      <param name="FingerThumbLeft">Left thumb, 1st joint.</param>
      <param name="FingerThumbRight">Right thumb, 1st joint.</param>
      <param name="Head">Head</param>
      <param name="HipLeft">Left hip.</param>
      <param name="HipRight">Right hip.</param>
      <param name="KneeLeft">Left knee.</param>
      <param name="Neck">Neck.</param>
      <param name="PropLeft">A separate object held in the left hand.</param>
      <param name="PropRight">A separate object held in the left hand.</param>
      <param name="KneeRight">Right knee.</param>
      <param name="Root">Root bone of the avatar skeleton.</param>
      <param name="ShoulderLeft">Left shoulder.</param>
      <param name="ShoulderRight">Right shoulder.</param>
      <param name="SpecialLeft">A special bone located near the left hand of the avatar model.</param>
      <param name="SpecialRight">A special bone located near the right hand of the avatar model.</param>
      <param name="ToeLeft">Left toe.</param>
      <param name="ToeRight">Right toe.</param>
      <param name="WristLeft">Left wrist.</param>
      <param name="WristRight">Right wrist.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarDescription">
      <summary>Provides access to the methods and properties of the description data for an avatar.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarDescription.#ctor(System.Byte[])">
      <summary>Creates a new instance of AvatarDescription using an existing data buffer.</summary>
      <param name="data">Existing buffer used to store the information of the newly-created avatar. Use the buffer specified by the Description property of a valid AvatarDescription object. Common scenarios include the recreation of random avatars that were created earlier or when avatar decription data is sent over a network to all signed-in gamers. Once that data is received, local avatar descriptions and renderers are created for each remote gamer avatar. Results are undefined if buffers from other sources are used.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom">
      <summary>Creates an avatar of random gender, features, and clothing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom(Microsoft.Xna.Framework.GamerServices.AvatarBodyType)">
      <summary>Creates an avatar of the specified body type with random features and clothing.</summary>
      <param name="bodyType">Body type of the randomly-created avatar.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarDescription.BodyType">
      <summary>Gets the body type of the avatar based on the description data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarDescription.Description">
      <summary>Internal description buffer of the avatar, stored as a byte buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarDescription.Height">
      <summary>Height of the avatar, from the feet to the top of the head.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarDescription.IsValid">
      <summary>Determines whether the internal data buffer is valid.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression">
      <summary>Contains the various components of the avatar's face, such as the left and right eyebrows.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarExpression.LeftEye">
      <summary>Gets or sets the current texture for the avatar's left eye.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarExpression.LeftEyebrow">
      <summary>Gets or sets the current texture for the avatar's left eye.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarExpression.Mouth">
      <summary>Gets or sets the current texture for the avatar's mouth.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarExpression.RightEye">
      <summary>Gets or sets the current texture for the avatar's right eye.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarExpression.RightEyebrow">
      <summary>Gets or sets the current texture for the avatar's right eyebrow.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarEye">
      <summary>Defines the standard animation textures for an avatar's eyes.</summary>
      <param name="Angry">Angry eye position.</param>
      <param name="Blink">Blinking eye position.</param>
      <param name="Confused">Confused eye position.</param>
      <param name="Happy">Happy eye position.</param>
      <param name="Laughing">Laughing eye position.</param>
      <param name="LookDown">Looking down eye position.</param>
      <param name="LookLeft">Looking left position.</param>
      <param name="LookRight">Looking right eye position.</param>
      <param name="LookUp">Looking up eye position.</param>
      <param name="Neutral">Neutral eye position.</param>
      <param name="Sad">Sad eye position.</param>
      <param name="Shocked">Shocked eye position.</param>
      <param name="Sleeping">Sleeping eye position.</param>
      <param name="Yawning">Yawning eye position.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarEyebrow">
      <summary>Defines the standard animation textures for an avatar's eyebrows.</summary>
      <param name="Angry">Angry eyebrow position.</param>
      <param name="Confused">Confused eyebrow position.</param>
      <param name="Neutral">Neutral eyebrow position.</param>
      <param name="Raised">Raised eyebrow position.</param>
      <param name="Sad">Sad eyebrow position.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarMouth">
      <summary>Defines the standard animation textures for an avatar's mouth.</summary>
      <param name="Angry">Angry mouth position.</param>
      <param name="Confused">Confused mouth position.</param>
      <param name="Happy">Happy mouth position.</param>
      <param name="Laughing">Laughing mouth position.</param>
      <param name="Neutral">Neutral mouth position.</param>
      <param name="PhoneticAi">Phonetic "ai" mouth position (for lip sync).</param>
      <param name="PhoneticDth">Phonetic "dth" mouth position (for lip sync).</param>
      <param name="PhoneticEe">Phonetic "ee" mouth position (for lip sync).</param>
      <param name="PhoneticFv">Phonetic "fv" mouth position (for lip sync).</param>
      <param name="PhoneticL">Phonetic "l" mouth position (for lip sync).</param>
      <param name="PhoneticO">Phonetic "o" mouth position (for lip sync).</param>
      <param name="PhoneticW">Phonetic "w" mouth position (for lip sync).</param>
      <param name="Sad">Sad mouth position.</param>
      <param name="Shocked">Shocked mouth position.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.AvatarRenderer">
      <summary>Provides properties and methods for rendering a standard avatar.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.BoneCount">
      <summary>Number of bones in the avatar model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarDescription)">
      <summary>Creates a new instance of AvatarRenderer with the specified description.</summary>
      <param name="avatarDescription">Description of the avatar to be rendered.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarDescription,System.Boolean)">
      <summary />
      <param name="avatarDescription">Description of the avatar to be rendered.</param>
      <param name="useLoadingEffect">true if the standard effect is to be used during loading; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.Draw(System.Collections.Generic.IList{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.GamerServices.AvatarExpression)">
      <summary>Draws the avatar to the current render target.</summary>
      <param name="bones">Collection of current bone transforms for the avatar. The transforms are in local bone space relative to their parent.</param>
      <param name="expression">Current expression textures for the avatar.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.Finalize">
      <summary>Allows the avatar renderer to attempt to free resources and perform other cleanup operations before garbage collection reclaims the renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.AmbientLightColor">
      <summary>Gets or sets the color of the ambient light used by the avatar renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.BindPose">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.IsDisposed">
      <summary>Gets the disposed state of the avatar renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.IsLoaded">
      <summary>Gets the loaded state of the avatar.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.LightColor">
      <summary>Gets or sets the color of the directional light used by the avatar renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.LightDirection">
      <summary>Gets or sets the color of the directional light used by the avatar renderer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.ParentBones">
      <summary>Collection of the parent indices for each bone in the related BindPose collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.Projection">
      <summary>Gets or sets the projection matrix for the avatar.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.View">
      <summary>Gets or sets the view matrix for the avatar.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.AvatarRenderer.World">
      <summary>Gets or sets the world matrix for the avatar.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.ControllerSensitivity">
      <summary>Indicates how sensitive this gamer prefers controller input to be.</summary>
      <param name="High">Highly sensitive controller input is preferred.</param>
      <param name="Low">Below average sensitivity is preferred.</param>
      <param name="Medium">Average controller sensitivity is preferred.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.FriendCollection">
      <summary>Represents the complete friends list of a local gamer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.FriendCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.FriendCollection.Finalize">
      <summary>Allows this object to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendCollection.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.FriendGamer">
      <summary>Provides the presence information of a friend of the local gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.FriendRequestReceivedFrom">
      <summary>Gets whether the local gamer who requested the friends list has received a friend request from this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.FriendRequestSentTo">
      <summary>Gets whether the local gamer who requested the friends list has sent a friend request to this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.HasVoice">
      <summary>Gets whether this friend currently has voice capability.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteAccepted">
      <summary>Gets whether this friend has accepted an invitation from the local gamer who requested the friends list.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteReceivedFrom">
      <summary>Gets whether the local gamer who requested the friends list has received an invitation from this friend.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteRejected">
      <summary>Gets whether this friend has rejected an invitation from the local gamer who requested the friends list.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteSentTo">
      <summary>Gets whether the local gamer who requested the friends list has sent an invitation to this friend.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsAway">
      <summary>Gets whether this friend is currently away from the computer or console.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsBusy">
      <summary>Gets whether this friend is currently busy.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsJoinable">
      <summary>Gets whether this friend is currently in a public session that can be joined.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsOnline">
      <summary>Gets whether this friend is currently online.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsPlaying">
      <summary>Gets whether this friend is currently playing a game.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.Presence">
      <summary>Gets a title-defined presence string describing what this friend is currently doing.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GameDefaults">
      <summary>Describes a gamer's preferred settings.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AccelerateWithButtons">
      <summary>Gets whether the gamer prefers to use controller buttons to accelerate in racing games.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AutoAim">
      <summary>Gets whether the title should automatically correct the gamer's aim.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AutoCenter">
      <summary>Gets whether the title should automatically center the view when the gamer moves.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.BrakeWithButtons">
      <summary>Gets whether the gamer prefers to use controller buttons to brake in racing games.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.ControllerSensitivity">
      <summary>Gets the preferred controller sensitivity setting for this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.GameDifficulty">
      <summary>Gets the preferred difficulty setting for this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.InvertYAxis">
      <summary>Gets whether the gamer prefers to invert the y-axis input of the controller.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.ManualTransmission">
      <summary>Gets whether the gamer prefers to drive a manual shift transmission in racing games.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.MoveWithRightThumbStick">
      <summary>Gets whether the gamer prefers to move using the right thumbstick.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.PrimaryColor">
      <summary>Gets the preferred color for the player character.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.RacingCameraAngle">
      <summary>Gets the gamer's preferred camera angle for racing games.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.SecondaryColor">
      <summary>Gets a secondary color selection for the player character.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GameDifficulty">
      <summary>Indicates how difficult this gamer likes things to be.</summary>
      <param name="Easy">Below-average difficulty.</param>
      <param name="Hard">Above-average difficulty.</param>
      <param name="Normal">Average difficulty.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.Gamer">
      <summary>Abstract base class for types that represent game players (profiles that have an associated gamertag). The concrete types SignedInGamer and NetworkGamer derive from this.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.BeginGetProfile(System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous profile read operation.</summary>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.EndGetProfile(System.IAsyncResult)">
      <summary>Ends an asynchronous profile read operation.</summary>
      <param name="result">An IAsyncResult used to track the progress of the operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.GetProfile">
      <summary>Reads profile data for this gamer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.Gamertag">
      <summary>Gets the gamertag string.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.Tag">
      <summary>Gets or sets a custom object which can be used to attach arbitrary user defined data to the gamer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerCollection`1">
      <summary>Represents a collection of gamers. This collection cannot be modified and is updated automatically during the call to Update.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GetEnumerator">
      <summary>Returns a strongly typed GamerCollection.GamerCollectionEnumerator Generic Structure that can iterate through a GamerCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.System.Collections.Generic.IEnumerable&lt;Microsoft.Xna.Framework.GamerServices.Gamer&gt;.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator">
      <summary>Provides the ability to iterate through the gamers in an GamerCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the GamerCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the GamerCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.Current">
      <summary>Gets the current element in the GamerCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the GamerCollection as a Object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPresence">
      <summary>Provides properties to set the rich presence state for a locally signed-in gamer profile.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPresence.PresenceMode">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPresence.PresenceValue">
      <summary />
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode">
      <summary>Settings defining the status string that will appear when you view a friend through the Xbox LIVE Guide or on Xbox.com. Use the PresenceMode property to set this option.</summary>
      <param name="ArcadeMode">Arcade Mode</param>
      <param name="AtMenu">At Menu</param>
      <param name="BattlingBoss">Battling Boss</param>
      <param name="CampaignMode">Campaign Mode</param>
      <param name="ChallengeMode">Challenge Mode</param>
      <param name="ConfiguringSettings">Configuring Settings</param>
      <param name="CoOpLevel">Co-Op: Level. Includes a numeric value specified with PresenceValue.</param>
      <param name="CoOpStage">Co-Op: Stage. Includes a numeric value specified with PresenceValue.</param>
      <param name="CornflowerBlue">Cornflower Blue</param>
      <param name="CustomizingPlayer">Customizing Player</param>
      <param name="DifficultyEasy">Difficulty: Easy</param>
      <param name="DifficultyExtreme">Difficulty: Extreme</param>
      <param name="DifficultyHard">Difficulty: Hard</param>
      <param name="DifficultyMedium">Difficulty: Medium</param>
      <param name="EditingLevel">Editing Level</param>
      <param name="ExplorationMode">Exploration Mode</param>
      <param name="FoundSecret">Found Secret</param>
      <param name="FreePlay">Free Play</param>
      <param name="GameOver">Game Over</param>
      <param name="InCombat">In Combat</param>
      <param name="InGameStore">In Game Store</param>
      <param name="Level">Level. Includes a numeric value specified with PresenceValue.</param>
      <param name="LocalCoOp">Local Co-Op</param>
      <param name="LocalVersus">Local Versus</param>
      <param name="LookingForGames">Looking For Games</param>
      <param name="Losing">Losing</param>
      <param name="Multiplayer">Multiplayer</param>
      <param name="NearlyFinished">Nearly Finished</param>
      <param name="None">No Presence String Displayed</param>
      <param name="OnARoll">On a Roll</param>
      <param name="OnlineCoOp">Online Co-Op</param>
      <param name="OnlineVersus">Online Versus</param>
      <param name="Outnumbered">Outnumbered</param>
      <param name="Paused">Paused</param>
      <param name="PlayingMinigame">Playing Minigame</param>
      <param name="PlayingWithFriends">Playing With Friends</param>
      <param name="PracticeMode">Practice Mode</param>
      <param name="PuzzleMode">Puzzle Mode</param>
      <param name="ScenarioMode">Scenario Mode</param>
      <param name="Score">Score. Includes a numeric value specified with PresenceValue.</param>
      <param name="ScoreIsTied">Score is Tied</param>
      <param name="SettingUpMatch">Setting Up Match</param>
      <param name="SinglePlayer">Single Player</param>
      <param name="Stage">Stage. Includes a numeric value specified with PresenceValue.</param>
      <param name="StartingGame">Starting Game</param>
      <param name="StoryMode">Story Mode</param>
      <param name="StuckOnAHardBit">Stuck on a Hard Bit</param>
      <param name="SurvivalMode">Survival Mode</param>
      <param name="TimeAttack">Time Attack</param>
      <param name="TryingForRecord">Trying For Record</param>
      <param name="TutorialMode">Tutorial Mode</param>
      <param name="VersusComputer">Versus Computer</param>
      <param name="VersusScore">Versus: Score. Includes a numeric value specified with PresenceValue.</param>
      <param name="WaitingForPlayers">Waiting For Players</param>
      <param name="WaitingInLobby">Waiting In Lobby</param>
      <param name="WastingTime">Wasting Time</param>
      <param name="WatchingCredits">Watching Credits</param>
      <param name="WatchingCutscene">Watching Cutscene</param>
      <param name="Winning">Winning</param>
      <param name="WonTheGame">Won the Game</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException">
      <summary>Thrown if a gamer services or multiplayer API is called without a valid, signed-in profile.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor">
      <summary>Creates an instance of GamerPrivilegeException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor(System.String)">
      <summary>Initializes a new instance of GamerPrivilegeException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of GamerPrivilegeException with the specified streaming context.</summary>
      <param name="info">Describes the gamer services or multiplayer API being accessed when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of GamerPrivilegeException with the specified error message and inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivileges">
      <summary>Describes what operations a gamer is allowed to perform.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowCommunication">
      <summary>Checks whether this gamer is allowed to send and receive communications using voice, text, messaging, or game invites.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowOnlineSessions">
      <summary>Checks whether this gamer is allowed to play in online multiplayer sessions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowProfileViewing">
      <summary>Checks whether this gamer is allowed to view the profiles of other gamers.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowPurchaseContent">
      <summary>Checks whether this gamer is allowed to purchase content from LIVE Marketplace.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowTradeContent">
      <summary>Checks whether this gamer is allowed to trade content with other gamers.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowUserCreatedContent">
      <summary>Checks whether this gamer is allowed to access user content that was created by other gamers.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting">
      <summary>Describes the conditions in which a privilege is available.</summary>
      <param name="Blocked">This privilege is not available for the current gamer profile.</param>
      <param name="Everyone">This privilege is available for the current gamer profile.</param>
      <param name="FriendsOnly">This privilege is only available for friends of the current gamer profile. Use the IsFriend method to check which gamers are friends.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerProfile">
      <summary>Profile settings describing information about a gamer such as the gamer's motto, reputation, and gamer picture. This data is accessible for both locally signed in profiles and remote gamers that you are playing with in a multiplayer session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerProfile.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerPicture">
      <summary>Gets the gamer picture, which will be 64 pixels by 64 pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerScore">
      <summary>Gets the GamerScore of this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerZone">
      <summary>Gets the GamerZone setting.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Motto">
      <summary>Gets the gamer motto string.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Region">
      <summary>Gets the region of this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Reputation">
      <summary>Gets the gamer reputation, as a number of stars ranging 0 to 5.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.TitlesPlayed">
      <summary>Gets the number of titles this gamer has played.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.TotalAchievements">
      <summary>Gets the total number of achievements this gamer has obtained.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher">
      <summary>Implements the Windows-specific portion of a GamerServicesDispatcher class. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Initialize(System.IServiceProvider)">
      <summary>Initializes gamer services functionality for the game. Reference page contains links to related code samples.</summary>
      <param name="serviceProvider">The service provider to be used when locating additional services services. For example, IGraphicsDeviceService.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Update">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.IsInitialized">
      <summary>Determines if Initialize has been called.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.WindowHandle">
      <summary>Gets or sets the handle to the underlying game window.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate">
      <summary>Notifies the game when a Games for Windows - LIVE title update is being installed.</summary>
      <param name="" />
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException">
      <summary>Thrown if the gamer services system cannot be successfully initialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor">
      <summary>Creates an empty instance of GamerServicesNotAvailableException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of GamerServicesNotAvailableException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of GamerServicesNotAvailableException with the specified streaming context.</summary>
      <param name="info">Describes the gamer services being accessed when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of GamerServicesNotAvailableException with the specified error message and the inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerZone">
      <summary>This style of social gaming preferred by this Xbox LIVE member.</summary>
      <param name="Family">Family-friendly game play.</param>
      <param name="Pro">Competitive game play.</param>
      <param name="Recreation">Non-competitive game play.</param>
      <param name="Underground">Alternative approach to game play.</param>
      <param name="Unknown">Unknown.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.Guide">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowKeyboardInput(Microsoft.Xna.Framework.PlayerIndex,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary />
      <param name="player">Index of the player providing input. For Windows-based XNA games, the only valid option is PlayerIndex.One.</param>
      <param name="title">Title of the dialog box.</param>
      <param name="description">Text of the dialog box.</param>
      <param name="defaultText">Text displayed when the dialog box is initially shown.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowMessageBox(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Xna.Framework.GamerServices.MessageBoxIcon,System.AsyncCallback,System.Object)">
      <summary>Begins the process of displaying a message box to which any user on the system can respond.</summary>
      <param name="title">Title of the message box.</param>
      <param name="text">Text that will be displayed by the message box.</param>
      <param name="buttons">Captions for the message box buttons. The maximum number is three.</param>
      <param name="focusButton">Zero-based index specifying which button has the focus.</param>
      <param name="icon">Type of icon displayed in the message box.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="state">User-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowMessageBox(Microsoft.Xna.Framework.PlayerIndex,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Xna.Framework.GamerServices.MessageBoxIcon,System.AsyncCallback,System.Object)">
      <summary>Begins the process of displaying a message box for a particular player.</summary>
      <param name="player">Target player of the message box. On Windows, the only valid option is PlayerIndex.One.</param>
      <param name="title">Title of the message box.</param>
      <param name="text">Text that will be displayed by the message box.</param>
      <param name="buttons">Captions for the message box buttons. The maximum number is three.</param>
      <param name="focusButton">Zero-based index specifying which button has the focus.</param>
      <param name="icon">Type of icon displayed in the message box.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="state">User-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(System.AsyncCallback,System.Object)">
      <summary />
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(Microsoft.Xna.Framework.PlayerIndex,System.AsyncCallback,System.Object)">
      <summary />
      <param name="player">Index of the player being shown the user interface display. On Windows, the only valid option is PlayerIndex.One.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sizeInBytes">Size, in bytes, of the data to write to the storage device.</param>
      <param name="directoryCount">Number of directories to write to the storage device.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(Microsoft.Xna.Framework.PlayerIndex,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary />
      <param name="player">Index of the player being shown the user interface display. On Windows, the only valid option is PlayerIndex.One.</param>
      <param name="sizeInBytes">Size, in bytes, of the data to write to the storage device.</param>
      <param name="directoryCount">Number of directories to write to the storage device.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.DelayNotifications(System.TimeSpan)">
      <summary>Delays system notifications for the specified amount of time.</summary>
      <param name="delay">Time, in seconds, of the delay. Calling this function while notifications are already delayed has no effect. The maximum delay is 120. If the specified duration exceeds the maximum, the maximum value is used.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.EndShowKeyboardInput(System.IAsyncResult)">
      <summary>Ends the display of the keyboard input dialog box.</summary>
      <param name="result">The IAsyncResult returned from BeginShowKeyboardInput.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.EndShowMessageBox(System.IAsyncResult)">
      <summary>Ends the display of a message box.</summary>
      <param name="result">The IAsyncResult returned from BeginShowMessageBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector(System.IAsyncResult)">
      <summary>Ends the display of the storage selector user interface.</summary>
      <param name="result">The IAsyncResult returned from BeginShowStorageDeviceSelector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowComposeMessage(Microsoft.Xna.Framework.PlayerIndex,System.String,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.Gamer})">
      <summary />
      <param name="player">Gamer composing the message.</param>
      <param name="text">Text of the message.</param>
      <param name="recipients">Collection of gamers receiving the message.If this is null, the Select Gamertag user interface is displayed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowFriendRequest(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.GamerServices.Gamer)">
      <summary>Shows the Friend Request user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
      <param name="gamer">Recipient of the request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowFriends(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Shows the Friends user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowGameInvite(Microsoft.Xna.Framework.PlayerIndex,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.Gamer})">
      <summary>Displays the game invitation user interface.</summary>
      <param name="player">Index of the player initiating the invitation.</param>
      <param name="recipients">List of gamers who receive the invitation. If null, the Guide will prompt the player to specify a recipient.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowGamerCard(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.GamerServices.Gamer)">
      <summary>Shows the Gamer Card user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
      <param name="gamer">Owner of the gamer card being requested for display.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowMarketplace(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Displays the marketplace user interface. Reference page contains links to related code samples.</summary>
      <param name="player">Index of the controller for the player making the request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowMessages(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Shows the Messages user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowParty(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Shows the Xbox LIVE Party screen. Reference page contains links to related code samples.</summary>
      <param name="player">The player index for whom to bring up the Xbox LIVE Party screen.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowPartySessions(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Shows the Play with Party Member screen. Reference page contains links to related code samples.</summary>
      <param name="player">The player index for whom the list of game sessions with party members will be shown.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowPlayerReview(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.GamerServices.Gamer)">
      <summary>Shows the Player Review user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
      <param name="gamer">Player being reviewed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowPlayers(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Shows the Players user interface.</summary>
      <param name="player">Index of the player making the request. The profile specified by player must be signed in when calling this function.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.ShowSignIn(System.Int32,System.Boolean)">
      <summary>Shows the user interface a gamer uses for signing into Xbox LIVE.</summary>
      <param name="paneCount">Number of panes displayed at sign in. Each pane accepts a single gamer. On Windows, only a single pane can be displayed. On Xbox 360, valid values are 1, 2, and 4.</param>
      <param name="onlineOnly">Determines the profile types being displayed. true if only online profiles are displayed; false otherwise. If onlineOnly is true, local gamers can sign in as guests of a profile currently signed in.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.IsScreenSaverEnabled">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.IsTrialMode">
      <summary>Determines whether the game is running currently in limited trial mode. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.IsVisible">
      <summary>Determines whether a Guide user interface screen is active.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.NotificationPosition">
      <summary>Determines where notifications appear on the screen.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.SimulateTrialMode">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException">
      <summary>Thrown if an attmept is made to display a component of the Guide user interface when a Guide component is already displayed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor">
      <summary>Initializes an empty instance of GuideAlreadyVisibleException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor(System.String)">
      <summary>Initializes an instance of GuideAlreadyVisibleException with the specified error message.</summary>
      <param name="message">A message describing the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of GuideAlreadyVisibleException with the specified streaming context.</summary>
      <param name="info">Describes the displayed Guide component when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of GuideAlreadyVisibleException with the specified error message and related inner exception.</summary>
      <param name="message">A message describing the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon">
      <summary>Defines the different icons for a message box.</summary>
      <param name="Alert">Displays the Alert icon.</param>
      <param name="Error">Displays the Error icon.</param>
      <param name="None">No icon is displayed.</param>
      <param name="Warning">Displays the Warning icon.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.NotificationPosition">
      <summary />
      <param name="BottomCenter">Positions the message box at the bottom of the screen and centered.</param>
      <param name="BottomLeft">Positions the message box at the bottom-left of the screen.</param>
      <param name="BottomRight">Positions the message box at the bottom-right of the screen.</param>
      <param name="Center">Positions the message box at the center of the screen.</param>
      <param name="CenterLeft">Positions the message box at the center of the screen and left-aligned.</param>
      <param name="CenterRight">Positions the message box at the center of the screen and right-aligned.</param>
      <param name="TopCenter">Positions the message box at the top of the screen and centered.</param>
      <param name="TopLeft">Positions the message box at the top-left of the screen.</param>
      <param name="TopRight">Positions the message box at the top-right of the screen.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.RacingCameraAngle">
      <summary>Indicates which camera angle this gamer prefers to use in racing games.</summary>
      <param name="Back">Traditional third-person camera view from behind the car.</param>
      <param name="Front">Camera view from in front of the car. The car itself is not visible.</param>
      <param name="Inside">Camera view from inside the car, looking through the windscreen.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.#ctor(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Creates a new instance of SignedInEventArgs.</summary>
      <param name="gamer">The gamer that just signed in.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.Gamer">
      <summary>Gets the gamer that just signed in.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInGamer">
      <summary>Represents a gamer (a profile that has an associated gamertag) on the local system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInGamer.GetFriends">
      <summary>Reads the friends list of this local gamer. This includes both the gamertags of the friends and their current presence information.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsFriend(Microsoft.Xna.Framework.GamerServices.Gamer)">
      <summary>Queries whether the specified gamer is a friend of this local gamer.</summary>
      <param name="gamer">The gamer to query.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.Avatar">
      <summary>Description data for the avatar that represents the gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.GameDefaults">
      <summary>Describes a gamer's preferred settings.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsGuest">
      <summary>Determines whether the gamer is the guest of an Xbox LIVE–enabled profile.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsSignedInToLive">
      <summary>Determines whether the gamer has an Xbox LIVE–enabled profile.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.PartySize">
      <summary>Gets the current party size. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.PlayerIndex">
      <summary>Gets the index of the gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.Presence">
      <summary>Gets an object that may be used to set the rich presence state for this gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.Privileges">
      <summary>Describes what operations a gamer is allowed to perform.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.SignedInGamer.AvatarChanged">
      <summary>Occurs when a gamer's avatar changes.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedIn">
      <summary>Occurs when a new gamer signs into the local system.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut">
      <summary>Occurs when a gamer signs out on the local system.</summary>
      <param name="" />
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection">
      <summary>Represents a collection of gamers on the local system.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.Item(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets a specific local gamer based on that player's PlayerIndex on the local system.</summary>
      <param name="index">The PlayerIndex of the local gamer to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.#ctor(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Creates a new instance of SignedOutEventArgs.</summary>
      <param name="gamer">The gamer that just signed out.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.Gamer">
      <summary>Gets the gamer that just signed out.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight">
      <summary>Provides methods for manipulating the directional lights used by the BasicEffect class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.DiffuseColor">
      <summary>Gets or sets the diffuse color of this light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.Direction">
      <summary>Gets or sets light direction.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.Enabled">
      <summary>Enables this light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.SpecularColor">
      <summary>Gets or sets the specular color of the light.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BasicEffect">
      <summary>Represents shader model 1.1 Effect that has optional support for vertex colors, texturing, and lighting. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.BasicEffect)">
      <summary>Initializes a new instance of the BasicEffect class.</summary>
      <param name="device">The graphics device that will create the effect.</param>
      <param name="clone">The effect to clone.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of the BasicEffect class.</summary>
      <param name="device">The graphics device that will create the effect.</param>
      <param name="effectPool">Specifies a pool of resources to share between effects.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.Clone(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a clone of an effect.</summary>
      <param name="device">The cloned effect.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.EnableDefaultLighting">
      <summary>Enables default lighting for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Alpha">
      <summary>Gets or sets the alpha this effect material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientLightColor">
      <summary>Gets or sets the ambient light color of this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color of this effect material. Value takes 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight0">
      <summary>Gets the first directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight1">
      <summary>Gets the second directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight2">
      <summary>Gets the third directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.EmissiveColor">
      <summary>Gets or sets the emissive color of the effect material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogColor">
      <summary>Gets or sets the fog color for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnabled">
      <summary>Enables fog for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnd">
      <summary>Gets or sets the ending distance of fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogStart">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.LightingEnabled">
      <summary>Enables lighting for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.PreferPerPixelLighting">
      <summary>Gets or sets a value indicating that per-pixel lighting should be used if it is available for the current adapter. Per-pixel lighting is available if a graphics adapter supports Pixel Shader Model 2.0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularColor">
      <summary>Gets or sets the specular color of this effect material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularPower">
      <summary>Gets or sets the specular power of this effect material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Texture">
      <summary>Gets or sets a texture to be applied by this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.TextureEnabled">
      <summary>Enables textures for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.VertexColorEnabled">
      <summary>Enables use vertex colors for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
      <summary>Defines color blending factors.</summary>
      <param name="Zero">Each component of the color is multiplied by (0, 0, 0, 0).</param>
      <param name="One">Each component of the color is multiplied by (1, 1, 1, 1).</param>
      <param name="SourceColor">Each component of the color is multiplied by the source color. This can be represented as (Rs, Gs, Bs, As), where R, G, B, and A respectively stand for the red, green, blue, and alpha source values.</param>
      <param name="InverseSourceColor">Each component of the color is multiplied by the inverse of the source color. This can be represented as (1 − Rs, 1 − Gs, 1 − Bs, 1 − As) where R, G, B, and A respectively stand for the red, green, blue, and alpha destination values.</param>
      <param name="SourceAlpha">Each component of the color is multiplied by the alpha value of the source. This can be represented as (As, As, As, As), where As is the alpha source value.</param>
      <param name="InverseSourceAlpha">Each component of the color is multiplied by the inverse of the alpha value of the source. This can be represented as (1 − As, 1 − As, 1 − As, 1 − As), where As is the alpha destination value.</param>
      <param name="DestinationAlpha">Each component of the color is multiplied by the alpha value of the destination. This can be represented as (Ad, Ad, Ad, Ad), where Ad is the destination alpha value.</param>
      <param name="InverseDestinationAlpha">Each component of the color is multiplied by the inverse of the alpha value of the destination. This can be represented as (1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad), where Ad is the alpha destination value.</param>
      <param name="DestinationColor">Each component color is multiplied by the destination color. This can be represented as (Rd, Gd, Bd, Ad), where R, G, B, and A respectively stand for red, green, blue, and alpha destination values.</param>
      <param name="InverseDestinationColor">Each component of the color is multiplied by the inverse of the destination color. This can be represented as (1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad), where Rd, Gd, Bd, and Ad respectively stand for the red, green, blue, and alpha destination values.</param>
      <param name="SourceAlphaSaturation">Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. This can be represented as (f, f, f, 1), where f = min(A, 1 − Ad).</param>
      <param name="BothInverseSourceAlpha">(Win32 only) Each component of the source color is multiplied by the inverse of the alpha of the source color, and each component of the destination color is multiplied by the alpha of the source color. This can be represented as (1 − As, 1 − As, 1 − As, 1 − As), with a destination blend factor of (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only for the SourceBlend render state.</param>
      <param name="BlendFactor">Each component of the color is multiplied by a constant set in BlendFactor.</param>
      <param name="InverseBlendFactor">Each component of the color is multiplied by the inverse of a constant set in BlendFactor. This blend mode is supported only if SupportsBlendFactor is true in the SourceBlendCapabilities or DestinationBlendCapabilities properties.</param>
      <param name="BothSourceAlpha">This mode is obsolete. The same effect can be achieved by setting the source and destination blend factors to SourceAlpha and InverseSourceAlpha in separate calls.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
      <summary>Defines how to combine a source color with the destination color already on the render target for color blending.</summary>
      <param name="Add">The result is the destination added to the source. Result = (Source Color * Source Blend) + (Destination Color * Destination Blend)</param>
      <param name="Max">The result is the maximum of the source and destination. Result = max( (Source Color * Source Blend), (Destination Color * Destination Blend) )</param>
      <param name="Min">The result is the minimum of the source and destination. Result = min( (Source Color * Source Blend), (Destination Color * Destination Blend) )</param>
      <param name="ReverseSubtract">The result is the source subtracted from the destination. Result = (Destination Color * Destination Blend) − (Source Color * Source Blend)</param>
      <param name="Subtract">The result is the destination subtracted from the source. Result = (Source Color * Source Blend) − (Destination Color * Destination Blend)</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BufferUsage">
      <summary>Specifies special usage of the buffer contents.</summary>
      <param name="None">None</param>
      <param name="Points">Indicates that the vertex or index buffer will be used for drawing point sprites. The buffer is loaded in system memory if software vertex processing is needed to emulate point sprites.</param>
      <param name="WriteOnly">Indicates that the application only writes to the vertex buffer. If specified, the driver chooses the best memory location for efficient writing and rendering. Attempts to read from a write-only vertex buffer fail.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
      <summary>Specifies the buffer to use when calling Clear.</summary>
      <param name="DepthBuffer">A depth buffer.</param>
      <param name="Stencil">A stencil buffer.</param>
      <param name="Target">A render target.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClipPlane">
      <summary>Represents the device clipping plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlane.ToString">
      <summary>Gets a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlane.IsEnabled">
      <summary>Indicates whether the clipping plane is enabled.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlane.Plane">
      <summary>Gets or sets the coefficients of a user-defined clipping plane for the device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection">
      <summary>Manipulates a collection of ClipPlane objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.DisableAll">
      <summary>Disables all clipping planes on the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.EnableAll">
      <summary>Enables all clipping planes that have been set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.Item(System.Int32)">
      <summary>Gets a specific ClipPlane object using an index value.</summary>
      <param name="index">The index of the ClipPlane object to return.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Color">
      <summary>Represents a color using Red, Green, Blue, and Alpha values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A Vector3 containing the Red, Green, and Blue values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A Vector4 containing the Red, Green, Blue, and Alpha values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Graphics.Color,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="rgb">A Color specifying the red, green, and blue components of a color.</param>
      <param name="a">The alpha component of a color, between 0 and 255.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Graphics.Color,System.Single)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="rgb">A Color specifying the red, green, and blue components of a color.</param>
      <param name="a">The alpha component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 255.</param>
      <param name="g">The green component of a color, between 0 and 255.</param>
      <param name="b">The blue component of a color, between 0 and 255.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 255.</param>
      <param name="g">The green component of a color, between 0 and 255.</param>
      <param name="b">The blue component of a color, between 0 and 255.</param>
      <param name="a">The alpha component of a color, between 0 and 255.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
      <param name="a">The alpha component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The Color to compare with the current Color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current Color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Lerp(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color,System.Single)">
      <summary>Linearly interpolates between two colors.</summary>
      <param name="value1">Source Color.</param>
      <param name="value2">Source Color.</param>
      <param name="amount">A value between 0 and 1.0 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns the packed value of the current color as a Vector4.</summary>
      <param name="vector">The packed value of the current color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Equality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Inequality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToString">
      <summary>Gets a string representation of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToVector3">
      <summary>Returns the current color as a Vector3.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToVector4">
      <summary>Returns the current color as a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.A">
      <summary>Gets or sets the alpha component value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AliceBlue">
      <summary>Gets a system-defined color with the value R:240 G:248 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AntiqueWhite">
      <summary>Gets a system-defined color with the value R:250 G:235 B:215 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aqua">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aquamarine">
      <summary>Gets a system-defined color with the value R:127 G:255 B:212 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Azure">
      <summary>Gets a system-defined color with the value R:240 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.B">
      <summary>Gets or sets the blue component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Beige">
      <summary>Gets a system-defined color with the value R:245 G:245 B:220 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Bisque">
      <summary>Gets a system-defined color with the value R:255 G:228 B:196 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Black">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlanchedAlmond">
      <summary>Gets a system-defined color with the value R:255 G:235 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Blue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlueViolet">
      <summary>Gets a system-defined color with the value R:138 G:43 B:226 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Brown">
      <summary>Gets a system-defined color with the value R:165 G:42 B:42 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BurlyWood">
      <summary>Gets a system-defined color with the value R:222 G:184 B:135 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CadetBlue">
      <summary>Gets a system-defined color with the value R:95 G:158 B:160 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chartreuse">
      <summary>Gets a system-defined color with the value R:127 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chocolate">
      <summary>Gets a system-defined color with the value R:210 G:105 B:30 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Coral">
      <summary>Gets a system-defined color with the value R:255 G:127 B:80 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CornflowerBlue">
      <summary>Gets a system-defined color with the value R:100 G:149 B:237 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cornsilk">
      <summary>Gets a system-defined color with the value R:255 G:248 B:220 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Crimson">
      <summary>Gets a system-defined color with the value R:220 G:20 B:60 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cyan">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkCyan">
      <summary>Gets a system-defined color with the value R:0 G:139 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGoldenrod">
      <summary>Gets a system-defined color with the value R:184 G:134 B:11 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGray">
      <summary>Gets a system-defined color with the value R:169 G:169 B:169 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGreen">
      <summary>Gets a system-defined color with the value R:0 G:100 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkKhaki">
      <summary>Gets a system-defined color with the value R:189 G:183 B:107 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkMagenta">
      <summary>Gets a system-defined color with the value R:139 G:0 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOliveGreen">
      <summary>Gets a system-defined color with the value R:85 G:107 B:47 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrange">
      <summary>Gets a system-defined color with the value R:255 G:140 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrchid">
      <summary>Gets a system-defined color with the value R:153 G:50 B:204 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkRed">
      <summary>Gets a system-defined color with the value R:139 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSalmon">
      <summary>Gets a system-defined color with the value R:233 G:150 B:122 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSeaGreen">
      <summary>Gets a system-defined color with the value R:143 G:188 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateBlue">
      <summary>Gets a system-defined color with the value R:72 G:61 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateGray">
      <summary>Gets a system-defined color with the value R:47 G:79 B:79 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkTurquoise">
      <summary>Gets a system-defined color with the value R:0 G:206 B:209 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkViolet">
      <summary>Gets a system-defined color with the value R:148 G:0 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepPink">
      <summary>Gets a system-defined color with the value R:255 G:20 B:147 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepSkyBlue">
      <summary>Gets a system-defined color with the value R:0 G:191 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DimGray">
      <summary>Gets a system-defined color with the value R:105 G:105 B:105 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DodgerBlue">
      <summary>Gets a system-defined color with the value R:30 G:144 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Firebrick">
      <summary>Gets a system-defined color with the value R:178 G:34 B:34 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.FloralWhite">
      <summary>Gets a system-defined color with the value R:255 G:250 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.ForestGreen">
      <summary>Gets a system-defined color with the value R:34 G:139 B:34 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Fuchsia">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.G">
      <summary>Gets or sets the green component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gainsboro">
      <summary>Gets a system-defined color with the value R:220 G:220 B:220 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GhostWhite">
      <summary>Gets a system-defined color with the value R:248 G:248 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gold">
      <summary>Gets a system-defined color with the value R:255 G:215 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Goldenrod">
      <summary>Gets a system-defined color with the value R:218 G:165 B:32 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gray">
      <summary>Gets a system-defined color with the value R:128 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Green">
      <summary>Gets a system-defined color with the value R:0 G:128 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GreenYellow">
      <summary>Gets a system-defined color with the value R:173 G:255 B:47 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Honeydew">
      <summary>Gets a system-defined color with the value R:240 G:255 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.HotPink">
      <summary>Gets a system-defined color with the value R:255 G:105 B:180 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.IndianRed">
      <summary>Gets a system-defined color with the value R:205 G:92 B:92 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Indigo">
      <summary>Gets a system-defined color with the value R:75 G:0 B:130 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Ivory">
      <summary>Gets a system-defined color with the value R:255 G:255 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Khaki">
      <summary>Gets a system-defined color with the value R:240 G:230 B:140 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lavender">
      <summary>Gets a system-defined color with the value R:230 G:230 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LavenderBlush">
      <summary>Gets a system-defined color with the value R:255 G:240 B:245 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LawnGreen">
      <summary>Gets a system-defined color with the value R:124 G:252 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LemonChiffon">
      <summary>Gets a system-defined color with the value R:255 G:250 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightBlue">
      <summary>Gets a system-defined color with the value R:173 G:216 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCoral">
      <summary>Gets a system-defined color with the value R:240 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCyan">
      <summary>Gets a system-defined color with the value R:224 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGoldenrodYellow">
      <summary>Gets a system-defined color with the value R:250 G:250 B:210 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGray">
      <summary>Gets a system-defined color with the value R:211 G:211 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGreen">
      <summary>Gets a system-defined color with the value R:144 G:238 B:144 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightPink">
      <summary>Gets a system-defined color with the value R:255 G:182 B:193 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSalmon">
      <summary>Gets a system-defined color with the value R:255 G:160 B:122 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSeaGreen">
      <summary>Gets a system-defined color with the value R:32 G:178 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSlateGray">
      <summary>Gets a system-defined color with the value R:119 G:136 B:153 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSteelBlue">
      <summary>Gets a system-defined color with the value R:176 G:196 B:222 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightYellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:224 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lime">
      <summary>Gets a system-defined color with the value R:0 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LimeGreen">
      <summary>Gets a system-defined color with the value R:50 G:205 B:50 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Linen">
      <summary>Gets a system-defined color with the value R:250 G:240 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Magenta">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Maroon">
      <summary>Gets a system-defined color with the value R:128 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumAquamarine">
      <summary>Gets a system-defined color with the value R:102 G:205 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumOrchid">
      <summary>Gets a system-defined color with the value R:186 G:85 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumPurple">
      <summary>Gets a system-defined color with the value R:147 G:112 B:219 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSeaGreen">
      <summary>Gets a system-defined color with the value R:60 G:179 B:113 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSlateBlue">
      <summary>Gets a system-defined color with the value R:123 G:104 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:250 B:154 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumTurquoise">
      <summary>Gets a system-defined color with the value R:72 G:209 B:204 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumVioletRed">
      <summary>Gets a system-defined color with the value R:199 G:21 B:133 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MidnightBlue">
      <summary>Gets a system-defined color with the value R:25 G:25 B:112 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MintCream">
      <summary>Gets a system-defined color with the value R:245 G:255 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MistyRose">
      <summary>Gets a system-defined color with the value R:255 G:228 B:225 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Moccasin">
      <summary>Gets a system-defined color with the value R:255 G:228 B:181 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.NavajoWhite">
      <summary>Gets a system-defined color with the value R:255 G:222 B:173 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Navy">
      <summary>Gets a system-defined color R:0 G:0 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OldLace">
      <summary>Gets a system-defined color with the value R:253 G:245 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Olive">
      <summary>Gets a system-defined color with the value R:128 G:128 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OliveDrab">
      <summary>Gets a system-defined color with the value R:107 G:142 B:35 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orange">
      <summary>Gets a system-defined color with the value R:255 G:165 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OrangeRed">
      <summary>Gets a system-defined color with the value R:255 G:69 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orchid">
      <summary>Gets a system-defined color with the value R:218 G:112 B:214 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PackedValue">
      <summary>Gets the current color as a packed value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGoldenrod">
      <summary>Gets a system-defined color with the value R:238 G:232 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGreen">
      <summary>Gets a system-defined color with the value R:152 G:251 B:152 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleTurquoise">
      <summary>Gets a system-defined color with the value R:175 G:238 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleVioletRed">
      <summary>Gets a system-defined color with the value R:219 G:112 B:147 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PapayaWhip">
      <summary>Gets a system-defined color with the value R:255 G:239 B:213 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PeachPuff">
      <summary>Gets a system-defined color with the value R:255 G:218 B:185 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Peru">
      <summary>Gets a system-defined color with the value R:205 G:133 B:63 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Pink">
      <summary>Gets a system-defined color with the value R:255 G:192 B:203 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Plum">
      <summary>Gets a system-defined color with the value R:221 G:160 B:221 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PowderBlue">
      <summary>Gets a system-defined color with the value R:176 G:224 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Purple">
      <summary>Gets a system-defined color with the value R:128 G:0 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.R">
      <summary>Gets or sets the red component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Red">
      <summary>Gets a system-defined color with the value R:255 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RosyBrown">
      <summary>Gets a system-defined color with the value R:188 G:143 B:143 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RoyalBlue">
      <summary>Gets a system-defined color with the value R:65 G:105 B:225 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SaddleBrown">
      <summary>Gets a system-defined color with the value R:139 G:69 B:19 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Salmon">
      <summary>Gets a system-defined color with the value R:250 G:128 B:114 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SandyBrown">
      <summary>Gets a system-defined color with the value R:244 G:164 B:96 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaGreen">
      <summary>Gets a system-defined color with the value R:46 G:139 B:87 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaShell">
      <summary>Gets a system-defined color with the value R:255 G:245 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Sienna">
      <summary>Gets a system-defined color with the value R:160 G:82 B:45 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Silver">
      <summary>Gets a system-defined color with the value R:192 G:192 B:192 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:235 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateBlue">
      <summary>Gets a system-defined color with the value R:106 G:90 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateGray">
      <summary>Gets a system-defined color with the value R:112 G:128 B:144 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Snow">
      <summary>Gets a system-defined color with the value R:255 G:250 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:255 B:127 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SteelBlue">
      <summary>Gets a system-defined color with the value R:70 G:130 B:180 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tan">
      <summary>Gets a system-defined color with the value R:210 G:180 B:140 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Teal">
      <summary>Gets a system-defined color with the value R:0 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Thistle">
      <summary>Gets a system-defined color with the value R:216 G:191 B:216 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tomato">
      <summary>Gets a system-defined color with the value R:255 G:99 B:71 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentBlack">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentWhite">
      <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Turquoise">
      <summary>Gets a system-defined color with the value R:64 G:224 B:208 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Violet">
      <summary>Gets a system-defined color with the value R:238 G:130 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Wheat">
      <summary>Gets a system-defined color with the value R:245 G:222 B:179 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.White">
      <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.WhiteSmoke">
      <summary>Gets a system-defined color with the value R:245 G:245 B:245 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Yellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.YellowGreen">
      <summary>Gets a system-defined color with the value R:154 G:205 B:50 A:255.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels">
      <summary>Defines the color channels that can be chosen for a per-channel write to a render target color buffer.</summary>
      <param name="All">All buffer channels.</param>
      <param name="Alpha">Alpha channel of a buffer.</param>
      <param name="Blue">Blue channel of a buffer.</param>
      <param name="Green">Green channel of a buffer.</param>
      <param name="None">No channel selected.</param>
      <param name="Red">Red channel of a buffer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
      <summary>Defines comparison functions that can be chosen for alpha, stencil, or depth-buffer tests.</summary>
      <param name="Always">Always pass the test.</param>
      <param name="Equal">Accept the new pixel if its value is equal to the value of the current pixel.</param>
      <param name="Greater">Accept the new pixel if its value is greater than the value of the current pixel.</param>
      <param name="GreaterEqual">Accept the new pixel if its value is greater than or equal to the value of the current pixel.</param>
      <param name="Less">Accept the new pixel if its value is less than the value of the current pixel.</param>
      <param name="LessEqual">Accept the new pixel if its value is less than or equal to the value of the current pixel.</param>
      <param name="Never">Always fail the test.</param>
      <param name="NotEqual">Accept the new pixel if its value does not equal the value of the current pixel.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilationFailedException">
      <summary>The exception that is thrown if the compilation of an effect fails.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the CompilationFailedException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompiledEffect">
      <summary>Represents a compiled Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.#ctor(System.Byte[],System.String)">
      <summary>Creates a new instance of the CompiledEffect class.</summary>
      <param name="compiledEffectCode">The compiled effect code.</param>
      <param name="errors">A string to receive compilation errors, if any.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.GetEffectCode">
      <summary>Gets the compiled byte code for this shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledEffect.ErrorsAndWarnings">
      <summary>Gets any errors and warnings generated by compiling the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledEffect.Success">
      <summary>Indicates whether the effect was compiled successfully.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompiledShader">
      <summary>Represents a compiled shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the CompiledShader class.</summary>
      <param name="compiledShaderCode">The compiled shader to encapsulate.</param>
      <param name="errors">String containing at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetInputSemantics">
      <summary>Gets the semantics for the shader inputs. Use this method to determine the input vertex format.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetOutputSemantics">
      <summary>Gets the semantics for all shader output elements.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetSamplers">
      <summary>Gets the sampler names referenced in a shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetShaderCode">
      <summary>Gets the compiled shader code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.ToString">
      <summary>Returns a String that represents the current CompiledShader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ErrorsAndWarnings">
      <summary>Gets the first compile error message that occurred.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ShaderSize">
      <summary>Gets the size of the shader byte code, in bytes.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ShaderVersion">
      <summary>Gets the shader version of the compiled shader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.Success">
      <summary>Returns a value indicating whether the shader compilation was successful.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler">
      <summary>The abstract base class for custom compiler include file handlers.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] This parameter marshals as an unsigned byte.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Open(Microsoft.Xna.Framework.Graphics.CompilerIncludeHandlerType,System.String)">
      <summary>Returns a Stream containing include data from a specified file.</summary>
      <param name="includeType">A CompilerIncludeHandlerType indicating whether the file is a local or system resource.</param>
      <param name="filename">The file name of the file to open.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandlerType">
      <summary>Identifies an include file as a local or system resource.</summary>
      <param name="Local">A local resource.</param>
      <param name="System">A system resource.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerMacro">
      <summary>Represents a compiler macro.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerMacro.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompilerMacro.Definition">
      <summary>Gets or sets the macro definition.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompilerMacro.Name">
      <summary>Gets or sets the macro name.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerOptions">
      <summary>Defines optimization options that may be chosen for shader and effect code compilation.</summary>
      <param name="AvoidFlowControl">Hints to the compiler to avoid using flow-control instructions.</param>
      <param name="Debug">Inserts debug file name, line numbers, and type and symbol information during shader compile.</param>
      <param name="ForcePixelShaderSoftwareNoOptimizations">Forces the compiler to compile against the next highest available software target for pixel shaders. This flag also turns optimizations off and debugging on.</param>
      <param name="ForceVertexShaderSoftwareNoOptimizations">Forces the compiler to compile against the next highest available software target for vertex shaders. This flag also turns optimizations off and debugging on.</param>
      <param name="None">No options specified.</param>
      <param name="NoPreShader">Disables preshaders. The compiler will not pull out static expressions for evaluation on the host CPU. Additionally, the compiler will not loft any expressions when compiling stand-alone functions.</param>
      <param name="NotCloneable">Indicates the effect will be non-cloneable and will not contain any shader binary data. Setting this flag reduces effect memory usage by about 50 percent because it eliminates the need for the effect system to keep a copy of the shaders in memory.</param>
      <param name="PackMatrixColumnMajor">Unless explicitly specified, matrices will be packed in column major order (each vector will be in a single column) when passed to and from the shader. This is generally more efficient because it allows vector-matrix multiplication to be performed using a series of dot products.</param>
      <param name="PackMatrixRowMajor">Unless explicitly specified, matrices will be packed in row major order (each vector will be in a single row) when passed to or from the shader.</param>
      <param name="PartialPrecision">Forces all computations in the resulting shader to occur at partial precision. This may result in faster evaluation of shaders on some hardware.</param>
      <param name="PreferFlowControl">Hints to the compiler to prefer using flow-control instructions.</param>
      <param name="SkipOptimization">Instructs the compiler to skip optimization steps during code generation. Unless you are trying to isolate a problem in your code and you suspect the compiler, using this option is not recommended.</param>
      <param name="SkipValidation">Do not validate the generated code against known capabilities and constraints. This option is recommended only when compiling shaders that are known to work (that is, shaders that have compiled before without this option). Shaders are always validated by the runtime before they are set to the device.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
      <summary>Defines the faces of a cube map in the TextureCube class type.</summary>
      <param name="NegativeX">Negative x-face of the cube map.</param>
      <param name="NegativeY">Negative y-face of the cube map.</param>
      <param name="NegativeZ">Negative z-face of the cube map.</param>
      <param name="PositiveX">Positive x-face of the cube map.</param>
      <param name="PositiveY">Positive y-face of the cube map.</param>
      <param name="PositiveZ">Positive z-face of the cube map.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
      <summary>Defines winding orders that may be used to identify back faces for culling.</summary>
      <param name="CullClockwiseFace">Cull back faces with clockwise vertices.</param>
      <param name="CullCounterClockwiseFace">Cull back faces with counterclockwise vertices.</param>
      <param name="None">Do not cull back faces.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
      <summary>Defines the format of data in a depth buffer. Reference page contains links to related code samples.</summary>
      <param name="Depth15Stencil1">A 16-bit depth-buffer bit depth in which 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</param>
      <param name="Depth16">A 16-bit depth-buffer bit depth.</param>
      <param name="Depth24">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel.</param>
      <param name="Depth24Stencil4">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</param>
      <param name="Depth24Stencil8">A non-lockable format that contains 24 bits of depth (in a 24-bit floating-point format − 20E4) and 8 bits of stencil.</param>
      <param name="Depth24Stencil8Single">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</param>
      <param name="Depth32">a 32-bit depth-buffer bit depth.</param>
      <param name="Unknown">Format is unknown.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer">
      <summary>Queries and prepares depth stencil buffers. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Initializes a new instance of the DepthStencilBuffer class.  Reference page contains code sample.</summary>
      <param name="graphicsDevice">The graphics device that will display the depth stencil buffer.</param>
      <param name="width">Width, in pixels, of the depth stencil buffer. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the depth stencil buffer. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="format">The format of the data to be placed in this depth stencil buffer. Use CheckDepthStencilMatch to determine if a particular depth format is usable in a render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32)">
      <summary>Initializes a new instance of the DepthStencilBuffer class, specifying the multisample type and quality.  Reference page contains code sample.</summary>
      <param name="graphicsDevice">The graphics device that will display the depth stencil buffer.</param>
      <param name="width">Width, in pixels, of the depth stencil buffer. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the depth stencil buffer. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="format">The format of the data to be placed in this depth stencil buffer. Use CheckDepthStencilMatch to determine if a particular depth format is usable in a render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply. You can use graphicsDevice.PresentationParameters.MultiSampleType to get the MultiSampleType of the back buffer.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type. You can use graphicsDevice.PresentationParameters.MultiSampleQuality to get the multisample quality of the back buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs when content is about to be lost on a GraphicsDevice.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Format">
      <summary>Gets the data format of this depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.GraphicsDevice">
      <summary>Gets the graphics device associated with this depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Height">
      <summary>Gets the height, in pixels, of the surface.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.IsContentLost">
      <summary>Determines if the buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.MultiSampleQuality">
      <summary>Gets the number of quality stops available for a given multisample type.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.MultiSampleType">
      <summary>Gets the levels of full-scene multisampling that the device can apply.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Name">
      <summary>Gets the name of this depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Tag">
      <summary>Gets the resource tag for this depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Width">
      <summary>Returns the width, in pixels, of this DepthStencilBuffer.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.ContentLost">
      <summary>Occurs when resources are lost (for example, when the current device is lost).</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceLostException">
      <summary>The exception that is thrown when the device has been lost, but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotResetException">
      <summary>The exception that is thrown when the device has been lost, but can be reset at this time.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException">
      <summary>The exception that is thrown when the graphics device does not support the requested capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor">
      <summary>Initializes a new instance of the DeviceNotSupportedException class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the DeviceNotSupportedException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the DeviceNotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException">
      <summary>The error that is thrown when the device is still drawing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceType">
      <summary>Specifies the type of device driver.</summary>
      <param name="Hardware">A hardware device. Using the flag to get direct access to the video hardware.</param>
      <param name="NullReference">A null device. This is a reference device that can do everything except render a scene.</param>
      <param name="Reference">A reference device. Use this flag to create a software emulated device.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayMode">
      <summary>Describes the display mode. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current DisplayMode.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.AspectRatio">
      <summary>Gets the aspect ratio used by the graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Format">
      <summary>Gets a value indicating the surface format of the display mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Height">
      <summary>Gets a value indicating the screen height, in pixels. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.RefreshRate">
      <summary>Gets a value indicating the refresh rate. The value of 0 indicates an adapter default.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.TitleSafeArea">
      <summary>Returns the title safe area of the display.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Width">
      <summary>Gets a value indicating the screen width, in pixels. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayModeCollection">
      <summary>Manipulates a collection of DisplayMode structures.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current DisplayModeCollection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the DisplayModeCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Item(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Retrieves the DisplayMode structure with the specified format.</summary>
      <param name="format">The format of the DisplayMode to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException">
      <summary>The exception that is thrown when an internal driver error occurs. Applications should destroy and recreate the device when receiving this error.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,Microsoft.Xna.Framework.Graphics.IndexElementSize)">
      <summary>Initializes a new instance of DynamicIndexBuffer with the specified parameters.</summary>
      <param name="graphicsDevice">The associated graphics device of the index buffer.</param>
      <param name="sizeInBytes">The size, in bytes, of the index buffer.</param>
      <param name="usage">A set of options identifying the behaviors of this index buffer resource.</param>
      <param name="elementSize">The size, in bits, of an index element.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of DynamicIndexBuffer with the specified parameters.</summary>
      <param name="graphicsDevice">The associated graphics device of the index buffer.</param>
      <param name="indexType">Type to use for index values.</param>
      <param name="elementCount">Number of indices in the buffer.</param>
      <param name="usage">A set of options identifying the behaviors of this index buffer resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs after content is lost from a graphics device failure, allowing an application to re-create all resources.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Discard is not valid on Xbox 360, but dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the index buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="offsetInBytes">Number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Discard is not valid on Xbox 360, but dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the index buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.IsContentLost">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.ContentLost">
      <summary>Occurs when resources are lost due to a lost device event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of DynamicVertexBuffer with the specified parameters.</summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="sizeInBytes">The number of bytes to allocate for this vertex buffer resource.</param>
      <param name="usage">A set of options identifying the behaviors of this vertex buffer resource. It is good practice to match the usage parameter with the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of DynamicVertexBuffer with the specified parameters.</summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="vertexType">The type of vertices in this vertex buffer.</param>
      <param name="elementCount">The number of elements in this vertex buffer.</param>
      <param name="usage">A set of options identifying the behaviors of this vertex buffer resource. It is good practice to match the usage parameter with the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs after content is lost from a graphics device failure, allowing an application to re-create all resources.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the vertex buffer.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Discard is not valid on Xbox 360, but dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the vertex buffer.</summary>
      <param name="offsetInBytes">Number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="vertexStride">The size, in bytes, of the elements in the vertex buffer.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Discard is not valid on Xbox 360, but dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the vertex buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.IsContentLost">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.ContentLost">
      <summary>Occurs when resources are lost due to a lost device event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Effect">
      <summary>Used to set and query effects and choose techniques. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Initializes a new instance of this class, specifying the graphics device to associate with this effect and the effect to clone. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="cloneSource">The effect to clone.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[],Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class from a compiled effect, specifying the compiled effect as a byte array. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCode">Byte array containing the compiled byte code.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class from a compiled effect, specifying the compiled effect as a stream. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFileStream">Stream containing the compiled byte code.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class from a compiled effect, specifying the compiled effect by file name. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFile">A file containing a compiled byte code.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class from a compiled effect, specifying the compiled effect as a stream, as well as the number of bytes in the stream. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFileStream">Stream containing the compiled byte code.</param>
      <param name="numberBytes">The number of bytes to read from the file.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Begin">
      <summary>Begins application of the active technique.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Begin(Microsoft.Xna.Framework.Graphics.SaveStateMode)">
      <summary>Begins application of the active technique, specifying options for saving state.</summary>
      <param name="saveStateMode">Options for saving the state prior to application of the technique.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a clone of an effect.</summary>
      <param name="device">The device associated with the effect.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CommitChanges">
      <summary>Propagates the state change that occurs inside of an active pass to the device before rendering.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from a stream containing the effect source code.</summary>
      <param name="effectFileStream">File stream containing the effect source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from a file containing the effect source code.</summary>
      <param name="effectFile">The name of the file containing the effect source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from a stream containing the effect source code, specifying the number of bytes in the stream.</summary>
      <param name="effectFileStream">File stream containing the effect source code.</param>
      <param name="numberBytes">The number of bytes in effectFileStream.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from a string containing the effect source code.</summary>
      <param name="effectFileSource">String containing the effect source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Disassemble(System.Boolean)">
      <summary>Disassembles this effect.</summary>
      <param name="enableColorCode">[MarshalAsAttribute(U1)] true to enable color coding to make the disassembly easier to read.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Disassemble(Microsoft.Xna.Framework.Graphics.Effect,System.Boolean)">
      <summary>Disassembles an effect.</summary>
      <param name="effect">The effect to disassemble.</param>
      <param name="enableColorCode">[MarshalAsAttribute(U1)] true to enable color coding to make the disassembly easier to read.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the Effect and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.End">
      <summary>Ends the application of the current technique. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises an Lost event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass into the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises an Reset event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass into the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Creator">
      <summary>Gets the name of the effect creator.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.CurrentTechnique">
      <summary>Gets or sets the active technique.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.EffectPool">
      <summary>Gets an EffectPool representing the pool of shared parameters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Functions">
      <summary>Gets a collection of functions that can render the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.GraphicsDevice">
      <summary>Gets the graphics device that created the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Parameters">
      <summary>Gets a collection of parameters used for this effect. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Techniques">
      <summary>Gets a collection of techniques that are defined for this effect.  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Reset">
      <summary>Occurs after the device is reset.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotation">
      <summary>Represents an annotation to an EffectParameter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueBoolean">
      <summary>Gets the value of the EffectAnnotation as a Boolean.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueInt32">
      <summary>Gets the value of the EffectAnnotation as a Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueMatrix">
      <summary>Gets the value of the EffectAnnotation as a Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueSingle">
      <summary>Gets the value of the EffectAnnotation as a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueString">
      <summary>Gets the value of the EffectAnnotation as a String.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector2">
      <summary>Gets the value of the EffectAnnotation as a Vector2.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector3">
      <summary>Gets the value of the EffectAnnotation as a Vector3.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector4">
      <summary>Gets the value of the EffectAnnotation as a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ColumnCount">
      <summary>Gets the number of columns in this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.Name">
      <summary>Gets the name of the effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ParameterClass">
      <summary>Gets the parameter class of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ParameterType">
      <summary>Gets the parameter type of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.RowCount">
      <summary>Gets the row count of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.Semantic">
      <summary>Gets the semantic of this effect annotation.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection">
      <summary>Manipulates a collection of EffectAnnotation objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectAnnotationCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Count">
      <summary>Gets the number of EffectAnnotation objects in this EffectAnnotationCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item(System.Int32)">
      <summary>Gets a specific EffectAnnotation object by using an index value.</summary>
      <param name="index">Index of the EffectAnnotation to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item(System.String)">
      <summary>Gets a specific EffectAnnotation object by using a name.</summary>
      <param name="name">Name of the EffectAnnotation to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectFunction">
      <summary>Represents a function on an Effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunction.Name">
      <summary>Gets the name of the function.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection">
      <summary>Manipulates a collection of EffectFunction objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectFunctionCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Count">
      <summary>Gets the number of EffectFunction objects in this EffectFunctionCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Item(System.Int32)">
      <summary>Gets a specific EffectFunction object by using an index value.</summary>
      <param name="index">Index of the EffectFunction to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Item(System.String)">
      <summary>Gets a specific EffectFunction object by using a name.</summary>
      <param name="name">Name of the EffectFunction to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameter">
      <summary>Represents an Effect parameter.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBoolean">
      <summary>Gets the value of the EffectParameter as a Boolean.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBooleanArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Boolean.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32">
      <summary>Gets the value of the EffectParameter as an Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Int32.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrix">
      <summary>Gets the value of the EffectParameter as a Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Matrix.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTranspose">
      <summary>Gets the value of the EffectParameter as a Matrix transpose.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTransposeArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Matrix transpose.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternion">
      <summary>Gets the value of the EffectParameter as a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternionArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Quaternion.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingle">
      <summary>Gets the value of the EffectParameter as a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingleArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Single.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueString">
      <summary>Gets the value of the EffectParameter as an String.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture2D">
      <summary>Gets the value of the EffectParameter as a Texture2D.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture3D">
      <summary>Gets the value of the EffectParameter as a Texture3D.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTextureCube">
      <summary>Gets the value of the EffectParameter as a TextureCube.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2">
      <summary>Gets the value of the EffectParameter as a Vector2.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector2.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3">
      <summary>Gets the value of the EffectParameter as a Vector3.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector3.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4">
      <summary>Gets the value of the EffectParameter as a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector4.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetArrayRange(System.Int32,System.Int32)">
      <summary>Sets the range of an array to pass to the device.</summary>
      <param name="start">The start index.</param>
      <param name="end">The stop index.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">[MarshalAsAttribute(U1)] The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.String)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of the EffectParameter to the transpose of a Matrix.</summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of the EffectParameter to the transpose of a Matrix.</summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Annotations">
      <summary>Gets the collection of EffectAnnotation objects for this parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ColumnCount">
      <summary>Gets the number of columns in the parameter description.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Elements">
      <summary>Gets the collection of effect parameters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Name">
      <summary>Gets the name of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterClass">
      <summary>Gets the class of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterType">
      <summary>Gets the type of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.RowCount">
      <summary>Gets the number of rows in the parameter description.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Semantic">
      <summary>Gets the semantic meaning, or usage, of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.StructureMembers">
      <summary>Gets the collection of structure members.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterBlock">
      <summary>Represents an EffectParameter state block.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Initializes a new instance of the EffectParameterBlock class.</summary>
      <param name="parent">The Effect used to generate the EffectParameterBlock.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Apply">
      <summary>Applies the parameter changes in the EffectParameterBlock to the current effect state.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Begin">
      <summary>Begins capturing parameter state changes from the parent Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the EffectParameterBlock and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.End">
      <summary>Stops capturing state changes from the parent Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterClass">
      <summary>Defines classes that can be used for effect parameters or shader constants.</summary>
      <param name="MatrixColumns">Constant is a column major matrix.</param>
      <param name="MatrixRows">Constant is a row major matrix.</param>
      <param name="Object">Constant is either a texture, a shader, or a string.</param>
      <param name="Scalar">Constant is a scalar.</param>
      <param name="Struct">Constant is a structure.</param>
      <param name="Vector">Constant is a vector.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterCollection">
      <summary>Manipulates a collection of EffectParameter objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectParameterCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetParameterBySemantic(System.String)">
      <summary>Gets the handle of a top-level parameter or a structure member parameter by looking up its semantic with a case-insensitive search.</summary>
      <param name="semantic">The name of the semantic to search for.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Count">
      <summary>Gets the number of EffectParameter objects in this EffectParameterCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item(System.Int32)">
      <summary>Gets a specific EffectParameter object by using an index value.</summary>
      <param name="index">Index of the EffectParameter to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item(System.String)">
      <summary>Gets a specific EffectParameter by name.</summary>
      <param name="name">The name of the EffectParameter to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterType">
      <summary>Defines types that can be used for effect parameters or shader constants.</summary>
      <param name="Bool">Parameter is a Boolean. Any nonzero value passed in will be mapped to 1 (TRUE) before being written into the constant table; otherwise, the value will be set to 0 in the constant table.</param>
      <param name="Int32">Parameter is an integer. Any floating-point values passed in will be rounded off (to zero decimal places) before being written into the constant table.</param>
      <param name="PixelShader">Parameter is a pixel shader.</param>
      <param name="Sampler">Parameter is a sampler.</param>
      <param name="Sampler1D">Parameter is a 1D sampler.</param>
      <param name="Sampler2D">Parameter is a 2D sampler.</param>
      <param name="Sampler3D">Parameter is a 3D sampler.</param>
      <param name="SamplerCube">Parameter is a cube sampler.</param>
      <param name="Single">Parameter is a floating-point number.</param>
      <param name="String">Parameter is a string.</param>
      <param name="Texture">Parameter is a texture.</param>
      <param name="Texture1D">Parameter is a 1D texture.</param>
      <param name="Texture2D">Parameter is a 2D texture.</param>
      <param name="Texture3D">Parameter is a 3D texture.</param>
      <param name="TextureCube">Parameter is a cube texture.</param>
      <param name="VertexShader">Parameter is a vertex shader.</param>
      <param name="Void">Parameter is a void pointer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPass">
      <summary>Represents an effect pass. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPass.Begin">
      <summary>Begins a pass within the active technique. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPass.End">
      <summary>Ends a pass within the active technique. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Annotations">
      <summary>Gets the set of EffectAnnotation objects for this EffectPass.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Name">
      <summary>Gets the name of this pass.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPassCollection">
      <summary>Manipulates a collection of EffectPass objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPassCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item(System.Int32)">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">Index of the EffectPass to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item(System.String)">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectPass to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPool">
      <summary>Allows applications to share resources between effects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPool.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.EffectPool.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechnique">
      <summary>Represents an effect technique.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechnique.IsParameterUsed(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>Determines whether a given EffectParameter is used by this technique.</summary>
      <param name="parameter">The effect parameter to check.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechnique.Validate">
      <summary>Validates this technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Annotations">
      <summary>Gets the EffectAnnotation objects associated with this technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Name">
      <summary>Gets the name of this technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Passes">
      <summary>Gets the collection of EffectPass objects this rendering technique requires.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection">
      <summary>Manipulates a collection of EffectTechnique objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.GetValidTechniques">
      <summary>Returns all of the valid techniques in this collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item(System.Int32)">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">Index of the EffectTechnique to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item(System.String)">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectTechnique to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
      <summary>Describes options for filling the vertices and lines that define a primitive.</summary>
      <param name="Point">Draw a point at each vertex.</param>
      <param name="Solid">Draw solid faces for each primitive.</param>
      <param name="WireFrame">Draw lines connecting the vertices that define a primitive face.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FilterOptions">
      <summary>Defines modes describing how to filter an image or mipmap when it is minified or magnified to fit a set of vertices.</summary>
      <param name="Box">Each pixel is computed by averaging a 2×2(×2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.</param>
      <param name="Dither">Resulting image must be dithered using a 4×4 ordered dither algorithm. This happens when converting from one format to another.</param>
      <param name="DitherDiffusion">Do diffuse dithering on the image when changing from one format to another.</param>
      <param name="Linear">Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2×2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer interpolates pixel color in a linear manner, using the texels of the two nearest textures.</param>
      <param name="Mirror">Same as specifying the MirrorU, MirrorV, and MirrorW flags. This flag is always used internally for this function.</param>
      <param name="MirrorU">Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.</param>
      <param name="MirrorV">Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.</param>
      <param name="MirrorW">Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.</param>
      <param name="None">Mipmapping disabled. The rasterizer uses the magnification filter instead.</param>
      <param name="Point">Each destination pixel is computed by sampling the nearest pixel from the source image.</param>
      <param name="Srgb">Same as specifying SrgbIn | SrgbOut.</param>
      <param name="SrgbIn">Input data is in sRGB (gamma 2.2) color space.</param>
      <param name="SrgbOut">Output data is in sRGB (gamma 2.2) color space.</param>
      <param name="Triangle">Each pixel in the source image contributes equally to the destination image. This is the slowest of the filters.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FogMode">
      <summary>Defines constants that describe the fog mode.</summary>
      <param name="Exponent">Fog effect intensifies exponentially, according to the following formula. [Image, see documentation page]</param>
      <param name="ExponentSquared">Fog effect intensifies exponentially with the square of the distance, according to the following formula. [Image, see documentation page]</param>
      <param name="Linear">Fog effect intensifies in a linear manner between the start and end points, according to the following formula. [Image, see documentation page]</param>
      <param name="None">No fog effect.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GammaRamp">
      <summary>Contains red, green, and blue ramp data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetBlue">
      <summary>Retrieves the blue component of the gamma ramp.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetGreen">
      <summary>Retrieves the green component of the gamma ramp.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetRed">
      <summary>Retrieves the red component of the gamma ramp.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetBlue(System.Int16[])">
      <summary>Sets the blue component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the blue component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetGreen(System.Int16[])">
      <summary>Sets the green component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the green component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetRed(System.Int16[])">
      <summary>Sets the red component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the red component.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter">
      <summary>Provides methods to retrieve and manipulate graphics adapters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDepthStencilMatch(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Tests whether a depth stencil format is compatible with a render target format in a particular display mode.  Reference page contains code sample.</summary>
      <param name="deviceType">The device type.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">The format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">The format of the depth stencil surface to be tested.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.QueryUsages,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Verifies whether a depth buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three, on a device representing the current adapter.  Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage">A set of options identifying the behaviors of this surface resource.</param>
      <param name="queryUsages">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The format of the depth buffer surface identified by usage.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.QueryUsages,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Verifies whether a surface buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three on a device representing the current adapter.  Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage">A set of options identifying the behaviors of this surface resource.</param>
      <param name="queryUsages">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The format of the surface identified by usage.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormatConversion(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="deviceType">Type of device to check.</param>
      <param name="sourceFormat">Source adapter format.</param>
      <param name="targetFormat">Target adapter format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType)">
      <summary>Verifies whether a multisample technique is available on a specified game machine.  Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">[MarshalAsAttribute(U1)] true to inquire about windowed multisampling; false to inquire about full-screen multisampling.</param>
      <param name="sampleType">The multisampling technique to test.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32@)">
      <summary>Verifies whether a multisample technique is available on a specified game machine, optionally returning the number of quality stops available for the specified technique.  Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">[MarshalAsAttribute(U1)] true to inquire about windowed multisampling; false to inquire about full-screen multisampling.</param>
      <param name="sampleType">The multisampling technique to test.</param>
      <param name="qualityLevels">[OutAttribute] Number of quality stops available for a given multisample type; can be null if it is not necessary to return the values.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean)">
      <summary>Determines whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="displayFormat">The format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">Format of the back buffer. This value must be one of the render target formats. DisplayMode can be used to obtain the current format. For windowed applications, the back-buffer format does not need to match the display-mode format if the hardware supports color conversion. The set of possible back-buffer formats is constrained, but the runtime allows any valid back-buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel. Full-screen applications cannot perform color conversion. SurfaceFormat.Unknown is allowed for windowed mode.</param>
      <param name="isFullScreen">[MarshalAsAttribute(U1)] true if the device type will be used in windowed mode; false if the device type will be used in full-screen mode.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Dispose">
      <summary>Releases all resources used by the GraphicsAdapter class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Dispose(System.Boolean)">
      <summary>Releases all resources used by the GraphicsAdapter class.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the GraphicsAdapter.</summary>
      <param name="obj">The Object to compare with the current GraphicsAdapter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetCapabilities(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Returns the capabilities of a device. Reference page contains links to related code samples.</summary>
      <param name="deviceType">The device to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDeviceTypeAvailable(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Determines whether a requested device type is available.</summary>
      <param name="deviceType">The device type to request.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters">
      <summary>Collection of available adapters on the system. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode">
      <summary>Gets the current display mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter">
      <summary>Gets the default adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Description">
      <summary>Retrieves a string used for presentation to the user.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceId">
      <summary>Retrieves a value that is used to help identify a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceIdentifier">
      <summary>Retrieves a globally unique identifier (GUID) object that can be used to check changes in the driver and chip set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceName">
      <summary>Retrieves a string that contains the device name for a Microsoft Windows Graphics Device Interface (GDI).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverDll">
      <summary>Retrieves a string that is used to present the driver name to the user.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverVersion">
      <summary>Retrieves a value that identifies the version of the Microsoft Direct3D driver.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDefaultAdapter">
      <summary>Determines if this instance of GraphicsAdapter is the default adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsWideScreen">
      <summary>Determines if the graphics adapter is in widescreen mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.MonitorHandle">
      <summary>Retrieves the handle of the monitor associated with the Microsoft Direct3D object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Revision">
      <summary>Retrieves a value used to help identify the revision level of a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SubSystemId">
      <summary>Retrieves a value used to identify the subsystem.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for the current adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.VendorId">
      <summary>Retrieves a value used to identify the manufacturer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Creates a new instance of GraphicsDevice</summary>
      <param name="adapter">The display adapter.</param>
      <param name="deviceType">The desired device type.</param>
      <param name="renderWindowHandle">The focus window.</param>
      <param name="presentationParameters">The presentation parameters for the device to be created.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Clears the viewport to a specified color.</summary>
      <param name="color">Color value to which the render target surface is cleared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">Flags indicating which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">Flags that indicate which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value to store in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices. Reference page contains links to related code samples.</summary>
      <param name="primitiveType">Describes the type of primitive to render. PrimitiveType.PointList is not supported with this method.</param>
      <param name="baseVertex">Offset to add to each vertex index in the index buffer.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call. The minVertexIndex parameter and all of the indices in the index stream are relative to the baseVertex parameter.</param>
      <param name="numVertices">A number of vertices used during the call. The first vertex is located at index: baseVertex + minVertexIndex.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">A number of primitives to render. The number of vertices used is a function of primitiveCount and primitiveType. To determine the maximum number of primitives allowed, check the MaxPrimitiveCount property member of the Capabilities structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams. Reference page contains links to related code samples.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="startVertex">Index of the first vertex to load. Beginning at startVertex, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">Number of primitives to render. To determine the maximum number of primitives allowed, check MaxPrimitiveCount. The primitiveCount is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
      <summary>Renders geometric primitives with indexed data specified by the user, specifying an index buffer as an array of type Int16.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="vertexData">The vertex buffer indexed by indexData.</param>
      <param name="vertexOffset">Offset to add to each vertex index in the index buffer.</param>
      <param name="numVertices">Number of vertices used during this call. The first vertex is located at index minVertexIndex.</param>
      <param name="indexData">A list of indices into the vertex buffer, given in the order that you want the vertices to render. Using an array of type Int16, which uses 16 bits per element, allows you to conserve resources if the index buffer does not require a 32-bit depth array.</param>
      <param name="indexOffset">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">Number of primitives to render. The maximum number of primitives allowed is determined by checking MaxPrimitiveCount. (The number of indices is a function of the primitive count and the primitive type.)</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>Renders geometric primitives with indexed data specified by the user, specifying an index buffer as an array of type Int32.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="vertexData">The vertex buffer indexed by indexData.</param>
      <param name="vertexOffset">Offset to add to each vertex index in the index buffer.</param>
      <param name="numVertices">Number of vertices used during this call. The first vertex is located at index minVertexIndex.</param>
      <param name="indexData">A list of indices into the vertex buffer, given in the order that you want the vertices to render. Using an array of type Int32, which uses 32 bits per element, allows you to index a greater number of elements in the vertex buffer.</param>
      <param name="indexOffset">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">Number of primitives to render. The maximum number of primitives allowed is determined by checking MaxPrimitiveCount. (The number of indices is a function of the primitive count and the primitive type.)</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
      <summary>Renders the given geometric primitive with data specified by the user. Reference page contains links to related code samples.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset at which to begin reading vertexData.</param>
      <param name="primitiveCount">Number of primitives to render. The maximum number of primitives allowed is determined by checking MaxPrimitiveCount. The number of indices is a function of primitiveCount and primitiveType.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EvictManagedResources">
      <summary>Evicts all managed resources, including Microsoft Direct3D resources and those that are driver managed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetGammaRamp">
      <summary>Gets the gamma correction ramp.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Boolean values from the pixel shader constant Boolean registers.</summary>
      <param name="startRegister">Pixel shader Boolean constant register of the first constant.</param>
      <param name="constantCount">Number of Boolean values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Gets an array of Int32 values from the pixel shader constant integer registers.</summary>
      <param name="startRegister">Pixel shader integer register of the first constant.</param>
      <param name="constantCount">Number of Int32 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderMatrixArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Matrix values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Matrix values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderMatrixConstant(System.Int32)">
      <summary>Gets a Matrix value from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderQuaternionArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Quaternion values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Quaternion values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderQuaternionConstant(System.Int32)">
      <summary>Gets a Quaternion value from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Single values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Single values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector2ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector2 values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector2 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector2Constant(System.Int32)">
      <summary>Gets a Vector2 value from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector3ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector3 values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector3 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector3Constant(System.Int32)">
      <summary>Gets a Vector3 value from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector4ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector4 values from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector4 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderVector4Constant(System.Int32)">
      <summary>Gets a Vector4 value from the pixel shader constant float registers.</summary>
      <param name="startRegister">Pixel shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTarget(System.Int32)">
      <summary>Gets a render target surface.</summary>
      <param name="renderTargetIndex">Index of the render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Boolean values from the vertex shader constant Boolean registers.</summary>
      <param name="startRegister">Vertex shader constant Boolean register of the first constant.</param>
      <param name="constantCount">Number of Boolean values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Gets an array of Int32 values from the vertex shader constant integer registers.</summary>
      <param name="startRegister">Vertex shader constant integer register of the first constant.</param>
      <param name="constantCount">Number of Int32 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderMatrixArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Matrix values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Matrix values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderMatrixConstant(System.Int32)">
      <summary>Gets a Matrix value from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderQuaternionArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Quaternion values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Quaternion values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderQuaternionConstant(System.Int32)">
      <summary>Gets a Quaternion value from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Single values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Single values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector2ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector2 values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector2 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector2Constant(System.Int32)">
      <summary>Gets a Vector2 value from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector3ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector3 values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector3 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector3Constant(System.Int32)">
      <summary>Gets a Vector3 value from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector4ArrayConstant(System.Int32,System.Int32)">
      <summary>Gets an array of Vector4 values from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
      <param name="constantCount">Number of Vector4 values to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderVector4Constant(System.Int32)">
      <summary>Gets a Vector4 value from the vertex shader constant float registers.</summary>
      <param name="startRegister">Vertex shader constant float register of the first constant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.IntPtr)">
      <summary>Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.  Reference page contains code sample.</summary>
      <param name="overrideWindowHandle">Destination window containing the client area that is the target for this presentation. If not specified, this is DeviceWindowHandle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.IntPtr)">
      <summary>Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.  Reference page contains code sample.</summary>
      <param name="sourceRectangle">The source rectangle. If null, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface. This parameter must be null unless the swap chain was created with SwapEffect.Copy.</param>
      <param name="destinationRectangle">The destination rectangle, in window client coordinates. If null, the entire client area is filled. If the rectangle exceeds the destination client area, the rectangle is clipped to the destination client area. This parameter must be null unless the swap chain was created with SwapEffect.Copy.</param>
      <param name="overrideWindowHandle">Destination window containing the client area that is the target for this presentation. If not specified, this is DeviceWindowHandle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceLost(System.Object,System.EventArgs)">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset).</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceReset(System.Object,System.EventArgs)">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to re-create all resources.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceResetting(System.Object,System.EventArgs)">
      <summary>Occurs when a GraphicsDevice is resetting</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_ResourceCreated(System.Object,Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs)">
      <summary>Occurs when ResourceCreated is called.</summary>
      <param name="value0">The source of the event.</param>
      <param name="value1">An EventArgs object that contains no data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_ResourceDestroyed(System.Object,Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs)">
      <summary>Occurs when ResourceDestroyed is called.</summary>
      <param name="value0">The source of the event.</param>
      <param name="value1">An EventArgs object that contains no data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset">
      <summary>Resets the presentation parameters for the current GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Resets the presentation parameters for the specified Reset.</summary>
      <param name="graphicsAdapter">The graphics device being reset.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Resets the current GraphicsDevice with the specified PresentationParameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Resets the specified Reset with the specified presentation parameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
      <param name="graphicsAdapter">The graphics device being reset.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResolveBackBuffer(Microsoft.Xna.Framework.Graphics.ResolveTexture2D)">
      <summary>Copies the current back buffer contents to a texture.  Reference page contains code sample.</summary>
      <param name="resolveTarget">Texture to update with the resolved back buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResolveBackBuffer(Microsoft.Xna.Framework.Graphics.ResolveTexture2D,System.Int32)">
      <summary>Copies the contents of the back buffer at the specified index to a texture.  Reference page contains code sample.</summary>
      <param name="resolveTarget">Texture to update with the resolved back buffer.</param>
      <param name="backBufferIndex">Index of the back buffer to resolve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetGammaRamp(System.Boolean,Microsoft.Xna.Framework.Graphics.GammaRamp)">
      <summary>Sets the gamma correction ramp.</summary>
      <param name="calibrate">[MarshalAsAttribute(U1)] true to indicate that correction should be applied. false to indicate that no gamma correction should be applied. The supplied gamma table is transferred directly to the GraphicsDevice.</param>
      <param name="ramp">The gamma correction ramp to set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets the specified pixel shader constant Boolean registers to an array of Boolean values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant Boolean register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets the specified pixel shader constant integer registers to an array of Int32 values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant integer register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the specified pixel shader constant float registers to a Matrix value.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Matrix values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Quaternion)">
      <summary>Sets the specified pixel shader constant float registers to a Quaternion value.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Quaternion[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Quaternion values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Single[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Single values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector2)">
      <summary>Sets the specified pixel shader constant float register to a Vector2 value.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector2[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Vector2 values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector3)">
      <summary>Sets the specified pixel shader constant float register to a Vector3 value.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector3[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Vector3 values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the specified pixel shader constant float register to a Vector4 value.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets the specified pixel shader constant float registers to an array of Vector4 values.</summary>
      <param name="startRegister">Zero-based index of the pixel shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(System.Int32,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Sets a new render target for this GraphicsDevice.  Reference page contains code sample.</summary>
      <param name="renderTargetIndex">Index of the render target. The number of render targets supported by a GraphicsDevice is contained in MaxSimultaneousRenderTargets.</param>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>Sets a new render target for this GraphicsDevice.  Reference page contains code sample.</summary>
      <param name="renderTargetIndex">Index of the render target. The number of render targets supported by a GraphicsDevice is contained in MaxSimultaneousRenderTargets.</param>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
      <param name="faceType">The cube map face type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets the specified vertex shader constant Boolean registers to an array of Boolean values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant Boolean register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets the specified vertex shader constant integer registers to an array of Int32 values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant integer register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the specified vertex shader constant float registers to a Matrix value.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data. This value will be transposed when the vertex shader constant is set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Matrix values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data. This value will be transposed when the vertex shader constant is set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Quaternion)">
      <summary>Sets the specified vertex shader constant float register to a Quaternion value.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Quaternion[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Quaternion values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Single[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Single values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector2)">
      <summary>Sets the specified vertex shader constant float register to a Vector2 value.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector2[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Vector2 values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector3)">
      <summary>Sets the specified vertex shader constant float register to a Vector3 value.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector3[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Vector3 values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the specified vertex shader constant float register to a Vector4 value.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets the specified vertex shader constant float registers to an array of Vector4 values.</summary>
      <param name="startRegister">Zero-based index of the vertex shader constant float register at which to begin setting values.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ClipPlanes">
      <summary>Retrieves the clipping planes of the current GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreationParameters">
      <summary>Retrieves the creation parameters of the GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DepthStencilBuffer">
      <summary>Gets or sets the depth stencil surface of this GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DriverLevel">
      <summary>Returns the driver level.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceCapabilities">
      <summary>Gets the capabilities of the graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceStatus">
      <summary>Retrieves the status of the device</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Indices">
      <summary>Gets or sets index data. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PixelShader">
      <summary>Gets or sets the current pixel shader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PresentationParameters">
      <summary>Gets the presentation parameters associated with this graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RasterStatus">
      <summary>Retrieves information that describes the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RenderState">
      <summary>Retrieves a render-state value for a GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SamplerStates">
      <summary>Retrieves a collection of SamplerState objects for the current GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle">
      <summary>Gets or sets the rectangle used for scissor testing.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Textures">
      <summary>Returns the collection of textures that have been assigned to the texture stages of the device.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexDeclaration">
      <summary>Gets or sets a vertex shader declaration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexSamplerStates">
      <summary>Gets the collection of vertex sampler states.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexShader">
      <summary>Gets or sets the current vertex shader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexTextures">
      <summary>Gets the collection of vertex textures that support texture lookup in the vertex shader using the texldl - vs texture load statement. The vertex engine contains four texture sampler stages.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Vertices">
      <summary>Gets the vertex stream collection. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport">
      <summary>Gets or sets a viewport identifying the portion of the render target to receive draw calls.  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceLost">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset).  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceReset">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to recreate all resources.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceResetting">
      <summary>Occurs when a GraphicsDevice is resetting, allowing the application to cancel the default handling of the reset.  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.  Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceCreated">
      <summary>Occurs when a resource is created.</summary>
      <param name="">The event data.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceDestroyed">
      <summary>Occurs when a resource is destroyed.</summary>
      <param name="">The event data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities">
      <summary>Represents the capabilities of the hardware. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Dispose">
      <summary>Releases all resources used by the GraphicsDeviceCapabilities class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the GraphicsDeviceCapabilities object and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current GraphicsDeviceCapabilities.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AdapterOrdinalInGroup">
      <summary>Gets the number indicating the order in which heads are referenced by the API.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AlphaCompareCapabilities">
      <summary>Gets the alpha-test comparison capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CubeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a cube texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities">
      <summary>Gets hardware cursor capabilties.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities">
      <summary>Gets vertex data type capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DepthBufferCompareCapabilities">
      <summary>Gets depth buffer comparision capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DestinationBlendCapabilities">
      <summary>Gets destination-blending capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilities">
      <summary>Gets graphics device capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceType">
      <summary>Returns the type of the current GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities">
      <summary>Gets device driver capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ExtentsAdjust">
      <summary>Gets the number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandBottom">
      <summary>Gets the bottom screen-space coordinate of the guard-band clipping region.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandLeft">
      <summary>Gets the left screen-space coordinate of the guard-band clipping region.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandRight">
      <summary>Gets the right coordinate of the guard-band clipping region.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandTop">
      <summary>Gets the top screen-space coordinate of the guard-band clipping region.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities">
      <summary>Gets line-drawing primitives capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MasterAdapterOrdinal">
      <summary>Gets the master device for this subordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxAnisotropy">
      <summary>Gets the maximum valid value for the MaxAnisotropy texture-stage state.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPixelShader30InstructionSlots">
      <summary>Gets the maximum number of pixel shader instruction slots supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPixelShaderProfile">
      <summary>Returns the maximum pixel shader profile for this GraphicsDevice. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPointSize">
      <summary>Gets the maximum size of a point primitive.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPrimitiveCount">
      <summary>Gets the maximum number of primitives for each DrawPrimitives call.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxSimultaneousRenderTargets">
      <summary>Gets the maximum number of simultaneous render targets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxSimultaneousTextures">
      <summary>Gets the maximum number of textures that can be simultaneously bound to the fixed-function pipeline sampler stages.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreams">
      <summary>Gets the maximum number of concurrent data streams.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreamStride">
      <summary>Gets the maximum stride.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureAspectRatio">
      <summary>Gets the maximum texture aspect ratio supported by the hardware.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureHeight">
      <summary>Gets the maximum texture height for this device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureRepeat">
      <summary>Gets the maximum range of the integer bits of the post-normalized texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureWidth">
      <summary>Gets the maximum texture width for this device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxUserClipPlanes">
      <summary>Gets the maximum number of user-defined clipping planes supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexIndex">
      <summary>Gets the maximum size of indices supported for hardware vertex processing.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShader30InstructionSlots">
      <summary>Gets the maximum number of vertex shader instruction slots supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShaderConstants">
      <summary>Gets the number of vertex shader registers that are reserved for constants.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShaderProfile">
      <summary>Returns the maximum vertex shader profile for this GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexW">
      <summary>Gets the maximum W-based depth value that the device supports.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVolumeExtent">
      <summary>Gets the maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.NumberOfAdaptersInGroup">
      <summary>Gets the number of adapters in this adapter group (only if master).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader1xMaxValue">
      <summary>Gets the maximum value of pixel shader arithmetic component.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCapabilities">
      <summary>Gets the pixel shader 2.0 capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderVersion">
      <summary>Gets the pixel shader main and sub versions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PresentInterval">
      <summary>Gets the rate at which the swap chain's back buffers are presented to the front buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities">
      <summary>Gets driver primitive capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities">
      <summary>Gets information on raster-drawing capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities">
      <summary>Gets shading operations capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.SourceBlendCapabilities">
      <summary>Gets source-blending capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities">
      <summary>Gets the supported stencil-buffer operations.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for texture objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities">
      <summary>Gets miscellaneous texture-mapping capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities">
      <summary>Gets flexible vertex format capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities">
      <summary>Gets vertex processing capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCapabilities">
      <summary>Gets vertex shader version 2.0 extended capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderVersion">
      <summary>Gets the vertex shader main and sub versions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexTextureFilterCapabilities">
      <summary>Gets vertex shader texture filter capabilities.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for a volume texture</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a volume texture.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps">
      <summary>Represents the texture addressing capabilities for Texture structures.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.AddressCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.AddressCaps object this instance is being compared to .</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.AddressCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.AddressCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.AddressCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.AddressCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.AddressCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.AddressCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsBorder">
      <summary>Gets a value indicating whether the device supports the setting of coordinates outside the range [0.0, 1.0] to the border color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsClamp">
      <summary>Gets a value indicating whether the device supports the clamping of textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsIndependentUV">
      <summary>Gets a value indicating whether the device can separate the texture-addressing modes of the texture's u and v coordinates.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsMirror">
      <summary>Gets a value indicating whether a device can mirror textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsMirrorOnce">
      <summary>Gets a value indicating whether a device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsWrap">
      <summary>Gets a value indicating whether a device can wrap textures to addresses.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps">
      <summary>Represents the supported blend capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.BlendCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.BlendCaps to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.BlendCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.BlendCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.BlendCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.BlendCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.BlendCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.BlendCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBlendFactor">
      <summary>Gets a value indicating that the driver supports the Blend.BlendFactor blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBothInverseSourceAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.BothInverseSourceAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBothSourceAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.BothSourceAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsDestinationAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.DestinationAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsDestinationColor">
      <summary>Gets a value indicating that the driver supports the Blend.DestinationColor blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseDestinationAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.InverseDestinationAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseDestinationColor">
      <summary>Gets a value indicating that the driver supports the Blend.InverseDestinationColor blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseSourceAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.InverseSourceAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseSourceColor">
      <summary>Gets a value indicating that the driver supports the Blend.InverseSourceColor blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsOne">
      <summary>Gets a value indicating that the driver supports the Blend.One blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceAlpha">
      <summary>Gets a value indicating that the driver supports the Blend.SourceAlpha blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceAlphaSat">
      <summary>Gets a value indicating that the driver supports the Blend.SourceAlphaSat blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceColor">
      <summary>Gets a value indicating that the driver supports the Blend.SourceColor blend mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsZero">
      <summary>Gets a value indicating that the driver supports the Blend.Zero blend mode.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps">
      <summary>Represents comparison capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CompareCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.CompareCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CompareCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.CompareCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.CompareCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CompareCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.CompareCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.CompareCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsAlways">
      <summary>Gets a value indicating whether always passing the comparison test is supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value equals the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsGreater">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsGreaterEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than or equal to the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsLess">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsLessEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than or equal to the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsNever">
      <summary>Gets a value indicating whether never passing the comparison test is supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsNotEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value does not equal the current value are supported.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps">
      <summary>Represents hardware support for cursors.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CursorCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.CursorCaps to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CursorCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.CursorCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.CursorCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CursorCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.CursorCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.CursorCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.SupportsColor">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in high-resolution modes.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.SupportsLowResolution">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in low-resolution modes.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps">
      <summary>Represents data types contained in a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeclarationTypeCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DeclarationTypeCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeclarationTypeCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DeclarationTypeCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.DeclarationTypeCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeclarationTypeCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DeclarationTypeCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.DeclarationTypeCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsByte4">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.Byte4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsHalfVector2">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.HalfVector2</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsHalfVector4">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.HalfVector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalized101010">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.Normalized101010.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalizedShort2">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.NormalizedShort2.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalizedShort4">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.NormalizedShort4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRg32">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.Rg32.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRgba32">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.Rgba32.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRgba64">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.Rgba64.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsUInt101010">
      <summary>Gets a value indicating whether vertex declarations support VertexElementFormat.UInt101010.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps">
      <summary>Represents device-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeviceCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DeviceCaps to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeviceCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DeviceCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.DeviceCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeviceCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DeviceCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.DeviceCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.CanDrawSystemToNonLocal">
      <summary>Gets a value indicating whether the device supports blits from system-memory textures to non-local video-memory textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.CanRenderAfterFlip">
      <summary>Gets a value indicating whether the device can queue rendering commands after a page flip.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.IsDirect3D9Driver">
      <summary>Gets a value indicating if the device supports copying the contents of a source rectangle to a destination rectangle using a texture as the source.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitives2">
      <summary>Gets a value indicating whether the device can support at least a DirectX 5–compliant driver.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitives2Ex">
      <summary>Gets a value indicating whether the device can support at least a DirectX 7–compliant driver.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitivesTransformedVertex">
      <summary>Gets a value indicating whether the device exports a DrawPrimitives-aware hardware abstraction layer (HAL).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsExecuteSystemMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsExecuteVideoMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsHardwareRasterization">
      <summary>Gets a value indicating whether the device has hardware acceleration for scene rasterization.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsHardwareTransformAndLight">
      <summary>Gets a value indicating whether the device can support transformation and lighting in hardware.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsSeparateTextureMemories">
      <summary>Gets a value indicating whether the device is texturing from separate memory pools.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsStreamOffset">
      <summary>Gets a value indicating whether the device supports stream offsets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureNonLocalVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from non-local video memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureSystemMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from system memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from device memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTransformedVertexSystemMemory">
      <summary>Gets a value indicating whether the device can use buffers from system memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTransformedVertexVideoMemory">
      <summary>Gets a value indicating whether the device can use buffers from video memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.VertexElementScanSharesStreamOffset">
      <summary>Gets a value indicating whether the device allows multiple vertex elements to share the same offset in a stream.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps">
      <summary>Represents driver-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DriverCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DriverCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.GetHashCode">
      <summary>gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DriverCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DriverCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.DriverCaps on the left side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DriverCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.DriverCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.DriverCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanAutoGenerateMipMap">
      <summary>Gets a value indicating whether the driver is capable of automatically generating mipmaps.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanCalibrateGamma">
      <summary>Gets a value indicating whether the system has a calibrator installed that can automatically adjust the gamma ramp.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanManageResource">
      <summary>Gets a value indicating whether the driver is capable of managing resources.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.ReadScanLine">
      <summary>Gets a value indicating whether the display hardware is capable of returning the current scan line.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsAlphaFullScreenFlipOrDiscard">
      <summary>Gets a value indicating whether the device can respect the AlphaBlendEnable render state in full-screen mode while using the FLIP or DISCARD swap effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsCopyToSystemMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from local video memory to system memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsCopyToVideoMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from system memory to local video memory.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsDynamicTextures">
      <summary>Gets a value indicating whether the driver supports dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsFullScreenGamma">
      <summary>Gets a value indicating whether the driver supports dynamic gamma ramp adjustment in full-screen mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsLinearToSrgbPresentation">
      <summary>Gets a value indicating whether the device can perform gamma correction from a windowed back buffer (containing linear content) to an sRGB desktop.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps">
      <summary>Represents texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.FilterCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.FilterCaps to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.FilterCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.FilterCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.FilterCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.FilterCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.FilterCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.FilterCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyPoint">
      <summary>Gets a value that indicates whether the device supports per-stage point-sample filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMipMapLinear">
      <summary>Gets a value that indicates that the device supports per-stage trilinear interpolation filtering for mipmaps.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMipMapPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for mipmaps.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps">
      <summary>Represents the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.LineCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.LineCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.LineCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.LineCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.LineCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.LineCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.LineCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.LineCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsAlphaCompare">
      <summary>Gets a value indicating whether the device supports alpha-test comparisons.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsAntiAlias">
      <summary>Gets a value indicating whether the device supports antialiased lines.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsBlend">
      <summary>Gets a value indicating whether the device supports source blending.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device supports depth buffer comparisons.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsFog">
      <summary>Gets a value indicating whether the device supports fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsTextureMapping">
      <summary>Gets a value indicating whether the device supports texture mapping.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps">
      <summary>Represents pixel shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxNumberInstructionSlots">
      <summary>Specifies the maximum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinNumberInstructionSlots">
      <summary>Specifies the minimum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PixelShaderCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.PixelShaderCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PixelShaderCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.PixelShaderCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.PixelShaderCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PixelShaderCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.PixelShaderCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.PixelShaderCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.DynamicFlowControlDepth">
      <summary>Gets a value specifying the dynamic flow control depth.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.NumberInstructionSlots">
      <summary>Gets a value specifying the number of instruction slots supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsArbitrarySwizzle">
      <summary>Gets a value indicating whether arbitrary swizzling is supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsGradientInstructions">
      <summary>Gets a value indicating whether gradient instructions are supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsNoDependentReadLimit">
      <summary>Gets a value indicating whether there is a limit on the number of dependent reads per instruction.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsNoTextureInstructionLimit">
      <summary>Gets a value indicating whether there is a limit on the number of texture instructions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps">
      <summary>Represents driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PrimitiveCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.PrimitiveCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PrimitiveCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.PrimitiveCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.PrimitiveCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PrimitiveCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.PrimitiveCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.PrimitiveCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.HasFogVertexClamped">
      <summary>Gets a value indicating whether the device clamps fog blend factor per vertex.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.IsNullReference">
      <summary>Gets a value indicating whether the device is a null reference device that does not render.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsBlendOperation">
      <summary>Gets a value indicating whether the device supports blending operations other than BlendFunction.Add.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsClipTransformedVertices">
      <summary>Gets a value indicating whether the device clips post-transformed vertex primitives.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsColorWrite">
      <summary>Gets a value indicating whether the device supports per-channel writes for the render-target color buffer through the ColorWriteChannels state.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullClockwiseFace">
      <summary>Gets a value indicating whether the driver supports clockwise triangle culling through the CullMode state.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullCounterClockwiseFace">
      <summary>Gets a value indicating whether the driver supports counterclockwise triangle culling through the CullMode state.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullNone">
      <summary>Gets a value indicating whether the driver does not perform triangle culling.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsFogAndSpecularAlpha">
      <summary>Gets a value indicating whether the driver supports separate fog and specular alpha.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsIndependentWriteMasks">
      <summary>Gets a value indicating whether the device supports independent write masks for multiple element textures or multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMaskZ">
      <summary>Gets a value indicating whether the device can enable and disable modification of the depth buffer on pixel operations.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Gets a value indicating whether the device supports different bit depths for multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Gets a value indicating whether the device supports post-pixel shader operations for multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsSeparateAlphaBlend">
      <summary>Gets a value indicating whether the device supports separate blend settings for the alpha channel.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps">
      <summary>Represents raster-drawing capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.RasterCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.RasterCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.RasterCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.RasterCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.RasterCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.RasterCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.RasterCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.RasterCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsAnisotropy">
      <summary>Gets a value indicating whether the device supports anisotropic filtering.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsColorPerspective">
      <summary>Gets a value indicating whether the device iterates colors perspective correctly.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBias">
      <summary>Gets a value indicating whether the device supports legacy depth bias.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBufferLessHsr">
      <summary>Gets a value indicating whether the device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device can perform depth-test operations.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthFog">
      <summary>Gets a value indicating whether the device supports depth-based fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogRange">
      <summary>Gets a value indicating whether the device supports range-based fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogTable">
      <summary>Gets a value indicating whether the device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogVertex">
      <summary>Gets a value indicating whether the device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsMipMapLevelOfDetailBias">
      <summary>Gets a value indicating whether the device supports level-of-detail bias adjustments.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsMultisampleToggle">
      <summary>Gets a value indicating whether the device supports toggling multisampling on and off.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsScissorTest">
      <summary>Gets a value indicating whether the device supports scissor test.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsSlopeScaleDepthBias">
      <summary>Gets a value indicating whether the device performs true slope-scale based depth bias.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsWFog">
      <summary>Gets a value indicating whether the device supports w-based fog.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps">
      <summary>Represents shading operations capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.ShadingCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.ShadingCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.ShadingCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.ShadingCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.ShadingCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.ShadingCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.ShadingCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.ShadingCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsAlphaGouraudBlend">
      <summary>Gets a value indicating whether the device can support an alpha component for Gouraud-blended transparency.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsColorGouraudRgb">
      <summary>Gets a value indicating whether the device can support colored Gouraud shading.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsFogGouraud">
      <summary>Gets a value indicating whether the device can support fog in the Gouraud shading mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsSpecularGouraudRgb">
      <summary>Gets a value indicating whether the device supports Gouraud shading of specular highlights.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps">
      <summary>Represents driver stencil capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.StencilCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.StencilCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.StencilCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.StencilCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.StencilCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.StencilCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.StencilCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.StencilCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsDecrement">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsDecrementSaturation">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, clamping to zero.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsIncrement">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsIncrementSaturation">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsInvert">
      <summary>Gets a value indicating whether the device supports inverting the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsKeep">
      <summary>Gets a value indicating whether the device does not update the entry in the stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsReplace">
      <summary>Gets a value indicating whether the device supports replacing the stencil-buffer entry with a reference value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsTwoSided">
      <summary>Gets a value indicating whether the device supports two-sided stencil.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsZero">
      <summary>Gets a value indicating whether the device supports setting the stencil-buffer entry to 0.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps">
      <summary>Represents miscellaneous texture-mapping capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.TextureCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.TextureCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.TextureCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.TextureCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.TextureCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.TextureCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.TextureCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.TextureCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresCubeMapPower2">
      <summary>Gets a value indicating whether the device requires that cube texture maps have dimensions specified as powers of two.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresPower2">
      <summary>Gets a value indicating whether the device only supports textures that are powers of two.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresSquareOnly">
      <summary>Gets a value indicating whether the device requires all textures to be square.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresVolumeMapPower2">
      <summary>Gets a value indicating whether the device requires that volume texture maps have dimensions specified as powers of two.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsAlpha">
      <summary>Gets a value indicating whether the device supports alpha in texture pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsCubeMap">
      <summary>Gets a value indicating whether the device supports cube textures</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipCubeMap">
      <summary>Gets a value indicating whether the device supports mipmapped cube textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipMap">
      <summary>Gets a value indicating whether the device supports mipmapped textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipVolumeMap">
      <summary>Gets a value indicating whether the device supports mipmapped volume textures.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsNonPower2Conditional">
      <summary>Gets a value indicating whether the device supports the use of 2D textures with dimensions that are not powers of two, under certain conditions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsNoProjectedBumpEnvironment">
      <summary>Gets a value indicating whether the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsPerspective">
      <summary>Gets a value indicating whether the device supports perspective correction texturing</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsProjected">
      <summary>Gets a value indicating whether the device supports per pixel projective divide.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsTextureRepeatNotScaledBySize">
      <summary>Gets a value indicating whether the device does not scale texture indices by the texture size prior to interpolation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsVolumeMap">
      <summary>Gets a value indicating whether the device supports volume textures.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps">
      <summary>Represents flexible vertex format capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexFormatCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexFormatCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexFormatCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexFormatCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexFormatCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexFormatCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexFormatCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexFormatCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.NumberSimultaneousTextureCoordinates">
      <summary>Gets the total number of texture coordinate sets that the device can simultaneously use for multiple texture blending.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.SupportsDoNotStripElements">
      <summary>Gets a value indicating whether vertex elements should not be stripped.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.SupportsPointSize">
      <summary>Gets a value indicating whether point size comes from point size data in the vertex declaration.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps">
      <summary>Represents vertex processing capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexProcessingCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexProcessingCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexProcessingCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexProcessingCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexProcessingCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexProcessingCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexProcessingCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexProcessingCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsLocalViewer">
      <summary>Gets a value indicating whether the device can do local viewer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Gets a value indicating whether the device supports texture generation in non-local viewer mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsTextureGeneration">
      <summary>Gets a value indicating whether the device can do texture generation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsTextureGenerationSphereMap">
      <summary>Gets a value indicating whether the device supports use of the specified texture coordinates for sphere mapping.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps">
      <summary>Represents vertex shader version 2_0 extended capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the maximum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexShaderCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexShaderCaps object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexShaderCaps instances are equal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexShaderCaps on the left side of the equal sign.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexShaderCaps on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexShaderCaps instances are unequal.</summary>
      <param name="left">GraphicsDeviceCapabilities.VertexShaderCaps on the left side of the inequality operator.</param>
      <param name="right">GraphicsDeviceCapabilities.VertexShaderCaps on the right side of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.DynamicFlowControlDepth">
      <summary>Gets a value specifying the depth of the dynamic flow control instruction nesting.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters">
      <summary>Describes the creation parameters for a device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr)">
      <summary>Initializes a new instance of the GraphicsDeviceCreationParameters class.</summary>
      <param name="graphicsAdapter">The display adapter.</param>
      <param name="deviceType">The emulated functionality for this device.</param>
      <param name="windowHandle">Window handle to which focus belongs for this Direct3D device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.Adapter">
      <summary>Gets the graphics adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.DeviceType">
      <summary>Gets a information describing the amount of emulated functionality for the device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.FocusWindowHandle">
      <summary>Gets a pointer to the window to which focus belongs for the current device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
      <summary>Describes the status of the device.</summary>
      <param name="Lost">The device has been lost.</param>
      <param name="Normal">The device is normal.</param>
      <param name="NotReset">The device has not been reset.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsResource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this GraphicsResource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name">
      <summary>Gets the name of the resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Priority">
      <summary>Gets or sets the resource-management priority for this resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.ResourceType">
      <summary>Gets the type of this resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag">
      <summary>Gets the resource tags for this resource.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService">
      <summary>Defines a mechanism for retrieving GraphicsDevice objects. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice">
      <summary>Retrieves a graphcs device.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated">
      <summary>The event that occurs when a graphics device is created.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing">
      <summary>The event that occurs when a graphics device is disposing.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset">
      <summary>The event that occurs when a graphics device is reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting">
      <summary>The event that occurs when a graphics device is in the process of resetting.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ImageFileFormat">
      <summary>Defines supported image file formats that may be used for textures.</summary>
      <param name="Bmp">Microsoft Windows bitmap file format.</param>
      <param name="Dds">DirectDrawSurface file format.</param>
      <param name="Dib">Microsoft Windows bitmap file format.</param>
      <param name="Hdr">High dynamic-range file format.</param>
      <param name="Jpg">Joint Photographic Experts Group (JPEG) compressed file format.</param>
      <param name="Pfm">Portable float map file format.</param>
      <param name="Png">Portable Network Graphics file format.</param>
      <param name="Ppm">Portable pixmap file format.</param>
      <param name="Tga">Truevision Targa image file format.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexBuffer">
      <summary>Describes the rendering order of the vertices in a vertex buffer. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage,Microsoft.Xna.Framework.Graphics.IndexElementSize)">
      <summary>Initializes a new instance of the IndexBuffer class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer.</param>
      <param name="sizeInBytes">The size, in bytes, of the index buffer.</param>
      <param name="usage">A set of options identifying the behaviors of this index buffer resource.</param>
      <param name="elementSize">The size, in bits, of an index element.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the IndexBuffer class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer.</param>
      <param name="indexType">The type to use for index values.</param>
      <param name="elementCount">The number of values in the buffer.</param>
      <param name="usage">A set of options identifying the behaviors of this index buffer resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(``0[])">
      <summary>Copies the index buffer into an array.</summary>
      <param name="data">The array to receive index buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Copies the index buffer into an array.</summary>
      <param name="data">The array to receive index buffer data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Copies the index buffer into an array.</summary>
      <param name="offsetInBytes">The number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array to receive index buffer data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[])">
      <summary>Copies array data to the index buffer. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="offsetInBytes">Number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.BufferUsage">
      <summary>Gets the state of the related BufferUsage enumeration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexElementSize">
      <summary>Gets or sets a value indicating the size of this index element.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.SizeInBytes">
      <summary>Gets the size, in bytes, of this IndexBuffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
      <summary>Defines the size of an element of an index buffer.</summary>
      <param name="SixteenBits">Sixteen bits.</param>
      <param name="ThirtyTwoBits">Thirty-two bits.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Model">
      <summary>Represents a 3D model composed of multiple ModelMesh objects which may be moved independently. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.#ctor">
      <summary>Initializes a new instance of Model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies a transform of each bone in a model relative to all parent bones of the bone into a given array. Reference page contains links to related code samples.</summary>
      <param name="destinationBoneTransforms">The array to receive bone transforms.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsFrom(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies an array of transforms into each bone in the model. Reference page contains links to related conceptual articles.</summary>
      <param name="sourceBoneTransforms">An array containing new bone transforms.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies each bone transform relative only to the parent bone of the model to a given array. Reference page contains links to related code samples.</summary>
      <param name="destinationBoneTransforms">The array to receive bone transforms.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Bones">
      <summary>Gets a collection of ModelBone objects which describe how each mesh in the Meshes collection for this model relates to its parent mesh. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Meshes">
      <summary>Gets a collection of ModelMesh objects which compose the model. Each ModelMesh in a model may be moved independently and may be composed of multiple materials identified as ModelMeshPart objects. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Root">
      <summary>Gets the root bone for this model.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Tag">
      <summary>Gets or sets an object identifying this model.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBone">
      <summary>Represents bone data for a model. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Children">
      <summary>Gets a collection of bones that are children of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Index">
      <summary>Gets the index of this bone in the Bones collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Name">
      <summary>Gets the name of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Parent">
      <summary>Gets the parent of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Transform">
      <summary>Gets or sets the matrix used to transform this bone relative to its parent bone. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection">
      <summary>Represents a set of bones associated with a model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.GetEnumerator">
      <summary>Returns a ModelBoneCollection.Enumerator that can iterate through a ModelBoneCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelBone@)">
      <summary>Finds a bone with a given name if it exists in the collection.</summary>
      <param name="boneName">The name of the bone to find.</param>
      <param name="value">[OutAttribute] The bone named boneName, if found.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Item(System.String)">
      <summary>Retrieves a ModelBone from the collection, given the name of the bone.</summary>
      <param name="boneName">The name of the bone to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelBoneCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelBoneCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelBoneCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelBoneCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the ModelBoneCollection as a Object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelEffectCollection">
      <summary>Represents a collection of effects associated with a model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.GetEnumerator">
      <summary>Returns a ModelEffectCollection.Enumerator that can iterate through a ModelEffectCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelEffectCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelEffectCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelEffectCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelEffectCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the ModelEffectCollection as a Object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMesh">
      <summary>Represents a mesh that is part of a Model. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMesh.Draw">
      <summary>Draws all of the ModelMeshPart objects in this mesh, using their current Effect settings. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMesh.Draw(Microsoft.Xna.Framework.Graphics.SaveStateMode)">
      <summary>Draws all of the ModelMeshPart objects in this mesh, using their current Effect settings, and specifying options for saving effect state. Reference page contains links to related code samples.</summary>
      <param name="saveStateMode">The save state options to pass to each Effect.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.BoundingSphere">
      <summary>Gets the BoundingSphere that contains this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Effects">
      <summary>Gets a collection of effects associated with this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.IndexBuffer">
      <summary>Gets the index buffer for this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.MeshParts">
      <summary>Gets the ModelMeshPart objects that make up this mesh. Each part of a mesh is composed of a set of primitives that share the same material. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Name">
      <summary>Gets the name of this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.ParentBone">
      <summary>Gets the parent bone for this mesh. The parent bone of a mesh contains a transformation matrix that describes how the mesh is located relative to any parent meshes in a model. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Tag">
      <summary>Gets or sets an object identifying this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.VertexBuffer">
      <summary>Gets the vertex buffer used to render this mesh.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection">
      <summary>Represents a collection of ModelMesh objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.GetEnumerator">
      <summary>Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelMesh@)">
      <summary>Finds a mesh with a given name if it exists in the collection.</summary>
      <param name="meshName">The name of the mesh to find.</param>
      <param name="value">[OutAttribute] The mesh named meshName, if found.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Item(System.String)">
      <summary>Retrieves a ModelMesh from the collection, given the name of the mesh.</summary>
      <param name="meshName">The name of the mesh to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelMeshCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelMeshCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelMeshCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelMeshCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the ModelMeshCollection as a Object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPart">
      <summary>Represents a batch of geometry information to submit to the graphics device during rendering. Each ModelMeshPart is a subdivision of a ModelMesh object. The ModelMesh class is split into multiple ModelMeshPart objects, typically based on material information. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.BaseVertex">
      <summary>Gets the offset to add to each vertex index in the index buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.Effect">
      <summary>Gets or sets the material Effect for this mesh part.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.NumVertices">
      <summary>Gets the number of vertices used during a draw call.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.PrimitiveCount">
      <summary>Gets the number of primitives to render.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.StartIndex">
      <summary>Gets the location in the index array at which to start reading vertices.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.StreamOffset">
      <summary>Gets the offset in bytes from the beginning of the VertexBuffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.Tag">
      <summary>Gets or sets an object identifying this model mesh part.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.VertexDeclaration">
      <summary>Gets the vertex declaration for this model mesh part.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.VertexStride">
      <summary>Gets the size, in bytes, of the elements in this vertex stream.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection">
      <summary>Represents a collection of ModelMeshPart objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.GetEnumerator">
      <summary>Returns a ModelMeshPartCollection.Enumerator that can iterate through a ModelMeshPartCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelMeshPartCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelMeshPartCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelMeshPartCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelMeshPartCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the ModelMeshPartCollection as a Object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.MultiSampleType">
      <summary>Defines the levels of full-scene multisampling that the game machine can apply.  Reference page contains code sample.</summary>
      <param name="SixteenSamples">Enables 16 levels of full-scene multisampling.</param>
      <param name="FifteenSamples">Enables 15 levels of full-scene multisampling.</param>
      <param name="FourteenSamples">Enables 14 levels of full-scene multisampling.</param>
      <param name="ThirteenSamples">Enables 13 levels of full-scene multisampling.</param>
      <param name="TwelveSamples">Enables 12 levels of full-scene multisampling.</param>
      <param name="ElevenSamples">Enables 11 levels of full-scene multisampling.</param>
      <param name="TenSamples">Enables 10 levels of full-scene multisampling.</param>
      <param name="NineSamples">Enables 9 levels of full-scene multisampling.</param>
      <param name="EightSamples">Enables 8 levels of full-scene multisampling.</param>
      <param name="SevenSamples">Enables 7 levels of full-scene multisampling.</param>
      <param name="SixSamples">Enables 6 levels of full-scene multisampling.</param>
      <param name="FiveSamples">Enables 5 levels of full-scene multisampling.</param>
      <param name="FourSamples">Enables 4 levels of full-scene multisampling.</param>
      <param name="ThreeSamples">Enables 3 levels of full-scene multisampling.</param>
      <param name="TwoSamples">Enables 2 levels of full-scene multisampling.</param>
      <param name="NonMaskable">Enables the multisample quality value. For a quality of 1, the video card determines the best multisampling mode.</param>
      <param name="None">Specifies no full-scene multisampling, and enables swap effects other than SwapEffect.Discard.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery">
      <summary>Used to perform an occlusion query against the latest drawn objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of OcclusionQuery with the specified device.</summary>
      <param name="graphicsDevice">The graphics device to associate with this query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin">
      <summary>Begins application of the query.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by Dispose and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End">
      <summary>Ends the application of the query.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.GraphicsDevice">
      <summary>Gets the graphics device being queried.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete">
      <summary>Gets a value that indicates if the occlusion query has completed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsSupported">
      <summary>Specifies if occlusion queries are supported on the related graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Name">
      <summary>Gets the name of this occlusion query</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.PixelCount">
      <summary>Gets the number of visible pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Tag">
      <summary>Gets the resource tag for this occlusion query.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException">
      <summary>The exception that is thrown when Direct3D does not have enough display memory to perform the operation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PixelShader">
      <summary>Encapsulates the functionality of a pixel shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
      <summary>Initializes a new instance of the PixelShader class.</summary>
      <param name="graphicsDevice">Device to create the pixel shader.</param>
      <param name="shaderCode">The compiled byte code. A pixel shader function token array, specifying the blending operations.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.GetShaderCode">
      <summary>Gets an array of bytes containing the shader code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this PixelShader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.Name">
      <summary>Returns the name of the pixel shader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.Tag">
      <summary>Gets the resource tags.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.PixelShader.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters">
      <summary>Contains presentation parameters. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DefaultPresentRate">
      <summary>The default presentation rate.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clear">
      <summary>Resets all of the PresentationParameters values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clone">
      <summary>Creates a copy of this PresentationParameters object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current PresentationParameters.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Inequality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.AutoDepthStencilFormat">
      <summary>Gets or sets a value specifying the format of the depth-stencil surface that the device will automatically create. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferCount">
      <summary>Gets or sets a value specifying how many back buffers to create.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
      <summary>Gets or sets a value indicating the height of the new swap chain's back buffer. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
      <summary>Gets or sets a value indicating the width of the new swap chain's back buffer. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DeviceWindowHandle">
      <summary>Gets or sets the handle to the device window.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.EnableAutoDepthStencil">
      <summary>Gets or sets a value indicating whether Direct3D will manage depth buffers for the application. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.FullScreenRefreshRateInHz">
      <summary>Gets or sets a value indicating the rate at which the display adapter will refresh the screen.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.IsFullScreen">
      <summary>Gets or sets a value indicating whether the application is in full screen mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleQuality">
      <summary>Gets or sets a value indicating the multisample quality level.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleType">
      <summary>Gets or sets the multisample type.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentationInterval">
      <summary>Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentOptions">
      <summary>Gets or sets miscellaneous presentation flags.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.RenderTargetUsage">
      <summary>Gets or sets render target usage flags.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.SwapEffect">
      <summary>Gets or sets the swap effect.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which Present operations are completed.</summary>
      <param name="Default">Equivalent to setting One.</param>
      <param name="One">The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). Present operations are not affected more frequently than the screen refresh rate; the runtime completes one Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</param>
      <param name="Two">The driver waits for the vertical retrace period. Present operations are not affected more frequently than every second screen refresh. Check the PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Three">The driver waits for the vertical retrace period. Present operations are not affected more frequently than every third screen refresh. Check the PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Four">The driver waits for the vertical retrace period. Present operations are not affected more frequently than every fourth screen refresh. Check the PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Immediate">The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentOptions">
      <summary>Defines flags that control the behavior of the back buffer and depth buffer.</summary>
      <param name="DeviceClip">Clips a windowed Present blit into the window client area, within the monitor screen area of the video adapter that created the Microsoft Direct3D device. This flag works only on Microsoft Windows 2000 and Windows XP.</param>
      <param name="DiscardDepthStencil">Enables depth-buffer discarding if set when the device or swap chain is created. When this flag is set, the contents of the depth stencil buffer are invalid after either Present or DepthStencilBuffer is called. Discarding depth-buffer data can increase performance and is dependent on the driver. The debug runtime enforces discarding by clearing the depth-buffer to some constant value after calling either Present or DepthStencilBuffer with a different depth surface. Discarding depth-buffer data is illegal for all lockable formats, DepthFormat.Depth16Lockable, and DepthFormat.D32Lockable. Using the GraphicsDevice constructor to specify a lockable format and depth-buffer discarding will result in failure.</param>
      <param name="None">Use no presentation flags.</param>
      <param name="Video">Informs the driver that the back buffers contain video data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
      <summary>Defines how data in a vertex stream is interpreted during a draw call. Reference page contains links to related code samples.</summary>
      <param name="LineList">Renders the vertices as a list of isolated straight line segments; the count may be any positive integer.</param>
      <param name="LineStrip">Renders the vertices as a single polyline; the count may be any positive integer.</param>
      <param name="PointList">Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</param>
      <param name="TriangleFan">Renders the vertices as a triangle fan.</param>
      <param name="TriangleList">Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.</param>
      <param name="TriangleStrip">Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.QueryUsages">
      <summary>Defines options for querying device resource formats. Reference page contains links to related code samples.</summary>
      <param name="Filter">Query the resource format to see if it supports texture filter types other than TextureFilter.Point (which is always supported).</param>
      <param name="None">No option specified.</param>
      <param name="PostPixelShaderBlending">Query the resource to verify support for post pixel shader blending support, including alpha test, pixel fog, render-target blending, color write enable, and dithering.</param>
      <param name="SrgbRead">Query the resource to verify if a texture supports gamma correction during a read operation.</param>
      <param name="SrgbWrite">Query the resource to verify if a texture supports gamma correction during a write operation.</param>
      <param name="VertexTexture">Query the resource to verify support for vertex shader texture sampling.</param>
      <param name="WrapAndMip">Query the resource to verify support for texture wrapping and mipmapping.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RasterStatus">
      <summary>Describes the raster status.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RasterStatus.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterStatus.InVerticalBlank">
      <summary>Gets the status of the vertical blank period.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterStatus.ScanLine">
      <summary>Gets a value that roughly corresponds to the current scan line painted by the raster.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderState">
      <summary>Defines the render state of a graphics device. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaBlendEnable">
      <summary>Gets or sets a value to enable alpha-blended transparency. The default value is false.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaBlendOperation">
      <summary>Gets or sets the arithmetic operation applied to separate alpha blending. The default is BlendFunction.Add.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaDestinationBlend">
      <summary>Gets or sets the separate alpha channel blending factor. This factor represents a destination value by which to multiply the alpha channel only. The default is Blend.One. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaFunction">
      <summary>Gets or sets the comparison function for the alpha test. The default is CompareFunction.Always.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaSourceBlend">
      <summary>Gets or sets the separate alpha channel blending factor. This factor represents a value by which to multiply the alpha channel only. The default is Blend.One. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaTestEnable">
      <summary>Gets or sets a render state that enables a per-pixel alpha test. The default value is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.BlendFactor">
      <summary>Gets or sets the color used for a constant-blend factor during alpha blending. The default is Color.White.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.BlendFunction">
      <summary>Gets or sets a value to select the arithmetic operation to apply to the source and destination pixel components when AlphaBlendEnable is set to true. The default is BlendFunction.Add.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteChannels">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteChannels1">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteChannels2">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteChannels3">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-buffer test fails for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilFunction">
      <summary>Gets or sets the comparison function to use for counterclockwise stencil tests. The default is CompareFunction.Always.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil and z-tests pass for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CullMode">
      <summary>Specifies how back-facing triangles are culled, if at all. The default value is CullMode.CounterClockwise.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBias">
      <summary>Sets or retrieves the depth bias for polygons. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferEnable">
      <summary>Enables or disables depth buffering. The default is true.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferFunction">
      <summary>Gets or sets the comparison function for the depth-buffer test. The default is CompareFunction.LessEqual</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferWriteEnable">
      <summary>Enables or disables writing to the depth buffer. The default is true.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DestinationBlend">
      <summary>Gets or sets the color blending factor. This factor represents a value by which to multiply the destination pixel color before adding it to the source pixel to produce a color that is a blend of the two. The default is Blend.Zero. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FillMode">
      <summary>Represents the fill mode. The default is FillMode.Solid.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogColor">
      <summary>Gets or sets the fog color. The default value is Color.TransparentBlack.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogDensity">
      <summary>Gets or sets the fog density for pixel or vertex fog used in exponential fog modes. The default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogEnable">
      <summary>Enables or disables fog blending. The default is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogEnd">
      <summary>Gets or sets the depth at which pixel or vertex fog effects end for linear fog mode. The default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogStart">
      <summary>Gets or sets the depth at which pixel or vertex fog effects begin for linear fog mode. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogTableMode">
      <summary>Gets or sets the fog formula to use for pixel fog. The default is None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogVertexMode">
      <summary>Gets or sets the fog formula to use for vertex fog. The default is FogMode.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.MultiSampleAntiAlias">
      <summary>Enables or disables multisample antialiasing. The default is true.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.MultiSampleMask">
      <summary>Gets or sets a bitmask controlling modification of the samples in a multisample render target. The default is 0xffffffff.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSize">
      <summary>Gets or sets the size to use for point size computation in cases where point size is not specified for each vertex. The default value is the value a driver returns. If a driver returns 0 or 1, the default value is 64, which allows software point size emulation. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSizeMax">
      <summary>Gets or sets the maximum size of point primitives. The default is 64.0f.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSizeMin">
      <summary>Gets or sets the minimum size of point primitives. The default is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSpriteEnable">
      <summary>Enables or disables full texture mapping on each point. The default is false. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.RangeFogEnable">
      <summary>Gets or sets enabling of range-based vertex fog. The default value is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ReferenceAlpha">
      <summary>Specifies a reference alpha value against which pixels are tested when alpha testing is enabled. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ReferenceStencil">
      <summary>Specifies a reference value to use for the stencil test. The default is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ScissorTestEnable">
      <summary>Enables or disables scissor testing. The default is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SeparateAlphaBlendEnabled">
      <summary>Enables or disables the separate blend mode for the alpha channel. The default is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SlopeScaleDepthBias">
      <summary>Gets or sets a value used to determine how much bias can be applied to coplanar primitives to reduce flimmering z-fighting. The default is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SourceBlend">
      <summary>Gets or sets the color blending factor. This factor represents a value by which to multiply the source pixel color before adding it to the destination pixel to produce a color that is a blend of the two. The default is Blend.One. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails. The default is StencilOperation.Keep. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilEnable">
      <summary>Gets or sets stencil enabling. The default is false. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails. The default is StencilOperation.Keep. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilFunction">
      <summary>Gets or sets the comparison function for the stencil test. The default is CompareFunction.Always. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilMask">
      <summary>Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is Int32.MaxValue. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes. The default is StencilOperation.Keep. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilWriteMask">
      <summary>Gets or sets the write mask applied to values written into the stencil buffer. The default mask is Int32.MaxValue. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.TwoSidedStencilMode">
      <summary>Enables or disables two-sided stenciling. The default is false. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap0">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap1">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap10">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap11">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap12">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap13">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap14">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap15">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap2">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap3">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap4">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap5">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap6">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap7">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap8">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap9">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates. The default value for this render state is TextureWrapCoordinates.Zero (wrapping disabled in all directions). Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget">
      <summary>Represents a resource that will be written to at the end of a render pass. This is the base class for RenderTarget2D and RenderTargetCube. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the RenderTarget and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs when content is about to be lost on a GraphicsDevice.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Format">
      <summary>Gets the format of the render target.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.GraphicsDevice">
      <summary>Gets the graphics device associated with this render target resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Height">
      <summary>Gets the height, in pixels, of this render target.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.IsContentLost">
      <summary>Gets the current state of the content on a device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.MultiSampleQuality">
      <summary>Gets the number of quality stops available for a given multisample type.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.MultiSampleType">
      <summary>Gets the levels of full-scene multisampling that the device can apply.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Name">
      <summary>Gets the name of this render-target resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.RenderTargetUsage">
      <summary>Gets or sets render target usage flags.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Tag">
      <summary>Gets the resource tags for this render target.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Width">
      <summary>Gets the width, in pixels, of this render target.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTarget.ContentLost">
      <summary>Occurs when resources are lost (for example, when the current device is lost).</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTarget.Disposing">
      <summary>Occurs when RenderTarget.Dispose Method is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D">
      <summary>Represents a 2D texture resource that will be written to at the end of a render pass. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of this class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target. Use CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of RenderTarget2D with the specified values. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target. Use CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="usage">Options identifying the behaviors of this render target resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32)">
      <summary>Initializes a new instance of this class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target. Use CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply. You can use graphicsDevice.PresentationParameters.MultiSampleType to get the MultiSampleType of the back buffer.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type. You can use graphicsDevice.PresentationParameters.MultiSampleQuality to get the multisample quality of the back buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of RenderTarget2D with the specified values. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target. Use CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply. You can use graphicsDevice.PresentationParameters.MultiSampleType to get the MultiSampleType of the back buffer.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type. You can use graphicsDevice.PresentationParameters.MultiSampleQuality to get the multisample quality of the back buffer.</param>
      <param name="usage">Options identifying the behaviors of this render target resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.GetTexture">
      <summary>Gets the 2D texture associated with this render target.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube">
      <summary>Represents a cubic texture resource that will be written to at the end of a render pass. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of this class.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of this class.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.</param>
      <param name="format">Surface format of the render target.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32)">
      <summary>Initializes a new instance of this class.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.</param>
      <param name="format">Surface format of the render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of RenderTargetCube.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.</param>
      <param name="format">Surface format of the render target.</param>
      <param name="multiSampleType">Levels of full-scene multisampling that the device can apply.</param>
      <param name="multiSampleQuality">Number of quality stops available for a given multisample type.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.GetTexture">
      <summary>Gets a copy of the cube texture associated with this render target.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
      <summary>Determines how render target data is used once a new render target is set. Reference page contains links to related conceptual articles.</summary>
      <param name="DiscardContents">Always clears the render target data.</param>
      <param name="PlatformContents">Either clears or keeps the data, depending on the current platform. On Xbox 360, the render target will discard contents. On PC, the render target will discard if multisampling is enabled, and preserve the contents if not.</param>
      <param name="PreserveContents">Always keeps the render target data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResolveTexture2D">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes an empty instance of ResolveTexture2D.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, width is set to 1.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, height is set to 1.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If numberLevels is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures. Use LevelCount to see the number of levels generated.</param>
      <param name="format">A SurfaceFormat value specifying the requested pixel format for the texture. The returned texture may be of a different format if the device does not support the requested format. Applications should check the format of the returned texture to ensure that it matches the requested format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs after content is lost from a graphics device failure, allowing an application to re-create all resources.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.IsContentLost">
      <summary>Determines if the render target data has been lost due to a lost device event.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.ContentLost">
      <summary>Occurs when the render target data is lost due to a lost device event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs">
      <summary>Contains event data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
      <summary>The object raising the event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs">
      <summary>Arguments for a ResourceDestroyed event.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
      <summary>Gets the name of the destroyed resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
      <summary>Gets the resource manager tag of the destroyed resource.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceType">
      <summary>Defines resource types.</summary>
      <param name="DepthStencilBuffer">A depth stencil buffer resource.</param>
      <param name="IndexBuffer">An index buffer resource.</param>
      <param name="RenderTarget">A render target resource.</param>
      <param name="Texture2D">A 2-dimensional texture resource.</param>
      <param name="Texture3D">A 3-dimensional texture resource.</param>
      <param name="Texture3DVolume">A 3-D volume texture resource.</param>
      <param name="TextureCube">A cube texture resource.</param>
      <param name="VertexBuffer">A vertex buffer resource.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerState">
      <summary>Contains sampler states for the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SamplerState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressU">
      <summary>Gets or sets the texture-address mode for the u-coordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressV">
      <summary>Gets or sets the texture-address mode for the v-coordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressW">
      <summary>Gets or sets the texture-address mode for the w-coordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.BorderColor">
      <summary>Gets or sets the border color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MagFilter">
      <summary>Gets or sets a magnification filter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxAnisotropy">
      <summary>Gets or sets the maximum anisotropy. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxMipLevel">
      <summary>Gets or sets the level of detail (LOD) index of the largest map to use.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MinFilter">
      <summary>Gets or sets a minification filter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipFilter">
      <summary>Gets or sets a mipmap filter to use during minification.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipMapLevelOfDetailBias">
      <summary>Gets or sets the mipmap level of detail (LOD) bias. The default value is 0.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerStateCollection">
      <summary>Collection of SamplerState objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerStateCollection.Item(System.Int32)">
      <summary>Gets a specific SamplerState object using an index value.</summary>
      <param name="index">Index of the object to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SaveStateMode">
      <summary>Defines options for saving the graphics device state before and after an effect technique is applied.</summary>
      <param name="None">No device state is saved when calling Begin or restored when calling End.</param>
      <param name="SaveState">Save all device state when calling Begin and restore device state when calling End.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
      <summary>Describes whether existing buffer data will be overwritten or discarded during a SetData operation.</summary>
      <param name="Discard">The SetData operation will discard all existing buffer data. The operation will overwrite (with a write-only operation) every location within the locked surface. This is a valid option when using dynamic textures, dynamic vertex buffers, and dynamic index buffers. You may not use this option to update a portion of a surface. For vertex and index buffers, the SetData operation will discard the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall. For textures, the SetData operation will overwrite (with a write-only operation) every location within the region being locked.</param>
      <param name="None">Portions of existing data in the buffer may be overwritten during this operation.</param>
      <param name="NoOverwrite">The SetData operation will not overwrite existing data in the vertex and index buffers. Specifying this option allows the driver to return immediately from a SetData operation and continue rendering.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderCompiler">
      <summary>Compiles and decompiles high-level shader language (HLSL) shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a stream containing shader assembly code (ASM).</summary>
      <param name="shaderSourceCode">Stream that contains the shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">Target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a file containing shader assembly code (ASM).</summary>
      <param name="shaderFileName">Name of the file containing the compiled shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">Target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a stream containing shader assembly code (ASM), specifying the number of bytes in the stream.</summary>
      <param name="shaderSourceCode">Stream that contains the shader data.</param>
      <param name="numberBytes">The number of bytes in shaderSourceCode.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">Target platform for the compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a string containing shader assembly code (ASM).</summary>
      <param name="shaderSourceCode">String that contains the shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">Target platform for compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a stream containing the shader source code.</summary>
      <param name="shaderSourceCode">Stream that contains the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled.</param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="platform">The target platform for compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from file containing the shader source code.</summary>
      <param name="shaderFileName">Name of the file containing the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled.</param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="platform">The target platform for compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a stream containing the shader source code, specifying the number of bytes in the stream.</summary>
      <param name="shaderSourceCode">Stream that contains the shader source code.</param>
      <param name="numberBytes">The number of bytes in shaderSourceCode.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled.</param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="platform">The target platform for compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a string containing the shader source code.</summary>
      <param name="shaderSourceCode">String that contains the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled.</param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="platform">Target platform for compilation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.Disassemble(System.Byte[],System.Boolean,System.String)">
      <summary>Disassembles a shader.</summary>
      <param name="shaderCode">The shader byte code to disassemble.</param>
      <param name="enableColorCode">[MarshalAsAttribute(U1)] Specifies whether to enable color coding to make the disassembly easier to read.</param>
      <param name="comments">A comment string to include at the top of the shader.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstant">
      <summary>Describes a shader constant.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean)">
      <summary>Sets the value of a ShaderConstant to a Boolean.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">[MarshalAsAttribute(U1)] Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean[])">
      <summary>Sets the value of a ShaderConstant to an array of Boolean objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>Sets the value of a ShaderConstant to an Int32.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32[])">
      <summary>Sets the value of a ShaderConstant to an array of Int32 objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of a ShaderConstant to a Matrix.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of a ShaderConstant to an array of Matrix objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Quaternion)">
      <summary>Sets the value of a ShaderConstant to a Quaternion.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Quaternion[])">
      <summary>Sets the value of a ShaderConstant to an array of Quaternion objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
      <summary>Sets the value of a ShaderConstant to a Single.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[])">
      <summary>Sets the value of a ShaderConstant to an array of Single objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector2)">
      <summary>Sets the value of a ShaderConstant to a Vector2</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector2[])">
      <summary>Sets the value of a ShaderConstant to an array of Vector2 objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector3)">
      <summary>Sets the value of a ShaderConstant to a Vector3.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector3[])">
      <summary>Sets the value of a ShaderConstant to an array of Vector3 objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant/</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the value of a ShaderConstant to a Vector4.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets the value of a ShaderConstant to an array of Vector4 objects.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">Value to assign to the ShaderConstant.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValueTranspose(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of a ShaderConstant to an matrix.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">The matrix to set the ShaderConstant to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValueTranspose(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of a ShaderConstant to an array of matrices.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">The array of values to set the ShaderConstant to.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ColumnCount">
      <summary>Gets the number of columns in the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ElementCount">
      <summary>Gets the number of elements in the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.Name">
      <summary>Gets the name of the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ParameterClass">
      <summary>Gets the EffectParameterClass of the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ParameterType">
      <summary>Gets the EffectParameterType of the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegisterCount">
      <summary>Gets the number of registers that contain data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegisterIndex">
      <summary>Gets the index of the ShaderConstant in the constant table.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegisterSet">
      <summary>Gets the data type of the shader register.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RowCount">
      <summary>Gets the number of rows in the ShaderConstant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.SamplerIndex">
      <summary>Gets the sampler index number of the ShaderConstant from the constant table.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.StructureMemberCount">
      <summary>Gets the number of structure member subparameters.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection">
      <summary>Manipulates a collection of ShaderConstant objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the ShaderConstantCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Count">
      <summary>Gets the number of ShaderConstant objects in this ShaderConstantCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Item(System.Int32)">
      <summary>Gets a specific ShaderConstant object using an index value.</summary>
      <param name="index">Index of the ShaderConstant to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Item(System.String)">
      <summary>Gets a specific ShaderConstant object using an index value.</summary>
      <param name="name">Name of the ShaderConstant to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstantTable">
      <summary>Contains the variables that are used by high-level language shaders and effects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the ShaderConstantTable class.</summary>
      <param name="code">The shader byte code.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the ShaderConstantTable and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.SetDefaults(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Sets the constants in the ShaderConstantTable to their default values. The default values are declared in the variable declarations in the shader.</summary>
      <param name="device">The GraphicsDevice associated with the ShaderConstantTable.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Constants">
      <summary>Gets a collection of the constants in the ShaderConstantTable.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Creator">
      <summary>Gets the name of the constant table creator.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Version">
      <summary>Gets the shader version.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderProfile">
      <summary>Defines vertex and pixel shader versions. Reference page contains links to related code samples.</summary>
      <param name="PS_1_1">Pixel shader version ps_1_1.</param>
      <param name="PS_1_2">Pixel shader version ps_1_2.</param>
      <param name="PS_1_3">Pixel shader version ps_1_3.</param>
      <param name="PS_1_4">Pixel shader version ps_1_4.</param>
      <param name="PS_2_0">Pixel shader version ps_2_0.</param>
      <param name="PS_2_A">Pixel shader version ps_2_a.</param>
      <param name="PS_2_B">Pixel shader version ps_2_b.</param>
      <param name="PS_2_SW">Pixel software shader version ps_2_sw.</param>
      <param name="PS_3_0">Pixel shader version ps_3_0.</param>
      <param name="Unknown">Unknown pixel shader version.</param>
      <param name="VS_1_1">Vertex shader version v_1_1.</param>
      <param name="VS_2_0">Vertex shader version v_2_0.</param>
      <param name="VS_2_A">Vertex shader version v_2_a.</param>
      <param name="VS_2_SW">Vertex software shader version v_2_sw.</param>
      <param name="VS_3_0">Vertex shader version vs_3_0.</param>
      <param name="XPS_3_0">Xbox microcode assembly pixel shader version xps_3_0. Microcode assembly language supports a superset of the ps_3_0 and vs_3_0 specifications defined by Direct3D 9.0 for Windows. It does not support earlier Direct3D vertex and pixel shader specifications.</param>
      <param name="XVS_3_0">Xbox microcode assembly vertex shader version xvs_3_0. Microcode assembly language supports a superset of the ps_3_0 and vs_3_0 specifications defined by Direct3D 9.0 for Windows. It does not support earlier Direct3D vertex and pixel shader specifications.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderRegisterSet">
      <summary>Defines the data type of a shader register.</summary>
      <param name="Boolean">Boolean value.</param>
      <param name="Float4">4D floating-point number.</param>
      <param name="Int4">4D integer number.</param>
      <param name="Sampler">The register contains 4D sampler data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderSemantic">
      <summary>Semantics map a parameter to vertex or pixel shader registers. They can also be optional descriptive strings attached to non-register parameters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderSemantic.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderSemantic.UsageIndex">
      <summary>Gets or sets options that modify how the usage is interpreted. The usage and usage index make up a vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderSemantic.VertexElementUsage">
      <summary>Gets or sets options that identify how resources are used.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
      <summary>Enables a group of sprites to be drawn using the same settings. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of the class, which enables a group of sprites to be drawn using the same settings. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device where sprites will be drawn.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin">
      <summary>Prepares the graphics device for drawing sprites. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode)">
      <summary>Prepares the graphics device for drawing sprites with specified blending options. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SaveStateMode)">
      <summary>Prepares the graphics device for drawing sprites with specified blending, sorting, and render state options. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
      <param name="sortMode">Sorting options to use when rendering.</param>
      <param name="stateMode">Rendering state options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SaveStateMode,Microsoft.Xna.Framework.Matrix)">
      <summary>Prepares the graphics device for drawing sprites with specified blending, sorting, and render state options, and a global transform matrix. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
      <param name="sortMode">Sorting options to use when rendering.</param>
      <param name="stateMode">Rendering state options.</param>
      <param name="transformMatrix">A matrix to apply to position, rotation, scale, and depth data passed to Draw.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination rectangle, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination and source rectangles, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle the sprite will be scaled to fit.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination, and source rectangles, color tint, rotation, origin, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back). You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, optional source rectangle, color tint, rotation, origin, scale, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back). You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, color tint, rotation, origin, scale, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply before rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back). You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, and effects. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, effects, and depth. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, and effects. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, effects, and depth. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
      <summary>Flushes the sprite batch and restores the device state to how it was before Begin was called. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.GraphicsDevice">
      <summary>Gets the graphics device associated with this SpriteBatch.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Name">
      <summary>Gets or sets the name of this sprite batch.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Tag">
      <summary>Gets or sets an object that uniquely identifies this sprite batch.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SpriteBatch.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBlendMode">
      <summary>The following flags are used to specify sprite blending rendering options to the flags parameter in Begin: Reference page contains links to related code samples.</summary>
      <param name="Additive">Enable additive blending.</param>
      <param name="AlphaBlend">Enable alpha blending.</param>
      <param name="None">No blending specified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
      <summary>Defines sprite mirroring options.</summary>
      <param name="FlipHorizontally">Rotate 180 degrees about the Y axis before rendering.</param>
      <param name="FlipVertically">Rotate 180 degrees about the X axis before rendering.</param>
      <param name="None">No rotations specified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteFont">
      <summary>Represents a font texture. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)">
      <summary>Returns the height and width of a given string as a Vector2.</summary>
      <param name="text">The string to measure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
      <summary>Returns the height and width of a mutable string as a Vector2.</summary>
      <param name="text">The mutable (read/write) string to measure.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Characters">
      <summary>Gets a collection of all the characters that are included in the font.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.DefaultCharacter">
      <summary>Gets or sets the default character for the font.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.LineSpacing">
      <summary>The line spacing, in pixels, of this font.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Spacing">
      <summary>Gets or sets the spacing of the font characters.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode">
      <summary>Defines sprite sort-rendering options.</summary>
      <param name="BackToFront">Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.</param>
      <param name="Deferred">Sprites are not drawn until End is called. End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to Draw were received. This mode allows Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.</param>
      <param name="FrontToBack">Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.</param>
      <param name="Immediate">Begin will apply new graphics device settings, and sprites will be drawn within each Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings. Immediate mode is faster than Deferred mode.</param>
      <param name="Texture">Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StateBlock">
      <summary>Encapsulates render states. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of the StateBlock class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The device to associate with the state block.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Apply">
      <summary>Applies the state block to the current GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Capture">
      <summary>Captures the current value of states that are included in a state block.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.raise_ContentLost(System.Object,System.EventArgs)">
      <summary>Occurs when content is about to be lost due to a device reset.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this StateBlock.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.IsContentLost">
      <summary>Gets the current state of the content on a device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.Name">
      <summary>Gets or sets the name of the StateBlock.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.Tag">
      <summary>Gets or sets the resource manager tag for the StateBlock.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.StateBlock.ContentLost">
      <summary>Occurs when resources are lost (for example, when the current device is lost).</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.StateBlock.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
      <summary>Defines stencil buffer operations. Reference page contains links to related conceptual articles.</summary>
      <param name="Decrement">Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</param>
      <param name="DecrementSaturation">Decrements the stencil-buffer entry, clamping to 0.</param>
      <param name="Increment">Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</param>
      <param name="IncrementSaturation">Increments the stencil-buffer entry, clamping to the maximum value.</param>
      <param name="Invert">Inverts the bits in the stencil-buffer entry.</param>
      <param name="Keep">Does not update the stencil-buffer entry. This is the default value.</param>
      <param name="Replace">Replaces the stencil-buffer entry with a reference value.</param>
      <param name="Zero">Sets the stencil-buffer entry to 0.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
      <summary>Defines various types of surface formats. Reference page contains links to related code samples.</summary>
      <param name="Alpha8">(Unsigned format) 8-bit alpha only.</param>
      <param name="Bgr233">(Unsigned format) 8-bit BGR texture format using 2 bits for blue, 3 bits for green, and 3 bits for red.</param>
      <param name="Bgr24">(Unsigned format) 24-bit BGR pixel format with 8 bits per channel.</param>
      <param name="Bgr32">(Unsigned format) 32-bit BGR pixel format, where 8 bits are reserved for each color.</param>
      <param name="Bgr444">(Unsigned format) 16-bit BGR pixel format where 4 bits are reserved for each color.</param>
      <param name="Bgr555">(Unsigned format) 16-bit BGR pixel format where 5 bits are reserved for each color.</param>
      <param name="Bgr565">(Unsigned format) 16-bit BGR pixel format with 5 bits for blue, 6 bits for green, and 5 bits for red.</param>
      <param name="Bgra1010102">(Unsigned format) 32-bit pixel format using 10 bits each for blue, green, and red; and 2 bits for alpha.</param>
      <param name="Bgra2338">(Unsigned format) 16-bit BGRA format using 2 bits for blue, 3 bits each for red and green; and 8 bits for alpha.</param>
      <param name="Bgra4444">(Unsigned format) 16-bit BGRA pixel format with 4 bits for each channel.</param>
      <param name="Bgra5551">(Unsigned format) 16-bit BGRA pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</param>
      <param name="Color">(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</param>
      <param name="Depth15Stencil1">(Buffer format) 16-bit depth-buffer bit depth where 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</param>
      <param name="Depth16">(Buffer format) 16-bit depth-buffer bit depth.</param>
      <param name="Depth24">(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel.</param>
      <param name="Depth24Stencil4">(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel and 4 bits for the stencil channel.</param>
      <param name="Depth24Stencil8">(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel and 8 bits for the stencil channel.</param>
      <param name="Depth24Stencil8Single">(Buffer format) A non-lockable format that contains 24 bits of depth (in a 24-bit floating-point format − 20e4) and 8 bits of stencil.</param>
      <param name="Depth32">(Buffer format) 32-bit depth-buffer bit depth.</param>
      <param name="Dxt1">DXT1 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</param>
      <param name="Dxt2">DXT2 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</param>
      <param name="Dxt3">DXT3 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</param>
      <param name="Dxt4">DXT4 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</param>
      <param name="Dxt5">DXT5 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</param>
      <param name="HalfSingle">(Floating-point format) 16-bit float format using 16 bits for the red channel.</param>
      <param name="HalfVector2">(Floating-point format) 32-bit float format using 16 bits for the red channel and 16 bits for the green channel.</param>
      <param name="HalfVector4">(Floating-point format) 64-bit float format using 16 bits for each channel (alpha, blue, green, red).</param>
      <param name="Luminance16">(Unsigned format) 16-bit luminance only.</param>
      <param name="Luminance8">(Unsigned format) 8-bit luminance only.</param>
      <param name="LuminanceAlpha16">(Unsigned format) 16-bit using 8 bits each for alpha and luminance.</param>
      <param name="LuminanceAlpha8">(Unsigned format) 8-bit using 4 bits each for alpha and luminance.</param>
      <param name="Multi2Bgra32">MultiElement texture (not compressed)</param>
      <param name="NormalizedAlpha1010102">(Mixed format) 32-bit bump-map format using 2 bits for alpha and 10 bits each for w, v, and u.</param>
      <param name="NormalizedByte2">(Signed format) 16-bit bump-map format using 8 bits each for u and v data.</param>
      <param name="NormalizedByte2Computed">(Signed format) 16-bit normal compression format. The texture sampler computes the C channel from: C = sqrt(1 − U2 − V2).</param>
      <param name="NormalizedByte4">(Signed format) 32-bit bump-map format using 8 bits for each channel.</param>
      <param name="NormalizedLuminance16">(Mixed format) 16-bit bump-map format with luminance using 6 bits for luminance, and 5 bits each for v and u.</param>
      <param name="NormalizedLuminance32">(Mixed format) 32-bit bump-map format with luminance using 8 bits for each channel.</param>
      <param name="NormalizedShort2">(Signed format) 32-bit bump-map format using 16 bits for each channel.</param>
      <param name="NormalizedShort4">(Signed format) 64-bit bump-map format using 16 bits for each component.</param>
      <param name="Palette8">(Unsigned format) 8-bit color indexed.</param>
      <param name="PaletteAlpha16">(Unsigned format) 8-bit color indexed with 8 bits of alpha.</param>
      <param name="Rg32">(Unsigned format) 32-bit pixel format using 16 bits each for red and green.</param>
      <param name="Rgb32">(Unsigned format) 32-bit RGB pixel format, where 8 bits are reserved for each color.</param>
      <param name="Rgba1010102">(Unsigned format) 32-bit RGBA pixel format using 10 bits for each color and 2 bits for alpha.</param>
      <param name="Rgba32">(Unsigned format) 32-bit RGBA pixel format with alpha, using 8 bits per channel.</param>
      <param name="Rgba64">(Unsigned format) 64-bit RGBA pixel format using 16 bits for each component.</param>
      <param name="Single">(IEEE format) 32-bit float format using 32 bits for the red channel.</param>
      <param name="Unknown">Surface format is unknown.</param>
      <param name="Vector2">(IEEE format) 64-bit float format using 32 bits for the red channel and 32 bits for the green channel.</param>
      <param name="Vector4">(IEEE format) 128-bit float format using 32 bits for each channel (alpha, blue, green, red).</param>
      <param name="VideoGrGb">A 16-bit packed RGB format analogous to VideoYuYv (U0Y0, V0Y1, U2Y2, and so on). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (R0G0, B0G1, R2G2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have PixelShader1xMaxValue set to a value capable of handling that range.</param>
      <param name="VideoRgBg">A 16-bit packed RGB format analogous to VideoUyVy (Y0U0, Y1V0, Y2U2, and so on). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (G0R0, G1B0, G2R2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have PixelShader1xMaxValue set to a value capable of handling that range.</param>
      <param name="VideoUyVy">YUY2 format (PC98 compliance)</param>
      <param name="VideoYuYv">VideoYuYv format (PC98 compliance)</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SwapEffect">
      <summary>Defines how the device front buffer and back buffer are to be swapped when Present is called.</summary>
      <param name="Copy">This swap effect can be specified only for a swap chain that comprises a single back buffer. Whether the swap chain is windowed or full-screen, the runtime guarantees the semantics implied by a copy-based Present operation; specifically, that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based Present operation would. For a windowed swap chain, a Present operation causes the back buffer content to be copied immediately to the client area of the target window. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so tearing effects may be observed. For a full-screen swap chain, the runtime uses a combination of flip and copy operations, which are supported by hidden back buffers if necessary, to accomplish the Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the PresentInterval.Immediate flag is the only exception. (For more information, see PresentationInterval.) In this case, a Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</param>
      <param name="Default">The default swap effect is Discard.</param>
      <param name="Discard">When a swap chain is created with a swap effect of Flip or Copy, the runtime guarantees that a Present operation will not affect the content of any of the back buffers. However, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application can use the Discard swap effect to avoid these overheads and to enable the display driver to choose the most efficient presentation technique for the swap chain. Discard is also the only swap effect that can be used when specifying a value other than None for MultiSampleType. Like a swap chain that uses Flip, a swap chain that uses Discard might include more than one back buffer. The swap chain is essentially a queue where 0 always indexes the back buffer that will be displayed by the next Present operation and from which buffers are discarded once they have been displayed. An application that uses this swap effect should update an entire back buffer before invoking a Present operation that displays it. The debug version of the runtime overwrites the contents of discarded back buffers with random data, to enable developers to verify that their applications are updating the entire back buffer surface correctly. For a full-screen swap chain, the presentation rate is determined by the value assigned to PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations, and always occurs immediately.</param>
      <param name="Flip">The swap chain might include multiple back buffers and is essentially a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When Present is invoked, the queue is rotated so that the front buffer becomes the back buffer (n - 1), while the back buffer 0 becomes the new front buffer. For a full-screen swap chain, the presentation rate is determined by the value assigned to the PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the flipping is implemented by means of copy operations, and the presentation always occurs immediately.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture">
      <summary>Represents a texture resource. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Creates a texture resource from a stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream that contains the texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream that contains the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Loads a Texture from a file.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate the texture with.</param>
      <param name="textureStream">The stream to load the texture from.</param>
      <param name="creationParameters">Parameters to use when creating the Texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Loads a Texture from a file.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate the texture with.</param>
      <param name="textureStream">The stream to load the texture from.</param>
      <param name="numberBytes">The number of bytes in the stream.</param>
      <param name="creationParameters">Parameters to use when creating the Texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a texture resource from a file, specifying the width, height, and depth of the texture in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="width">The width, in pixels, of the texture.</param>
      <param name="height">The height, in pixels, of the texture.</param>
      <param name="depth">The depth, in pixels, of the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GenerateMipMaps(Microsoft.Xna.Framework.Graphics.TextureFilter)">
      <summary>Request generation of mipmap sublevels for a render target texture.  Reference page contains code sample.</summary>
      <param name="filterType">Determines how the texture will be filtered for each mipmap level.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Loads texture creation parameters from a stream.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with the texture creation parameters.</param>
      <param name="textureStream">Stream containing the texture creation data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Loads texture creation parameters from a file.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with the texture creation parameters.</param>
      <param name="filename">The name of the file to load the creation parameters from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Loads texture creation parameters from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with the texture creation parameters.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(System.IO.Stream)">
      <summary>Retrieves information about a given image file stream.</summary>
      <param name="textureStream">Stream containing the image data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(System.String)">
      <summary>Retrieves information about a given image file.</summary>
      <param name="filename">File name of image.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(System.IO.Stream,System.Int32)">
      <summary>Retrieves information about a given image file stream, specifying the number of bytes in the stream.</summary>
      <param name="textureStream">Stream containing the image data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Save(System.String,Microsoft.Xna.Framework.Graphics.ImageFileFormat)">
      <summary>Saves a texture to a file.</summary>
      <param name="filename">The file name of the destination image.</param>
      <param name="format">The file format to use when saving. This function supports saving to all ImageFileFormat formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelCount">
      <summary>Gets the number of texture levels in a multilevel texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelOfDetail">
      <summary />
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture2D">
      <summary>Represents a 2D grid of texels. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>Creates an uninitialized Texture2D resource of the specified dimensions. To initialize a Texture2D from an existing file, see the static method ContentManager.Load or Texture2D.FromFile.  Reference page contains code sample.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates an uninitialized Texture2D resource of the specified dimensions. To initialize a Texture2D from an existing file, see the static method ContentManager.Load or Texture2D.FromFile.  Reference page contains code sample.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="numberLevels">The number of levels in the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If numberLevels is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures. Use LevelCount to see the number of levels generated.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
      <param name="format">A SurfaceFormat value specifying the requested pixel format for the texture. The returned texture may be of a different format if the device does not support the requested format. Applications should check the format of the returned texture to ensure that it matches the requested format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the Texture2D and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Creates a texture resource from a stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a stream, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream and the texture creation parameters to use.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the volume texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32)">
      <summary>Creates a texture resource from a file, specifying the width and height of the texture in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="width">The width, in pixels, of the texture.</param>
      <param name="height">The height, in pixels, of the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[])">
      <summary>Copies texture data into an array.  Reference page contains code sample.</summary>
      <param name="data">The array to receive texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array.  Reference page contains code sample.</summary>
      <param name="data">The array to receive texture data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array.  Reference page contains code sample.</summary>
      <param name="level">The mipmap level to copy from.</param>
      <param name="rect">The section of the texture to copy. null indicates the data will be copied from the entire texture.</param>
      <param name="data">The array to receive texture data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy. The number of elements in the array must be equal to the size of the texture, which is Width × Height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy. This must be equal to the size of the texture, which is Width × Height.</param>
      <param name="options">Option that specifies whether existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture.  Reference page contains code sample.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed. null indicates the data will be copied over the entire texture.</param>
      <param name="data">The array of data to copy. If rect is null, the number of elements in the array must be equal to the size of the texture, which is Width × Height; otherwise, the number of elements in the array should equal the size of the rectangle specified.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Option that specifies whether existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Format">
      <summary>Gets the pixel format of this texture resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.TextureUsage">
      <summary>Gets the state of the related TextureUsage enumeration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture3D">
      <summary>Represents a 3D volume of texels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates an uninitialized volume texture resource of the given dimensions, specifying the memory management mode for the resource. To initialize a Texture3D from an existing file, see the static method ContentManager.Load or FromFile.</summary>
      <param name="graphicsDevice">The GraphicsDevice that will display the volume texture.</param>
      <param name="width">The width, in pixels, of the top-level of the volume texture. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent.</param>
      <param name="height">The height, in pixels, of the top-level of the volume texture. This value must be a power of two if the RequiresPower2 property of graphicsDevice is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent.</param>
      <param name="depth">The depth, in pixels, of the top-level of the volume texture. This value must be a power of two if the RequiresVolumeMapPower2 property of graphicsDevice is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If numberLevels is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures. Use LevelCount to see the number of levels generated.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
      <param name="format">The format of all levels in the volume texture resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the Texture3D and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Creates a volume texture resource from a stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the volume texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a volume texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Creates a volume texture resource from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a volume texture resource from a stream, specifying the parameters to use for the texture creation.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="creationParameters">Texture creation options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a volume texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a volume texture resource from a stream, specifying the number of bytes in the stream and the texture creation parameters to use.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the volume texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a volume texture resource from a file, specifying the width, height, and depth in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="width">The width, in pixels, of the texture.</param>
      <param name="height">The height, in pixels, of the texture.</param>
      <param name="depth">The depth, in pixels, of the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[])">
      <summary>Gets a copy of the texture data.</summary>
      <param name="data">An array to fill with data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the texture data, specifying the starting index and number of elements to copy.</summary>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the texture data, specifying the level and dimensions of the volume texture to copy.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(``0[])">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy. The number of elements in the array must be equal to the size of the texture, which is Width × Height × Depth.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture at mipmap level 0, specifying the starting index and number of elements to copy. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy. This must be equal to the size of the texture, which is Width × Height × Depth.</param>
      <param name="options">Option specifying if existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying the dimensions of the volume and the mipmap level where the data is to be placed. Reference page contains links to related conceptual articles.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">The array of data to copy. The number of elements in the array should be equal to the size of the box where the data will be placed.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Option specifying whether existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Depth">
      <summary>Gets the depth of this volume texture resource, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Format">
      <summary>Gets the pixel format for this texture resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.TextureUsage">
      <summary>Gets the state of the related TextureUsage enumeration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
      <summary>Defines constants that describe supported texture-addressing modes. Reference page contains links to related conceptual articles.</summary>
      <param name="Border">Texture coordinates outside the range [0.0, 1.0] are set to the border color.</param>
      <param name="Clamp">Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</param>
      <param name="Mirror">Similar to Wrap, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</param>
      <param name="MirrorOnce">Similar to Mirror and Clamp. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full MirrorOnce texture-addressing mode is not necessary, but the data is symmetrical around the one axis.</param>
      <param name="Wrap">Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCollection">
      <summary>Represents a collection of Texture objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCollection.Item(System.Int32)">
      <summary>Gets or sets the Texture at the specified sampler number.</summary>
      <param name="index">Zero-based sampler number. Textures are bound to samplers; samplers define sampling state such as the filtering mode and the address wrapping mode. Programmable shaders reference textures using this sampler number.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCreationParameters">
      <summary>Describes the parameters to use when initializing a new instance of a texture.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.FilterOptions,Microsoft.Xna.Framework.Graphics.FilterOptions)">
      <summary>Creates a new instance of TextureCreationParameters. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the texture.</param>
      <param name="height">Height of the texture.</param>
      <param name="depth">Depth of the texture.</param>
      <param name="mipLevels">Number of mip levels in the texture.</param>
      <param name="format">The format of the texture.</param>
      <param name="textureUsage">A set of options identifying the behaviors of this texture resource.</param>
      <param name="colorKey">The color key of the texture.</param>
      <param name="filter">A set of options controlling how the image is filtered.</param>
      <param name="mipFilter">A set of options controlling how mipmaps are filtered.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the TextureCreationParameters.</summary>
      <param name="obj">The Object to compare with the current TextureCreationParameters.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Equality(Microsoft.Xna.Framework.Graphics.TextureCreationParameters,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Determines whether two instances of TextureCreationParameters are equal.</summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Inequality(Microsoft.Xna.Framework.Graphics.TextureCreationParameters,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Determines whether two instances of TextureCreationParameters are not equal.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ToString">
      <summary>Returns a String that represents the current TextureCreationParameters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ColorKey">
      <summary>Gets or sets the color value to replace with transparent black.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Default">
      <summary>Gets the default texture creation parameters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Depth">
      <summary>Gets or sets the depth to create the Texture with.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Filter">
      <summary>Gets or sets a set of options controlling how the image is filtered.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Format">
      <summary>Gets or sets the format of the texture to be created.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Height">
      <summary>Gets or sets the height to create a Texture with.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.MipFilter">
      <summary>Gets or sets a set of options controlling how mipmaps are filtered.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.MipLevels">
      <summary>Gets or sets the number of mip levels to create a Texture with.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.TextureUsage">
      <summary>Gets the state of the related TextureUsage enumeration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Width">
      <summary>Gets or sets the width to create a Texture with.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCube">
      <summary>Represents a set of six 2D textures, one for each face of a cube. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates an uninitialized TextureCube resource of the specified dimensions. To initialize a Texture2D from an existing file, see the static method ContentManager.Load or FromFile.</summary>
      <param name="graphicsDevice">The GraphicsDevice that will display the cube texture.</param>
      <param name="size">The size of the edges of all the top-level faces of the cube texture. The pixel dimensions of subsequent levels of each face will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0 (zero), 1 will be taken instead.</param>
      <param name="numberLevels">The number of downsampled surfaces to create for each face of the cube texture when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size. The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain. If numberLevels is zero, all cube texture sublevels down to 1×1 pixels will be generated for each face for hardware that supports mipmapped cube textures. Use LevelCount to see the number of levels generated.</param>
      <param name="usage">A set of options identifying the behaviors of this resource.</param>
      <param name="format">The format of all levels in the cube texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the TextureCube and optionally releases the managed resources.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Creates a cube texture resource from a stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a cube texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a stream, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the texture data.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32)">
      <summary>Creates a cube texture resource from a file, specifying the width and height of the texture in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="size">Width and height of the cube texture, in pixels.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream and the texture creation parameters to use.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream containing the volume texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
      <summary>Returns a copy of the texture data.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array into which to copy the data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[],System.Int32,System.Int32)">
      <summary>Returns a copy of the texture data, specifying the start index and number of elements in the vertex buffer.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array into which to copy the data.</param>
      <param name="startIndex">Index in the array at which to begin the copy.</param>
      <param name="elementCount">Number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Returns a copy of the texture data, specifying the start index, staring offset, number of elements, region to copy, and level where the data is to be placed.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed. null indicates the data will be copied over the entire texture.</param>
      <param name="data">The array into which to copy the data.</param>
      <param name="startIndex">Index in the array at which to begin the copy.</param>
      <param name="elementCount">Number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array of data to copy. The number of elements in the array must be equal to the size of the texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture at mipmap level 0, specifying a start offset. Reference page contains links to related conceptual articles.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">Start offset in the array.</param>
      <param name="elementCount">Number of elements in the array. This must be equal to the size of the texture.</param>
      <param name="options">Option specifying if existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying a start offset, mipmap level, and subregion to copy. Reference page contains links to related conceptual articles.</summary>
      <param name="faceType">The cube map face type.</param>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed. null indicates the data will be copied over the entire texture.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">Start offset in the array.</param>
      <param name="elementCount">Number of elements in the array. The number of elements to copy must be equal to the size of the texture.</param>
      <param name="options">Option specifying if existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.ToString">
      <summary>Returns a String that represents the current TextureCube.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Format">
      <summary>Gets the pixel format for this texture resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Size">
      <summary>Gets the width and height of this texture resource, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.TextureUsage">
      <summary>Gets the state of the related TextureUsage enumeration.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
      <summary>Defines how a texture will be filtered as it is minified for each mipmap level. Reference page contains links to related conceptual articles.</summary>
      <param name="Anisotropic">Anisotropic texture filtering used as a texture magnification or minification filter. This type of filtering compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.</param>
      <param name="GaussianQuad">A 4-sample Gaussian filter used as a texture magnification or minification filter.</param>
      <param name="Linear">Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2×2 area of texels surrounding the desired pixel is used. The texture filter used between mipmap levels is trilinear mipmap interpolation, in which the rasterizer performs linear interpolation on pixel color, using the texels of the two nearest mipmap textures.</param>
      <param name="None">Mipmapping disabled. The rasterizer uses the magnification filter instead.</param>
      <param name="Point">Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter used between mipmap levels is based on the nearest point; that is, the rasterizer uses the color from the texel of the nearest mipmap texture.</param>
      <param name="PyramidalQuad">A 4-sample tent filter used as a texture magnification or minification filter.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureInformation">
      <summary>Encapsulates information describing texture resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of the TextureInformation class.</summary>
      <param name="width">Width of the texture, in pixels.</param>
      <param name="height">Height of the texture, in pixels.</param>
      <param name="depth">Depth of the texture, in pixels.</param>
      <param name="mipLevels">Number of mip levels in original image.</param>
      <param name="format">Describes the data in the original image.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the TextureInformation.</summary>
      <param name="obj">The Object to compare with the current TextureInformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.op_Equality(Microsoft.Xna.Framework.Graphics.TextureInformation,Microsoft.Xna.Framework.Graphics.TextureInformation)">
      <summary>Determines whether two instances of TextureInformation are equal.</summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.op_Inequality(Microsoft.Xna.Framework.Graphics.TextureInformation,Microsoft.Xna.Framework.Graphics.TextureInformation)">
      <summary>Determines whether two instances of TextureInformation are not equal.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Depth">
      <summary>Gets or sets the depth of a texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Format">
      <summary>Gets or sets the format of the texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Height">
      <summary>Gets or sets the height, in pixels, of a texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.ImageFormat">
      <summary>Gets the file format of the original image.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.MipLevels">
      <summary>Gets or sets the number of mip levels of a texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.ResourceType">
      <summary>Gets the type of this resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Width">
      <summary>Gets or sets the width, in pixels, of a texture.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureUsage">
      <summary>Specifies special usage of the texture data.</summary>
      <param name="AutoGenerateMipMap">The resource automatically generates mipmaps. Automatic generation of mipmaps is not supported for volume textures and depth stencil surfaces/textures.</param>
      <param name="Linear">(Xbox 360 only) Linear texture memory format. Linear formats are arranged in memory using a left-to-right and top-to-bottom layout (with pixels contiguous in memory for each row, and rows contiguous except for possible alignment padding). Use this format when doing dynamic CPU updates to textures where: You do not want the overhead of translating tile addresses using the CPU. Textures are not often referenced during the frame. Less efficient GPU performance is not a problem. This flag is valid only for texture creation on Xbox 360. It is ignored if used elsewhere. On Xbox, most formats are created as Tiled if it is applicable.</param>
      <param name="None">None.</param>
      <param name="Tiled">(Xbox 360 only) Tiled texture memory format. Tiled formats are arranged using a memory layout designed to maximize the cache coherency of texture fetches and balance the access workload of the memory controllers. The exact pixel arrangement of tiled formats varies based on the bit depth of the format; however, pixels that are close to one another spatially are located close to one another in memory. For example, two pixels adjacent to one another in a vertical column would be separated in memory by an entire row of pixels for a linear format, but could be separated by only a few bytes for a tiled format. The tiled texture format is usually more efficient than the linear texture format. This flag is valid only when used for texture creation on Xbox 360, and will be ignored if used elsewhere. On Xbox, most formats are created as Tiled if it is applicable.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureWrapCoordinates">
      <summary>Defines supported wrap coordinates. Reference page contains links to related conceptual articles.</summary>
      <param name="None">No texture wrap coordinates specified.</param>
      <param name="Zero">U texture wrapping (wrapping in the direction of the first dimension).</param>
      <param name="One">V texture wrapping (wrapping in the direction of the second dimension).</param>
      <param name="Two">W texture wrapping (wrapping in the direction of the third dimension).</param>
      <param name="Three">Texture wrapping in the direction of the fourth dimension.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBuffer">
      <summary>Represents a list of 3D vertices to be streamed to the graphics device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of VertexBuffer, specifying the size and usage.</summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="sizeInBytes">The number of bytes to allocate for this vertex buffer.</param>
      <param name="usage">Options identifying the behaviors of this vertex buffer resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of VertexBuffer, specifying the element count and usage.</summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="vertexType">The type of vertices in this vertex buffer.</param>
      <param name="elementCount">The number of elements in this vertex buffer.</param>
      <param name="usage">Options identifying the behaviors of this vertex buffer resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[])">
      <summary>Gets a copy of the vertex buffer data.</summary>
      <param name="data">The array into which to copy the vertex buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the vertex buffer data, specifying the start index and number of elements in the vertex buffer.</summary>
      <param name="data">The array into which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
      <summary>Gets a copy of the vertex buffer data, specifying the start index, starting offset, number of elements, and size of the vertex buffer elements.</summary>
      <param name="offsetInBytes">Starting offset.</param>
      <param name="data">The array into which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
      <param name="vertexStride">Size, in bytes, of an element in the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])">
      <summary>Sets the vertex buffer data.  Reference page contains code sample.</summary>
      <param name="data">The array from which to copy the vertex buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets the vertex buffer data.</summary>
      <param name="data">Array from which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
      <summary>Sets the vertex buffer data.</summary>
      <param name="offsetInBytes">Starting offset.</param>
      <param name="data">Array from which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements to copy.</param>
      <param name="vertexStride">Size, in bytes, of an element in the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage">
      <summary>Gets the state of the related BufferUsage enumeration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.SizeInBytes">
      <summary>Gets the size, in bytes, of this vertex buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
      <summary>Represents a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Initializes a new instance of the VertexDeclaration class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the vertex elements.</param>
      <param name="elements">An array of vertex elements.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
      <summary>Gets the vertex shader declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexStrideSize(System.Int32)">
      <summary>Gets the size of a vertex from the vertex declaration.</summary>
      <param name="stream">The zero-based stream index.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexStrideSize(Microsoft.Xna.Framework.Graphics.VertexElement[],System.Int32)">
      <summary>Gets the size of a vertex from the vertex declaration.</summary>
      <param name="elements">The vertex declaration.</param>
      <param name="stream">The zero-based stream index.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Name">
      <summary>Returns the name of this vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Tag">
      <summary>Returns the resource tags for this vertex declaration.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int16,System.Int16,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementMethod,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Byte)">
      <summary>Initializes a new instance of the VertexElement class.</summary>
      <param name="stream">Stream number (or index) to use.</param>
      <param name="offset">Offset (if any) from the beginning of the stream to the beginning of the vertex data.</param>
      <param name="elementFormat">One of several predefined types that define the vertex data size.</param>
      <param name="elementMethod">The tessellator processing method. These methods determine how the tessellator interprets/operates on the vertex data.</param>
      <param name="elementUsage">The intended use of the vertex data.</param>
      <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexElement.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
      <summary>Retrieves or sets the offset (if any) from the beginning of the stream to the beginning of the vertex data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Stream">
      <summary>Retrieves or sets the stream number (or index) to use.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
      <summary>Gets or sets the format of this vertex element.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementMethod">
      <summary>Gets or sets a value indicating which vertex data to calculate during tessellation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
      <summary>Gets or sets a value describing how the vertex element is to be used.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
      <summary>Defines vertex element formats.</summary>
      <param name="Single">Single-component, 32-bit floating-point, expanded to (float, 0, 0, 1).</param>
      <param name="Vector2">Two-component, 32-bit floating-point, expanded to (float, Float32 value, 0, 1).</param>
      <param name="Vector3">Three-component, 32-bit floating point, expanded to (float, float, float, 1).</param>
      <param name="Vector4">Four-component, 32-bit floating point, expanded to (float, float, float, float).</param>
      <param name="HalfVector2">Two-component, 16-bit floating point expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="HalfVector4">Four-component, 16-bit floating-point expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Rgba64">Normalized, four-component, unsigned short, expanded to (first byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Color">Four-component, packed, unsigned byte, mapped to 0 to 1 range. Input is in Int32 format (ARGB) expanded to (R, G, B, A).</param>
      <param name="Rgba32">Four-component byte with each byte normalized by dividing the component with 255.0f. This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Rg32">Normalized, two-component, unsigned short, expanded to (first byte/65535.0, second byte/65535.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="NormalizedShort2">Normalized, two-component, signed short, expanded to (first short/32767.0, second short/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="NormalizedShort4">Normalized, four-component, signed short, expanded to (first short/32767.0, second short/32767.0, third short/32767.0, fourth short/32767.0). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Normalized101010">Three-component, signed, 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</param>
      <param name="Short2">Two-component, signed short expanded to (value, value, 0, 1).</param>
      <param name="Short4">Four-component, signed short expanded to (value, value, value, value).</param>
      <param name="Byte4">Four-component, unsigned byte.</param>
      <param name="UInt101010">Three-component, unsigned, 10 10 10 format expanded to (value, value, value, 1).</param>
      <param name="Unused">Type field in the declaration is unused. This is designed for use with VertexElementMethod.UV and VertexElementMethod.LookUpPresampled.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementMethod">
      <summary>Defines the tessellator processing method for a vertex element.</summary>
      <param name="Default">Default value. The tessellator copies the vertex data (or the spline data if it is operating on a patch) without performing additional calculations on it. The input and output types can be any value. When the tessellator is used, this element is interpolated; otherwise, vertex data is copied into the input register.</param>
      <param name="LookUp">Looks up a displacement map. The input type can be VertexElementFormat.Vector2, VertexElementFormat.Vector3, or VertexElementFormat.Vector4. Only the .x and .y components are used for the texture map lookup. The output type is always VertexElementFormat.Single. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</param>
      <param name="LookUpPresampled">Looks up a presampled displacement map. The input type must be set to VertexElementFormat.Unused, and the stream index and stream offset must be set to 0. The output type for this operation is always VertexElementFormat.Single. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</param>
      <param name="UV">Copies out the u and v values at a point on the rectangle or triangle patch. This results in a 2D float. The input type must be set to VertexElementFormat.Unused; the output type is always VertexElementFormat.Vector2. The input stream and offset also are unused, but must be set to 0.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
      <summary>Defines usage for vertex elements.</summary>
      <param name="Binormal">Vertex binormal data.</param>
      <param name="BlendIndices">Blending indices data. (BlendIndices with UsageIndex = 0) specifies matrix indices for fixed-function vertex processing using indexed paletted skinning.</param>
      <param name="BlendWeight">Blending weight data. (BlendWeight with UsageIndex = 0) specifies the blend weights in fixed-function vertex processing.</param>
      <param name="Color">Vertex data contains diffuse or specular color. (Color with UsageIndex = 0) specifies the diffuse color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0. (Color with UsageIndex = 1) specifies the specular color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0.</param>
      <param name="Depth">Vertex data contains depth data.</param>
      <param name="Fog">Vertex data contains fog data. (Fog with UsageIndex = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</param>
      <param name="Normal">Vertex normal data. (Normal with UsageIndex = 0) specifies vertex normals for fixed-function vertex processing and the N-patch tessellator. (Normal with UsageIndex = 1) specifies vertex normals for fixed-function vertex processing for skinning.</param>
      <param name="PointSize">Point size data. (PointSize with UsageIndex = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</param>
      <param name="Position">Position data. (Position with UsageIndex = 0 ) specifies the nontransformed position in fixed-function vertex processing and the N-patch tessellator. (Position with UsageIndex = 1) specifies the nontransformed position in the fixed-function vertex shader for skinning.</param>
      <param name="Sample">Vertex data contains sampler data. (Sample with UsageIndex = 0) specifies the displacement value to look up. This flag can be used only with VertexElementMethod.LookUpPresampled or VertexElementMethod.LookUp.</param>
      <param name="Tangent">Vertex tangent data.</param>
      <param name="TessellateFactor">Single, positive floating-point value. (TessellateFactor with UsageIndex = 0) specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.</param>
      <param name="TextureCoordinate">Texture coordinate data. (TextureCoordinate, n) specifies texture coordinates in fixed-function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColor">
      <summary>Describes a custom vertex format structure that contains position and color information.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Color">
      <summary>The vertex color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Position">
      <summary>The vertex position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.VertexElements">
      <summary>An array of two vertex elements describing the position, followed by the color, of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Initializes a new instance of the VertexPositionColor class.</summary>
      <param name="position">The position of the vertex.</param>
      <param name="color">The color of the vertex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionColor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColor.SizeInBytes">
      <summary>Gets the size of the VertexPositionColor class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture">
      <summary>Describes a custom vertex format structure that contains position, color, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Color">
      <summary>The vertex color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Position">
      <summary>The vertex position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.TextureCoordinate">
      <summary>The texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexElements">
      <summary>An array of three vertex elements describing the position, texture coordinate, and color of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionColorTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="color">Color of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionColorTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.SizeInBytes">
      <summary>Gets the size of the VertexPositionColorTexture class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture">
      <summary>Describes a custom vertex format structure that contains position, normal data, and one set of texture coordinates. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Normal">
      <summary>The vertex normal.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Position">
      <summary>The vertex position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.TextureCoordinate">
      <summary>The texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.VertexElements">
      <summary>An array of three vertex elements describing the position, normal, and texture coordinate of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionNormalTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="normal">The vertex normal.</param>
      <param name="textureCoordinate">The texture coordinate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionNormalTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.SizeInBytes">
      <summary>Gets the size of the VertexPositionNormalTexture class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture">
      <summary>Describes a custom vertex format structure that contains position and one set of texture coordinates. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position">
      <summary>The vertex position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.TextureCoordinate">
      <summary>The texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.VertexElements">
      <summary>An array of two vertex elements describing the position, followed by the texture coordinate, of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.SizeInBytes">
      <summary>Gets the size of the VertexPositionTexture class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexShader">
      <summary>Encapsulates the functionality of a vertex shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
      <summary>Initializes a new instance of the VertexShader class.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with this VertexShader.</param>
      <param name="shaderCode">The compiled byte code. An array of tokens that represents the vertex shader, including embedded debug and symbol table information.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.GetShaderCode">
      <summary>Gets the shader byte code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this VertexShader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.Name">
      <summary>Gets the name of this vertex shader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.Tag">
      <summary>Gets the resource tags for this vertex shader.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.VertexShader.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexStream">
      <summary>Represents a vertex stream. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequency(System.Int32)">
      <summary>Sets the stream source frequency divider value. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency divider value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequencyOfIndexData(System.Int32)">
      <summary>Sets the stream source frequency divider value for the index data. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency of index data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequencyOfInstanceData(System.Int32)">
      <summary>Sets the stream source frequency divider value for the instance data. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency of instance data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetSource(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,System.Int32)">
      <summary>Sets the source of the vertex stream.</summary>
      <param name="vb">The vertex buffer source.</param>
      <param name="offsetInBytes">The starting offset.</param>
      <param name="vertexStride">The size, in bytes, of the elements in the vertex buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.OffsetInBytes">
      <summary>Gets the starting offset of the vertex stream.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.VertexBuffer">
      <summary>Gets the vertex buffer associated with this vertex stream.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.VertexStride">
      <summary>Gets the size, in bytes, of the elements in this vertex stream.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexStreamCollection">
      <summary>Collection of VertexStream objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStreamCollection.Item(System.Int32)">
      <summary>Returns the VertexStream at the specified index.</summary>
      <param name="index">Index of the VertexStream to return.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
      <summary>Defines the window dimensions of a render-target surface onto which a 3D volume projects. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Projects a 3D vector from object space into screen space. Reference page contains links to related code samples.</summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Converts a screen space point into a corresponding point in world space.</summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
      <summary>Gets the aspect ratio used by the viewport</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
      <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
      <summary>Gets or sets the maximum depth of the clip volume.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
      <summary>Gets or sets the minimum depth of the clip volume.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.TitleSafeArea">
      <summary>Returns the title safe area of the current viewport.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
      <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
      <summary>Packed vector type containing a single 8 bit normalized W value in the range of 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
      <summary>Initializes a new instance of the Alpha8 structure.</summary>
      <param name="alpha">The initial value for the Alpha8 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representaion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
      <summary>Expands the packed representation to a System.Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
      <summary>Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Bgr565 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgr565 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgr565 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
      <summary>Expands the packed representation into a Vector3.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 5 bits each for x, y, and z, and 1 bit for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Bgra5551 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgra5551 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgra5551 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
      <summary>Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Byte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Byte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle">
      <summary>Packed vector type containing a single 16 bit floating point value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.#ctor(System.Single)">
      <summary>Initializes a new instance of the HalfSingle structure.</summary>
      <param name="value">The initial value of the HalfSingle structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToSingle">
      <summary>Expands the HalfSingle to a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2">
      <summary>Packed vector type containing two 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToVector2">
      <summary>Expands the HalfVector2 to a Vector2.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
      <summary>Packed vector type containing four 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the HalfVector4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector">
      <summary>Interface that converts packed vector types to and from Vector4 values, allowing multiple encodings to be manipulated in a generic way.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1">
      <summary>Converts packed vector types to and from Vector4 values.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010">
      <summary>Packed vector type containing signed normalized values, ranging from −1 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Normalized101010 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Normalized101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Normalized101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToVector3">
      <summary>Expands the packed representation into a Vector3.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2">
      <summary>Packed vector type containing two 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedByte2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4">
      <summary>Packed vector type containing four 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedByte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2">
      <summary>Packed vector type containing two 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedShort2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4">
      <summary>Packed vector type containing four 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedShort4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
      <summary>Packed vector type containing two 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="vector">The vector containing the initial values for the components of the Rg32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
      <summary>Expands the packed vector representation into a Vector2.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba1010102 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba1010102 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba1010102 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the left of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32">
      <summary>Packed vector type containing four 8-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba32 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba32 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
      <summary>Packed vector type containing four 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba64 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2">
      <summary>Packed vector type containing two 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Short2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Short2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
      <summary>Packed vector type containing four 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Short4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Short4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010">
      <summary>Packed vector type containing unsigned integer values, using 10 bits each for x, y, and z (ranging from 0 to 1023), and 2 bits for w (ranging from 0 to 3).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="vector">A vector containing the initial values for the components of the UInt101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToVector3">
      <summary>Expands the packed representation into a Vector3.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Buttons">
      <summary>Enumerates input device buttons.</summary>
      <param name="A">A button</param>
      <param name="B">B button</param>
      <param name="Back">BACK button</param>
      <param name="BigButton">Big button</param>
      <param name="DPadDown">Directional pad up</param>
      <param name="DPadLeft">Directional pad left</param>
      <param name="DPadRight">Directional pad right</param>
      <param name="DPadUp">Directional pad down</param>
      <param name="LeftShoulder">Left bumper (shoulder) button</param>
      <param name="LeftStick">Left stick button (pressing the left stick)</param>
      <param name="LeftThumbstickDown">Left stick is towards down</param>
      <param name="LeftThumbstickLeft">Left stick is towards the left</param>
      <param name="LeftThumbstickRight">Left stick is towards the right</param>
      <param name="LeftThumbstickUp">Left stick is towards up</param>
      <param name="LeftTrigger">Left trigger</param>
      <param name="RightShoulder">Right bumper (shoulder) button</param>
      <param name="RightStick">Right stick button (pressing the right stick)</param>
      <param name="RightThumbstickDown">Right stick is towards down</param>
      <param name="RightThumbstickLeft">Right stick is towards the left</param>
      <param name="RightThumbstickRight">Right stick is towards the right</param>
      <param name="RightThumbstickUp">Right stick is towards up</param>
      <param name="RightTrigger">Right trigger</param>
      <param name="Start">START button</param>
      <param name="X">X button</param>
      <param name="Y">Y button</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.ButtonState">
      <summary>Identifies the state of a controller button.</summary>
      <param name="Pressed">The button is pressed.</param>
      <param name="Released">The button is released.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePad">
      <summary>Allows retrieval of user interaction with an Xbox 360 Controller and setting of controller vibration motors. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Retrieves the capabilities of an Xbox 360 Controller.</summary>
      <param name="playerIndex">Index of the controller to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets the current state of a game pad controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)">
      <summary>Gets the current state of a game pad controller, using a specified dead zone on analog stick positions. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
      <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)">
      <summary>Sets the vibration motor speeds on an Xbox 360 Controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index that identifies the controller to set.</param>
      <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
      <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadButtons">
      <summary>Identifies whether the buttons on an Xbox 360 Controller are pressed or released. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Initializes a new instance of the GamePadButtons class, setting the specified buttons to pressed.</summary>
      <param name="buttons">Buttons to initialize as pressed. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.A">
      <summary>Identifies whether the A button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.B">
      <summary>Identifies whether the B button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Back">
      <summary>Identifies whether the BACK button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.BigButton">
      <summary>Identifies whether the BigButton button is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder">
      <summary>Identifies whether the left shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick">
      <summary>Identifies whether the left stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder">
      <summary>Identifies whether the right shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick">
      <summary>Identifies whether the right stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Start">
      <summary>Identifies whether the START button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.X">
      <summary>Identifies whether the X button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Y">
      <summary>Identifies whether the Y button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadCapabilities">
      <summary>Describes the capabilities of an Xbox 360 Controller, including controller type and whether the controller supports voice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType">
      <summary>Gets the type of controller.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton">
      <summary>Indicates whether the controller has an A button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton">
      <summary>Indicates whether the controller has a BACK button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton">
      <summary>Indicates whether the controller has a B button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton">
      <summary>Indicates whether the controller has a BigButton button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton">
      <summary>Indicates whether the controller has a directional pad DOWN button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton">
      <summary>Indicates whether the controller has a directional pad LEFT button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton">
      <summary>Indicates whether the controller has a directional pad RIGHT button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton">
      <summary>Indicates whether the controller has a directional pad UP button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton">
      <summary>Indicates whether the controller has a left bumper button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton">
      <summary>Indicates whether the controller has a digital button control on the left analog stick.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger">
      <summary>Indicates whether the controller has a left analog trigger.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor">
      <summary>Indicates whether the controller has a low-frequency vibration motor.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick">
      <summary>Indicates whether the controller supports a left analog control with horizontal movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick">
      <summary>Indicates whether the controller supports a left analog control with vertical movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton">
      <summary>Indicates whether the controller has a right bumper button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton">
      <summary>Indicates whether the controller has a digital button control on the right analog stick.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger">
      <summary>Indicates whether the controller has a right analog trigger.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor">
      <summary>Indicates whether the controller has a high-frequency vibration motor.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick">
      <summary>Indicates whether the controller supports a right analog control with horizontal movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick">
      <summary>Indicates whether the controller supports a right analog control with vertical movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton">
      <summary>Indicates whether the controller has a START button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport">
      <summary>Indicates whether the controller supports voice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton">
      <summary>Indicates whether the controller has an X button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton">
      <summary>Indicates whether the controller has a Y button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDeadZone">
      <summary>Specifies a type of dead zone processing to apply to Xbox 360 controller analog sticks when calling GetState.</summary>
      <param name="Circular">The combined X and Y position of each stick is compared against the dead zone. This provides better control than IndependentAxes when the stick is used as a two-dimensional control surface, such as when controlling a character's view in a first-person game.</param>
      <param name="IndependentAxes">The X and Y positions of each stick are compared against the dead zone independently. This setting is the default when calling GetState.</param>
      <param name="None">The values of each stick are not processed and are returned by GetState as "raw" values. This is best if you intend to implement your own dead zone processing.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDPad">
      <summary>Identifies which directions on the directional pad of an Xbox 360 Controller are being pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the GamePadDPad class.</summary>
      <param name="upValue">Directional pad up button state.</param>
      <param name="downValue">Directional pad down button state.</param>
      <param name="leftValue">Directional pad left button state.</param>
      <param name="rightValue">Directional pad right button state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Down">
      <summary>Identifies whether the Down direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Left">
      <summary>Identifies whether the Left direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Right">
      <summary>Identifies whether the Right direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Up">
      <summary>Identifies whether the Up direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadState">
      <summary>Represents specific information about the state of an Xbox 360 Controller, including the current state of buttons and sticks. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Initializes a new instance of the GamePadState class using the specified GamePadThumbSticks, GamePadTriggers, GamePadButtons, and GamePadDPad.</summary>
      <param name="thumbSticks">Initial thumbstick state.</param>
      <param name="triggers">Initial trigger state.</param>
      <param name="buttons">Initial button state.</param>
      <param name="dPad">Initial directional pad state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Input.Buttons[])">
      <summary>Initializes a new instance of the GamePadState class with the specified stick, trigger, and button values.</summary>
      <param name="leftThumbStick">Left stick value. Each axis is clamped between -1.0 and 1.0.</param>
      <param name="rightThumbStick">Right stick value. Each axis is clamped between -1.0 and 1.0.</param>
      <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="buttons">Array or parameter list of Buttons to initialize as pressed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonDown(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are pressed in this GamePadState.</summary>
      <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonUp(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are up (not pressed) in this GamePadState.</summary>
      <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Equality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Inequality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Buttons">
      <summary>Returns a structure that identifies what buttons on the Xbox 360 controller are pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.DPad">
      <summary>Returns a structure that identifies what directions of the directional pad on the Xbox 360 Controller are pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.PacketNumber">
      <summary>Gets the packet number associated with this state. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.ThumbSticks">
      <summary>Returns a structure that indicates the position of the Xbox 360 Controller sticks (thumbsticks).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Triggers">
      <summary>Returns a structure that identifies the position of triggers on the Xbox 360 controller.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks">
      <summary>Structure that represents the position of left and right sticks (thumbsticks) on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the GamePadThumbSticks class.</summary>
      <param name="leftThumbstick">Left stick value. Each axis is clamped between -1.0 and 1.0.</param>
      <param name="rightThumbstick">Right stick value. Each axis is clamped between -1.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Left">
      <summary>Returns the position of the left Xbox 360 Controller stick (thumbstick) as a 2D vector.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Right">
      <summary>Returns the position of the right Xbox 360 Controller stick (thumbstick) as a 2D vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadTriggers">
      <summary>Structure that defines the position of the left and right triggers on an Xbox 360 controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the GamePadTriggers class.</summary>
      <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Left">
      <summary>Identifies the position of the left trigger on the Xbox 360 Controller.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Right">
      <summary>Identifies the position of the right trigger on the Xbox 360 Controller.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadType">
      <summary>Describes the type of a specified Xbox 360 controller.</summary>
      <param name="AlternateGuitar">Controller is an alternate guitar</param>
      <param name="ArcadeStick">Controller is an arcade stick</param>
      <param name="BigButtonPad">Controller is a big button pad</param>
      <param name="DancePad">Controller is a dance pad</param>
      <param name="DrumKit">Controller is a drum kit</param>
      <param name="FlightStick">Controller is a flight stick</param>
      <param name="GamePad">Controller is the Xbox 360 Controller</param>
      <param name="Guitar">Controller is a guitar</param>
      <param name="Unknown">Controller is an unknown type</param>
      <param name="Wheel">Controller is a wheel</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keyboard">
      <summary>Allows retrieval of keystrokes from a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState">
      <summary>Returns the current keyboard state. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Returns the current Chatpad state for the specified player. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index of the Chatpad to query.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyboardState">
      <summary>Represents a state of keystrokes recorded by a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.#ctor(Microsoft.Xna.Framework.Input.Keys[])">
      <summary>Initializes a new instance of the KeyboardState class.</summary>
      <param name="keys">Array or parameter list of Keys to initialize as pressed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare this object to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetPressedKeys">
      <summary>Gets an array of values that correspond to the keyboard keys that are currently being pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently being pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently not pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">Object to the left of the equality operator.</param>
      <param name="b">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Inequality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">Object to the left of the inequality operator.</param>
      <param name="b">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.Item(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns the state of a particular key. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value representing the key to query.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keys">
      <summary>Identifies a particular key on a keyboard.</summary>
      <param name="A">A key</param>
      <param name="Add">Add key</param>
      <param name="Apps">Applications key</param>
      <param name="Attn">Attn key</param>
      <param name="B">B key</param>
      <param name="Back">BACKSPACE key</param>
      <param name="BrowserBack">Windows 2000/XP: Browser Back key</param>
      <param name="BrowserFavorites">Windows 2000/XP: Browser Favorites key</param>
      <param name="BrowserForward">Windows 2000/XP: Browser Forward key</param>
      <param name="BrowserHome">Windows 2000/XP: Browser Start and Home key</param>
      <param name="BrowserRefresh">Windows 2000/XP: Browser Refresh key</param>
      <param name="BrowserSearch">Windows 2000/XP: Browser Search key</param>
      <param name="BrowserStop">Windows 2000/XP: Browser Stop key</param>
      <param name="C">C key</param>
      <param name="CapsLock">CAPS LOCK key</param>
      <param name="ChatPadGreen">Green ChatPad key</param>
      <param name="ChatPadOrange">Orange ChatPad key</param>
      <param name="Crsel">CrSel key</param>
      <param name="D">D key</param>
      <param name="D0">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D1">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D2">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D3">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D4">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D5">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D6">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D7">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D8">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D9">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Decimal">Decimal key</param>
      <param name="Delete">DEL key</param>
      <param name="Divide">Divide key</param>
      <param name="Down">DOWN ARROW key</param>
      <param name="E">E key</param>
      <param name="End">END key</param>
      <param name="Enter">ENTER key</param>
      <param name="EraseEof">Erase EOF key</param>
      <param name="Escape">ESC key</param>
      <param name="Execute">EXECUTE key</param>
      <param name="Exsel">ExSel key</param>
      <param name="F">F key</param>
      <param name="F1">F1 key</param>
      <param name="F10">F10 key</param>
      <param name="F11">F11 key</param>
      <param name="F12">F12 key</param>
      <param name="F13">F13 key</param>
      <param name="F14">F14 key</param>
      <param name="F15">F15 key</param>
      <param name="F16">F16 key</param>
      <param name="F17">F17 key</param>
      <param name="F18">F18 key</param>
      <param name="F19">F19 key</param>
      <param name="F2">F2 key</param>
      <param name="F20">F20 key</param>
      <param name="F21">F21 key</param>
      <param name="F22">F22 key</param>
      <param name="F23">F23 key</param>
      <param name="F24">F24 key</param>
      <param name="F3">F3 key</param>
      <param name="F4">F4 key</param>
      <param name="F5">F5 key</param>
      <param name="F6">F6 key</param>
      <param name="F7">F7 key</param>
      <param name="F8">F8 key</param>
      <param name="F9">F9 key</param>
      <param name="G">G key</param>
      <param name="H">H key</param>
      <param name="Help">HELP key</param>
      <param name="Home">HOME key</param>
      <param name="I">I key</param>
      <param name="ImeConvert">IME Convert key</param>
      <param name="ImeNoConvert">IME NoConvert key</param>
      <param name="Insert">INS key</param>
      <param name="J">J key</param>
      <param name="K">K key</param>
      <param name="Kana">Kana key on Japanese keyboards</param>
      <param name="Kanji">Kanji key on Japanese keyboards</param>
      <param name="L">L key</param>
      <param name="LaunchApplication1">Windows 2000/XP: Start Application 1 key</param>
      <param name="LaunchApplication2">Windows 2000/XP: Start Application 2 key</param>
      <param name="LaunchMail">Windows 2000/XP: Start Mail key</param>
      <param name="Left">LEFT ARROW key</param>
      <param name="LeftAlt">Left ALT key</param>
      <param name="LeftControl">Left CONTROL key</param>
      <param name="LeftShift">Left SHIFT key</param>
      <param name="LeftWindows">Left Windows key</param>
      <param name="M">M key</param>
      <param name="MediaNextTrack">Windows 2000/XP: Next Track key</param>
      <param name="MediaPlayPause">Windows 2000/XP: Play/Pause Media key</param>
      <param name="MediaPreviousTrack">Windows 2000/XP: Previous Track key</param>
      <param name="MediaStop">Windows 2000/XP: Stop Media key</param>
      <param name="Multiply">Multiply key</param>
      <param name="N">N key</param>
      <param name="None">Reserved</param>
      <param name="NumLock">NUM LOCK key</param>
      <param name="NumPad0">Numeric keypad 0 key</param>
      <param name="NumPad1">Numeric keypad 1 key</param>
      <param name="NumPad2">Numeric keypad 2 key</param>
      <param name="NumPad3">Numeric keypad 3 key</param>
      <param name="NumPad4">Numeric keypad 4 key</param>
      <param name="NumPad5">Numeric keypad 5 key</param>
      <param name="NumPad6">Numeric keypad 6 key</param>
      <param name="NumPad7">Numeric keypad 7 key</param>
      <param name="NumPad8">Numeric keypad 8 key</param>
      <param name="NumPad9">Numeric keypad 9 key</param>
      <param name="O">O key</param>
      <param name="Oem8">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="OemAuto">OEM Auto key</param>
      <param name="OemBackslash">Windows 2000/XP: The OEM angle bracket or backslash key on the RT 102 key keyboard</param>
      <param name="OemClear">CLEAR key</param>
      <param name="OemCloseBrackets">Windows 2000/XP: The OEM close bracket key on a US standard keyboard</param>
      <param name="OemComma">Windows 2000/XP: For any country/region, the ',' key</param>
      <param name="OemCopy">OEM Copy key</param>
      <param name="OemEnlW">OEM Enlarge Window key</param>
      <param name="OemMinus">Windows 2000/XP: For any country/region, the '-' key</param>
      <param name="OemOpenBrackets">Windows 2000/XP: The OEM open bracket key on a US standard keyboard</param>
      <param name="OemPeriod">Windows 2000/XP: For any country/region, the '.' key</param>
      <param name="OemPipe">Windows 2000/XP: The OEM pipe key on a US standard keyboard</param>
      <param name="OemPlus">Windows 2000/XP: For any country/region, the '+' key</param>
      <param name="OemQuestion">Windows 2000/XP: The OEM question mark key on a US standard keyboard</param>
      <param name="OemQuotes">Windows 2000/XP: The OEM singled/double quote key on a US standard keyboard</param>
      <param name="OemSemicolon">Windows 2000/XP: The OEM Semicolon key on a US standard keyboard</param>
      <param name="OemTilde">Windows 2000/XP: The OEM tilde key on a US standard keyboard</param>
      <param name="P">P key</param>
      <param name="Pa1">PA1 key</param>
      <param name="PageDown">PAGE DOWN key</param>
      <param name="PageUp">PAGE UP key</param>
      <param name="Pause">PAUSE key</param>
      <param name="Play">Play key</param>
      <param name="Print">PRINT key</param>
      <param name="PrintScreen">PRINT SCREEN key</param>
      <param name="ProcessKey">Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key</param>
      <param name="Q">Q key</param>
      <param name="R">R key</param>
      <param name="Right">RIGHT ARROW key</param>
      <param name="RightAlt">Right ALT key</param>
      <param name="RightControl">Right CONTROL key</param>
      <param name="RightShift">Right SHIFT key</param>
      <param name="RightWindows">Right Windows key</param>
      <param name="S">S key</param>
      <param name="Scroll">SCROLL LOCK key</param>
      <param name="Select">SELECT key</param>
      <param name="SelectMedia">Windows 2000/XP: Select Media key</param>
      <param name="Separator">Separator key</param>
      <param name="Sleep">Computer Sleep key</param>
      <param name="Space">SPACEBAR</param>
      <param name="Subtract">Subtract key</param>
      <param name="T">T key</param>
      <param name="Tab">TAB key</param>
      <param name="U">U key</param>
      <param name="Up">UP ARROW key</param>
      <param name="V">V key</param>
      <param name="VolumeDown">Windows 2000/XP: Volume Down key</param>
      <param name="VolumeMute">Windows 2000/XP: Volume Mute key</param>
      <param name="VolumeUp">Windows 2000/XP: Volume Up key</param>
      <param name="W">W key</param>
      <param name="X">X key</param>
      <param name="Y">Y key</param>
      <param name="Z">Z key</param>
      <param name="Zoom">Zoom key</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyState">
      <summary>Identifies the state of a keyboard key.</summary>
      <param name="Down">The key is pressed.</param>
      <param name="Up">The key is released.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Mouse">
      <summary>Allows retrieval of position and button clicks from a mouse input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState">
      <summary>Gets the current state of the mouse, including mouse position and buttons pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.SetPosition(System.Int32,System.Int32)">
      <summary>Sets the position of the mouse cursor relative to the upper-left corner of the window.</summary>
      <param name="x">The horizontal position of the mouse cursor, relative to the left edge of the game window.</param>
      <param name="y">The vertical position of the mouse cursor, relative to the upper edge of the game window.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.Mouse.WindowHandle">
      <summary>Gets or sets the window used for mouse processing. Mouse coordinates returned by GetState are relative to the upper-left corner of this window. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.MouseState">
      <summary>Represents the state of a mouse input device, including mouse cursor position and buttons pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the MouseState class.</summary>
      <param name="x">Horizontal mouse position.</param>
      <param name="y">Vertical mouse position.</param>
      <param name="scrollWheel">Mouse scroll wheel value.</param>
      <param name="leftButton">Left mouse button state.</param>
      <param name="middleButton">Middle mouse button state.</param>
      <param name="rightButton">Right mouse button state.</param>
      <param name="xButton1">XBUTTON1 state.</param>
      <param name="xButton2">XBUTTON2 state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Equality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Inequality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.LeftButton">
      <summary>Returns the state of the left mouse button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.MiddleButton">
      <summary>Returns the state of the middle mouse button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.RightButton">
      <summary>Returns the state of the right mouse button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.ScrollWheelValue">
      <summary>Gets the cumulative mouse scroll wheel value since the game was started.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.X">
      <summary>Specifies the horizontal position of the mouse cursor. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton1">
      <summary>Returns the state of XBUTTON1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton2">
      <summary>Returns the state of XBUTTON2.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.Y">
      <summary>Specifies the vertical position of the mouse cursor. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Album">
      <summary>Provides access to an album in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album is equal to this Album.</summary>
      <param name="other">Album to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Album.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Album is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetAlbumArt(System.IServiceProvider)">
      <summary>Gets the album art as a texture.</summary>
      <param name="serviceProvider">Content manager service provider, obtained through the Game.Services property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetThumbnail(System.IServiceProvider)">
      <summary>Gets the album art thumbnail as a texture.</summary>
      <param name="serviceProvider">Content manager service provider, obtained through the Game.Services property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Equality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Inequality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.ToString">
      <summary>Returns a String representation of this Album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Artist">
      <summary>Gets the Artist of the Album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Duration">
      <summary>Gets the duration of the Album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Genre">
      <summary>Gets the Genre of the Album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.HasArt">
      <summary>Gets a value indicating whether the Album has associated album art.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Name">
      <summary>Gets the name of the Album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Songs">
      <summary>Gets a SongCollection that contains the songs on the album.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.AlbumCollection">
      <summary>A collection of albums in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the AlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the AlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Count">
      <summary>Gets the number of Album objects in the AlbumCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Item(System.Int32)">
      <summary>Gets the Album at the specified index in the AlbumCollection.</summary>
      <param name="index">Index of the Album to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Artist">
      <summary>Provides access to artist information in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist is equal to this Artist.</summary>
      <param name="other">Artist to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Artist.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Artist is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Equality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Inequality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.ToString">
      <summary>Returns a String representation of the Artist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Albums">
      <summary>Gets the AlbumCollection for the Artist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Name">
      <summary>Gets the name of the Artist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Songs">
      <summary>Gets the SongCollection for the Artist.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.ArtistCollection">
      <summary>The collection of all artists in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the ArtistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the ArtistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Count">
      <summary>Gets the number of Artist objects in the ArtistCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Item(System.Int32)">
      <summary>Gets the Artist at the specified index in the ArtistCollection.</summary>
      <param name="index">Index of the Artist to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Genre">
      <summary>Provides access to genre information in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre is equal to this Genre.</summary>
      <param name="other">Genre to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Genre.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Genre is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Equality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Inequality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.ToString">
      <summary>Returns a String representation of the Genre.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Albums">
      <summary>Gets the AlbumCollection for the Genre.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Name">
      <summary>Gets the name of the Genre.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Songs">
      <summary>Gets the SongCollection for the Genre.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.GenreCollection">
      <summary>The collection of all genres in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the GenreCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the GenreCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Count">
      <summary>Gets the number of Genre objects in the GenreCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Item(System.Int32)">
      <summary>Gets the Genre at the specified index in the GenreCollection.</summary>
      <param name="index">Index of the Genre to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaLibrary">
      <summary>Provides access to songs, playlists, and pictures in the device's media library.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor">
      <summary>Initializes a new instance of the MediaLibrary class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor(Microsoft.Xna.Framework.Media.MediaSource)">
      <summary>Initializes a new instance of the MediaLibrary class, using a specific media source to create the new media library.  Reference page contains code sample.</summary>
      <param name="mediaSource">A media source that will be the source for the media library.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Dispose">
      <summary>Releases the resources used by the MediaLibrary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the MediaLibrary is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Albums">
      <summary>Gets the AlbumCollection that contains all albums in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Artists">
      <summary>Gets the ArtistCollection that contains all artists in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Genres">
      <summary>Gets the GenreCollection that contains all genres in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.MediaSource">
      <summary>Gets the MediaSource with which this media library was constructed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Pictures">
      <summary>Gets the PictureCollection that contains all pictures in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Playlists">
      <summary>Gets the PlaylistCollection that contains all playlists in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.RootPictureAlbum">
      <summary>Gets the root PictureAlbum for all pictures in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Songs">
      <summary>Gets the SongCollection that contains all songs in the media library.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaPlayer">
      <summary>Provides methods and properties to play, pause, resume, and stop songs. MediaPlayer also exposes shuffle, repeat, volume, play position, and visualization capabilities. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.GetVisualizationData(Microsoft.Xna.Framework.Media.VisualizationData)">
      <summary>Retrieves visualization (frequency and sample) data for the currently-playing song.  Reference page contains code sample.</summary>
      <param name="visualizationData">Visualization (frequency and sample) data for the currently playing song.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext">
      <summary>Moves to the next song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious">
      <summary>Moves to the previous song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Pause">
      <summary>Pauses the currently playing song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)">
      <summary>Plays a Song. Reference page contains links to related code samples.</summary>
      <param name="song">Song to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection)">
      <summary>Plays a SongCollection. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)">
      <summary>Plays a SongCollection, starting with the Song at the specified index. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
      <param name="index">Index of the song in the collection at which playback should begin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Resume">
      <summary>Resumes a paused song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Stop">
      <summary>Stops playing a song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl">
      <summary>Determines whether the game has control of the background music.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted">
      <summary>Gets or set the muted setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating">
      <summary>Gets or sets the repeat setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled">
      <summary>Gets or sets the shuffle setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled">
      <summary>Gets or sets the visualization enabled setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition">
      <summary>Gets the play position within the currently playing song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Queue">
      <summary>Gets the media playback queue, MediaQueue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.State">
      <summary>Gets the media playback state, MediaState.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Volume">
      <summary>Gets or sets the media player volume.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged">
      <summary>Raised when the active song changes due to active playback or due to explicit calls to the MoveNext or MovePrevious methods.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged">
      <summary>Raised when the media player play state changes.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaQueue">
      <summary>Provides methods and properties to access and control the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSong">
      <summary>Gets the current Song in the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSongIndex">
      <summary>Gets or sets the index of the current (active) song in the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Count">
      <summary>Gets the count of songs in the MediaQueue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the MediaQueue.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSource">
      <summary>Provides methods and properties to access the source or sources from which the media will be read.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.GetAvailableMediaSources">
      <summary>Gets the available media sources.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.ToString">
      <summary>Returns the name of this media source.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.MediaSourceType">
      <summary>Gets the MediaSourceType of this media source.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.Name">
      <summary>Gets the name of this media source.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSourceType">
      <summary>Type of the media source.</summary>
      <param name="LocalDevice">A local device.</param>
      <param name="WindowsMediaConnect">A Windows Media Connect device.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaState">
      <summary>Media playback state (playing, paused, or stopped).</summary>
      <param name="Paused">Media playback is paused.</param>
      <param name="Playing">Media is currently playing.</param>
      <param name="Stopped">Media playback is stopped.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Picture">
      <summary>Provides access to a picture in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Picture.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture is equal to this Picture.</summary>
      <param name="other">Picture to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Picture is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetTexture(System.IServiceProvider)">
      <summary>Gets the picture as a texture.</summary>
      <param name="serviceProvider">Game service provider, obtained from the Game.Services property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetThumbnail(System.IServiceProvider)">
      <summary>Gets a thumbnail of the picture as a texture.</summary>
      <param name="serviceProvider">Game service provider, obtained from the Game.Services property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Equality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Inequality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.ToString">
      <summary>Returns a String representation of the Picture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Album">
      <summary>Gets the picture album that contains the picture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Date">
      <summary>Gets the picture's date.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Height">
      <summary>Gets the picture's height.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Name">
      <summary>Gets the name of the Picture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Width">
      <summary>Gets the picture's width.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbum">
      <summary>Provides access to a picture album in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this PictureAlbum.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum is equal to this PictureAlbum.</summary>
      <param name="other">PictureAlbum to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the PictureAlbum is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Equality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.ToString">
      <summary>Returns a String representation of the PictureAlbum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Albums">
      <summary>Gets the collection of picture albums that are contained within the picture album (that is, picture albums that are children of the picture album).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Name">
      <summary>Gets the name of the PictureAlbum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Parent">
      <summary>Gets the parent picture album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Pictures">
      <summary>Gets the collection of pictures in this picture album.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbumCollection">
      <summary>A collection of picture albums in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the PictureAlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PictureAlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Count">
      <summary>Gets the number of PictureAlbum objects in the PictureAlbumCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Item(System.Int32)">
      <summary>Gets the PictureAlbum at the specified index in the PictureAlbumCollection.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureCollection">
      <summary>A collection of pictures in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the PictureCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PictureCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Count">
      <summary>Gets the number of Picture objects in the PictureCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Item(System.Int32)">
      <summary>Gets the Picture at the specified index in the PictureCollection.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Playlist">
      <summary>Provides access to a playlist in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Playlist.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist is equal to this Playlist.</summary>
      <param name="other">Playlist to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Playlist is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Equality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Inequality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.ToString">
      <summary>Returns a String representation of the Playlist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Duration">
      <summary>Gets the duration of the Playlist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Name">
      <summary>Gets the name of the Playlist.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Songs">
      <summary>Gets a SongCollection that contains the songs in the playlist.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PlaylistCollection">
      <summary>A collection of playlists in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the PlaylistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PlaylistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Count">
      <summary>Gets the number of Playlist objects in the PlaylistCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)">
      <summary>Gets the Playlist at the specified index in the PlaylistCollection.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Song">
      <summary>Provides access to a song in the song library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Song.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song is equal to this Song.</summary>
      <param name="other">Song to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the Song is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.ToString">
      <summary>Returns a String representation of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Album">
      <summary>Gets the Album on which the Song appears.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Artist">
      <summary>Gets the Artist of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Duration">
      <summary>Gets the duration of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Genre">
      <summary>Gets the Genre of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsProtected">
      <summary>Gets a value that indicates whether the song is DRM protected content.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsRated">
      <summary>Gets a value that indicates whether the song has been rated by the user.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Name">
      <summary>Gets the name of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.PlayCount">
      <summary>Gets the song play count.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Rating">
      <summary>Gets the user's rating for the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.TrackNumber">
      <summary>Gets the track number of the song on the song's Album.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.SongCollection">
      <summary>A collection of songs in the song library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the SongCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the SongCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Count">
      <summary>Gets the number of Song objects in the SongCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the SongCollection.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Video">
      <summary>Represents a video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Video.Duration">
      <summary>Gets the duration of the Video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Video.FramesPerSecond">
      <summary>Gets the frame rate of this video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Video.Height">
      <summary>Gets the height of this video, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Video.VideoSoundtrackType">
      <summary>Gets the VideoSoundtrackType for this video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Video.Width">
      <summary>Gets the width of this video, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.VideoPlayer">
      <summary>Provides methods and properties to playback, pause, resume, and stop video. VideoPlayer also exposes repeat, volume, and play position information.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.GetTexture">
      <summary>Retrieves a Texture2D containing the current frame of video being played.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Pause">
      <summary>Pauses the currently playing video.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Play(Microsoft.Xna.Framework.Media.Video)">
      <summary>Plays a Video.</summary>
      <param name="video">Video to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Resume">
      <summary>Resumes a paused video.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Stop">
      <summary>Stops playing a video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsLooped">
      <summary>Gets a value that indicates whether the player is playing video in a loop.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsMuted">
      <summary>Gets or sets the muted setting for the video player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.PlayPosition">
      <summary>Gets the play position within the currently playing video.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.State">
      <summary>Gets the media playback state, MediaState.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.Video">
      <summary>Gets the Video that is currently playing.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.Volume">
      <summary>Gets or sets the video player volume.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.VideoSoundtrackType">
      <summary>Type of sounds in a video</summary>
      <param name="Dialog">This video contains only dialog.</param>
      <param name="Music">This video contains only music.</param>
      <param name="MusicAndDialog">This video contains music and dialog.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.VisualizationData">
      <summary>Encapsulates visualization (frequency and sample) data for the currently-playing song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VisualizationData.#ctor">
      <summary>Initializes a new instance of the VisualizationData class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Frequencies">
      <summary>Returns a collection of floats that contain frequency data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Samples">
      <summary>Returns a collection of floats that contain sample data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession">
      <summary>Describes a multiplayer session that can be joined. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.CurrentGamerCount">
      <summary>Gets the number of gamers in the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.HostGamertag">
      <summary>Gets the gamertag of the session host.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.OpenPrivateGamerSlots">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.OpenPublicGamerSlots">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.QualityOfService">
      <summary>Gets an estimate of the quality of network service between this local machine and the remote session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.SessionProperties">
      <summary>Gets any custom properties that have been attached to the session.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection">
      <summary>Represents a collection of sessions available for joining. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.Dispose">
      <summary>Immediately releases the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.Finalize">
      <summary>Allows Finalize to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GameEndedEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GameEndedEventArgs.#ctor">
      <summary>Creates an instance of GameEndedEventArgs.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of GamerJoinedEventArgs.</summary>
      <param name="gamer">The gamer who just joined the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.Gamer">
      <summary>Gets the gamer who just joined the session.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GamerLeftEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GamerLeftEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of GamerLeftEventArgs.</summary>
      <param name="gamer">The gamer who just left the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.GamerLeftEventArgs.Gamer">
      <summary>Gets the gamer who just left the session.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GameStartedEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GameStartedEventArgs.#ctor">
      <summary>Creates an instance of GameStartedEventArgs.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.HostChangedEventArgs">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.HostChangedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of HostChangedEventArgs.</summary>
      <param name="oldHost">The player who was the previous session host.</param>
      <param name="newHost">The player who is the new host of the multiplayer session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.HostChangedEventArgs.NewHost">
      <summary>Gets the new host of the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.HostChangedEventArgs.OldHost">
      <summary>Gets the player who was the previous session host.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.Gamer">
      <summary>Gets the gamer who accepted the game invitation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.IsCurrentSession">
      <summary>Represents whether this invitation is for a NetworkSession that is already joined by other local gamers.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer">
      <summary>Represents a local player in a network session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.EnableSendVoice(Microsoft.Xna.Framework.Net.NetworkGamer,System.Boolean)">
      <summary>Specifies whether voice data should be sent to, or received from, the specified remote gamer.</summary>
      <param name="remoteGamer">A remote gamer in the session.</param>
      <param name="enable">true if voice is enabled; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(System.Byte[],Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>Reads the next incoming packet using the specified values. Reference page contains links to related code samples.</summary>
      <param name="data">Storage for the network packet data.</param>
      <param name="sender">[OutAttribute] Gamer who sent this packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(Microsoft.Xna.Framework.Net.PacketReader,Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>Reads the next incoming packet and copies the packet data into the specified reader object. Reference page contains links to related code samples.</summary>
      <param name="data">Network packet data.</param>
      <param name="sender">[OutAttribute] Gamer who sent this packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(System.Byte[],System.Int32,Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>Reads the next incoming packet using the specified values. Reference page contains links to related code samples.</summary>
      <param name="data">Storage for the network packet data.</param>
      <param name="offset">Offset, in bytes, to begin reading data.</param>
      <param name="sender">[OutAttribute] Gamer who sent this packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(Microsoft.Xna.Framework.Net.PacketWriter,Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Sends a byte array to the specified gamer. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer to receive the data packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(Microsoft.Xna.Framework.Net.PacketWriter,Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer receiving the data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],System.Int32,System.Int32,Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="offset">Offset, in bytes, to the start of the data.</param>
      <param name="count">Amount, in bytes, of data sent.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],System.Int32,System.Int32,Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Sends a selected portion of a byte array to the specified gamer. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="offset">Offset, in bytes, to the start of the data.</param>
      <param name="count">Amount, in bytes, of data sent.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer to receive the data packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendPartyInvites">
      <summary>Sends game invitations to all party members that are not in the current game session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.LocalNetworkGamer.IsDataAvailable">
      <summary>Determines if there is incoming packet data for this player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SignedInGamer">
      <summary>Gets the SignedInGamer instance for this SignedInGamer object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkException">
      <summary>Thrown if there is a network communication failure.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor">
      <summary>Creates an empty instance of NetworkException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor(System.String)">
      <summary>Initializes a new instance of NetworkException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of NetworkException with the specified streaming context.</summary>
      <param name="info">Describes the network data being sent or received when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of NetworkException with the specified error message and the inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkGamer">
      <summary>Represents a player in a network session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.HasLeftSession">
      <summary>Indicates whether this gamer has left the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.HasVoice">
      <summary>Determines if the player has a voice headset.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Id">
      <summary>Gets a unique identifier that can be used to refer to this gamer in network packets.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsGuest">
      <summary>Determines whether this gamer is logged in as a guest profile.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsHost">
      <summary>Determines if the player is the host of the multiplayer session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsLocal">
      <summary>Determines if the player is playing on a local machine.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsMutedByLocalUser">
      <summary>Determines if the player is muted by one or more local users.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsPrivateSlot">
      <summary>Determines if the player occupies a reserved private session slot.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsReady">
      <summary>Determines whether the gamer is ready to leave the lobby screen and begin gameplay. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsTalking">
      <summary>Determines whether the gamer is currently sending voice data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Machine">
      <summary>Gets an object representing the physical gaming machine this NetworkGamer is playing on.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.RoundtripTime">
      <summary>Gets an estimate of the network latency involved in sending a packet round trip from the local machine to this gamer and back again.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Session">
      <summary>Gets the multiplayer session of the gamer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkMachine">
      <summary>Represents a physical machine (such as single Xbox 360 console or Windows-based computer) that is participating in a multiplayer session. It can be used to detect when more than one NetworkGamer is playing on the same actual machine.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkMachine.RemoveFromSession">
      <summary>Forcibly removes this machine from the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkMachine.Gamers">
      <summary>Gets a collection of all the gamers who are playing on this machine.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkNotAvailableException">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor">
      <summary>Constructs an empty exception.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor(System.String)">
      <summary>Constructs an exception with the specified error message.</summary>
      <param name="message">Error message to associate with this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Constructs an exception from the specified streaming context.</summary>
      <param name="info">Serialization information.</param>
      <param name="context">Streaming context.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Constructs an exception with the specified error message and inner exception.</summary>
      <param name="message">Error message to associate with this exception.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSession">
      <summary>Represents a multiplayer game session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSession.MaxPreviousGamers">
      <summary>Represents the maximum number of gamers that can be held in the PreviousGamers property.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSession.MaxSupportedGamers">
      <summary>Maximum number of gamers supported in a session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.AddLocalGamer(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Adds the specified local gamer profile to the network session.</summary>
      <param name="gamer">The gamer to add to the network session</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sessionType">Type of session being created.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sessionType">Type of session being created.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session. The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session. This value must be less than maximumGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sessionType">Type of session being created.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session. This value must be less than maximumGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sessionType">Type of session sought.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session. The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="searchProperties">Optional session properties to match during the search. If this argument is null, the query results will not be filtered based on the session properties of available sessions. If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary />
      <param name="sessionType">Type of session sought.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="searchProperties">Optional session properties to match during the search. If this argument is null, the query results will not be filtered based on the session properties of available sessions. If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoin(Microsoft.Xna.Framework.Net.AvailableNetworkSession,System.AsyncCallback,System.Object)">
      <summary>Starts a join operation for the specified multiplayer session.</summary>
      <param name="availableSession">Session the gamer is attempting to join.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.AsyncCallback,System.Object)">
      <summary />
      <param name="localGamers">A collection of local signed-in gamers to add to the network session.</param>
      <param name="callback">Method to be called at the conclusion of the asynchronous operation.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(System.Int32,System.AsyncCallback,System.Object)">
      <summary />
      <param name="maxLocalGamers">The number of local signed-in gamers to add to the network session when accepting the invite. This must be at least one, and can be as high as the limit imposed by either the title or platform. On Windows, this value must always be set to one.</param>
      <param name="callback">Method to be called at the conclusion of the asynchronous operation.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32)">
      <summary />
      <param name="sessionType">Type of session being hosted.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary />
      <param name="sessionType">Type of session being hosted.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session. The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session. This value must be less than maxGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary />
      <param name="sessionType">Type of session being hosted.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session. For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session. For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session. This value must be less than maxGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Dispose">
      <summary>Ends the current multiplayer session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndCreate(System.IAsyncResult)">
      <summary>Gets the result from a BeginCreate asynchronous call.</summary>
      <param name="result">An IAsyncResult used to track the progress of the operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndFind(System.IAsyncResult)">
      <summary>Gets the result from a BeginFind asynchronous call.</summary>
      <param name="result">An IAsyncResult used to track the progress of the operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndGame">
      <summary>Changes the session state from NetworkSessionState.Playing to NetworkSessionState.Lobby.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndJoin(System.IAsyncResult)">
      <summary>Gets the result from a BeginJoin asynchronous call.</summary>
      <param name="result">An IAsyncResult used to track the progress of the operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndJoinInvited(System.IAsyncResult)">
      <summary>Gets the result from a BeginJoinInvited asynchronous call.</summary>
      <param name="result">An IAsyncResult used to track the progress of the operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Find(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session. The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="searchProperties">Optional session properties to match during the search. If this argument is null, the query results will not be filtered based on the session properties of available sessions. If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Find(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="searchProperties">Optional session properties to match during the search. If this argument is null, the query results will not be filtered based on the session properties of available sessions. If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.FindGamerById(System.Byte)">
      <summary />
      <param name="gamerId">Identifier specifying the network gamer for which to search.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Join(Microsoft.Xna.Framework.Net.AvailableNetworkSession)">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="availableSession">An existing multiplayer session.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer})">
      <summary>Joins the specified local gamers, along with the local machine, to an existing network session in response to an InviteAccepted notification event from a non-local session.</summary>
      <param name="localGamers">A collection of local signed-in gamers to add to the network session.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited(System.Int32)">
      <summary>Joins the local machine to an existing network session in response to an InviteAccepted notification event from a non-local session.</summary>
      <param name="maxLocalGamers">The number of local signed-in gamers to add to the network session when accepting the invite. This must be at least one, and can be as high as the limit imposed by either the title or platform. On Windows, this value must always be set to one.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.ResetReady">
      <summary>Resets the IsReady property of all session gamers.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.StartGame">
      <summary>Changes the session state from NetworkSessionState.Lobby to NetworkSessionState.Playing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Update">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllGamers">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllowHostMigration">
      <summary>Gets or sets whether host migration is allowed. This can be read by any machine in the session, but can only be changed by the host. The default value is false indicating that host migration is disabled. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllowJoinInProgress">
      <summary>Gets or sets whether join-in-progress is allowed. If the host enables this setting, new machines will be able to join at any time. The default value is false, indicating that join-in-progress is disabled. AllowJoinInProgress can be read by any machine in the session, but can only be changed by the host. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.BytesPerSecondReceived">
      <summary>Gets a performance counter recording the amount of data being received from the network.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.BytesPerSecondSent">
      <summary>Gets a performance counter recording the amount of data being sent over the network.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.Host">
      <summary>Gets the current host of the multiplayer session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsEveryoneReady">
      <summary>Determines whether all gamers are ready to enter the session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsHost">
      <summary>Determines whether this machine is the session host.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.LocalGamers">
      <summary>Get the collection of local gamers for a multiplayer session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.MaxGamers">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.PreviousGamers">
      <summary>A collection of previous gamers in the network session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.PrivateGamerSlots">
      <summary>Gets or sets the number of private slots reserved for gamers who join using an invitation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.RemoteGamers">
      <summary>Gets the collection of remote gamers for a multiplayer session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionProperties">
      <summary>Gets any custom properties that have been attached to the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionState">
      <summary>Gets the current state of a multiplayer session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionType">
      <summary>Gets the current multiplayer session type.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SimulatedLatency">
      <summary>Gets or sets the amount of simulated network latency.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SimulatedPacketLoss">
      <summary>Gets or sets the amount of simulated packet loss.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GameEnded">
      <summary>Occurs when the game moves from gameplay to the lobby. Reference page contains links to related code samples.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GamerJoined">
      <summary>Occurs when a new player joins a multiplayer session. Reference page contains links to related code samples.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GamerLeft">
      <summary> Reference page contains links to related code samples.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GameStarted">
      <summary>Occurs when the game moves from the lobby into actual gameplay. Reference page contains links to related code samples.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.HostChanged">
      <summary>Occurs when the session host has changed.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.InviteAccepted">
      <summary>Event that occurs when a user has accepted an invitation to join a network session.</summary>
      <param name="">Contains information relevant to event handlers when a gamer accepts a game invitation. These event arguments include a Gamer property representing the signed-in gamer who has accepted the invitation.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.SessionEnded">
      <summary>Occurs when the multiplayer session ends. Reference page contains links to related code samples.</summary>
      <param name="" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs">
      <summary>Represents the arguments passed to a SessionEnded event. These arguments are passed to event handlers when a session ends.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkSessionEndReason)">
      <summary>Creates an instance of NetworkSessionEndedEventArgs.</summary>
      <param name="endReason">Reason for ending the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.EndReason">
      <summary>Gets the reason for ending a session.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionEndReason">
      <summary>Defines the reason a session ended.</summary>
      <param name="ClientSignedOut">This client player has signed out of session.</param>
      <param name="HostEndedSession">The host left the session, removing all active players.</param>
      <param name="RemovedByHost">The host removed this client player from the session.</param>
      <param name="Disconnected">Network connectivity problems ended the session</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionJoinError">
      <summary>Contains additional data about a NetworkSessionJoinException.</summary>
      <param name="SessionNotFound">The session could not be found. Occurs if the session has ended after the matchmaking query but before the client joined, of if there is no network connectivity between the client and session host machines.</param>
      <param name="SessionNotJoinable">The session exists but is not joinable. Occurs if the session is in progress but does not allow gamers to join a session in progress.</param>
      <param name="SessionFull">The session exists but does not have any open slots for local signed-in gamers.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionJoinException">
      <summary>Thrown if an error was encountered while joining a session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor">
      <summary>Creates an empty instance of NetworkSessionJoinException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String)">
      <summary>Creates an instance of NetworkSessionJoinException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates an instance of NetworkSessionJoinException with the specified streaming context.</summary>
      <param name="info">Describes information related to the session being joined when the exception occurred.</param>
      <param name="context">Describes the stream where the exception occurred.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of NetworkSessionJoinException with the specified error message and inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String,Microsoft.Xna.Framework.Net.NetworkSessionJoinError)">
      <summary>Creates an instance of NetworkSessionJoinException with the specified error and additional information on the exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="joinError">Reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary />
      <param name="info">Information necessary for serialization and deserialization of the session item.</param>
      <param name="context">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.JoinError">
      <summary>Gets or sets a more detailed description of the session join failure.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionProperties">
      <summary>Describes custom, game-specific information about a NetworkSession object. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.#ctor">
      <summary>Creates an empty instance of NetworkSessionProperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.GetEnumerator">
      <summary>Gets an enumerator for iterating over the custom property values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Add(System.Nullable{System.Int32})">
      <summary>The System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Add interface method is not supported by NetworkSessionProperties.</summary>
      <param name="item">The value to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Clear">
      <summary>The System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Clear interface method is not supported by NetworkSessionProperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Contains(System.Nullable{System.Int32})">
      <summary>Checks whether the collection contains the specified value.</summary>
      <param name="item">The value to search for.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.CopyTo(System.Nullable{System.Int32}[],System.Int32)">
      <summary>Copies the contents of the collection to an array.</summary>
      <param name="array">The array to receive the contents of the collection.</param>
      <param name="arrayIndex">Starting index for the copy operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Remove(System.Nullable{System.Int32})">
      <summary>The System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Remove interface method is not supported by NetworkSessionProperties.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.IndexOf(System.Nullable{System.Int32})">
      <summary>Gets the index of the specified value.</summary>
      <param name="item">The value to search for.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.Insert(System.Int32,System.Nullable{System.Int32})">
      <summary>The System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.Insert interface method is not supported by NetworkSessionProperties.</summary>
      <param name="index">Index for the insertion operation</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.RemoveAt(System.Int32)">
      <summary>The System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.RemoveAt interface method is not supported by NetworkSessionProperties.</summary>
      <param name="index">Index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.IEnumerable.GetEnumerator">
      <summary>Gets an enumerator for iterating over the custom property values.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.Count">
      <summary>Gets the number of custom session properties.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.Item(System.Int32)">
      <summary>Gets or sets a custom session property value at the specified index</summary>
      <param name="index">Index of the item to retrieve.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionState">
      <summary>Defines the different states of a multiplayer session.</summary>
      <param name="Lobby">The local machine joins the session, waiting in the pregame lobby. The GameStarted event is raised when gameplay begins.</param>
      <param name="Playing">The local machine joins the session, currently in the middle of gameplay. The GameEnded event is raised when the session returns to the lobby.</param>
      <param name="Ended">The local machine has left the current session or the session has ended. The SessionEnded event is raised at this time. The event's arguments describe the reason for the session ending.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionType">
      <summary>Defines the different types of a multiplayer session. Reference page contains links to related code samples.</summary>
      <param name="Local">Does not involve any networking traffic, but can be used for split-screen gaming on a single Xbox 360 console. Creating a local network session may also make it easier to share code between local and online game modes.</param>
      <param name="SystemLink">Connect multiple Xbox 360 consoles or computers over a local subnet. These machines do not require a connection to Xbox LIVE or any LIVE accounts. However, connection to machines on different subnets is not allowed. If you are a Creators Club developer testing your game, you can use this type to connect an Xbox 360 console to a computer. However, cross-platform networking is not supported in games distributed to non–Creators Club community players.</param>
      <param name="PlayerMatch">Uses the Xbox LIVE servers. This enables connection to other machines over the Internet. It requires a LIVE Silver Membership for Windows-based games or a LIVE Gold membership for Xbox 360 games. Games in development will also require an XNA Creators Club premium membership. While in trial mode, Indie games downloaded from Xbox LIVE Markeplace will not have access to LIVE matchmaking.</param>
      <param name="Ranked">All session matches are ranked. This option is available only for commercial games that have passed Xbox LIVE certification. Due to the competitive nature of the gameplay, this session type does not support join-in-progress.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.PacketReader">
      <summary>Provides common functionality for efficiently reading incoming network packets. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.#ctor">
      <summary>Initializes an empty instance of PacketReader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.#ctor(System.Int32)">
      <summary>Initializes an empty instance of PacketReader with the specified options.</summary>
      <param name="capacity">Initial capacity for a received network packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadColor">
      <summary>Reads a Color value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadDouble">
      <summary>Reads an 8-byte floating point value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadMatrix">
      <summary>Reads a Matrix value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadQuaternion">
      <summary>Reads a Quaternion value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadSingle">
      <summary>Reads a 4-byte floating point value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector2">
      <summary>Reads a Vector2 value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector3">
      <summary>Reads a Vector3 value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector4">
      <summary>Reads a Vector3 value. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketReader.Length">
      <summary>Gets the length of the packet being read.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketReader.Position">
      <summary>Gets or sets the current packet read position.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.PacketWriter">
      <summary>Provides common functionality for efficiently formatting outgoing network packets. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.#ctor">
      <summary>Initializes an empty instance of PacketWriter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.#ctor(System.Int32)">
      <summary>Initializes a new instance of PacketWriter with the specified capacity.</summary>
      <param name="capacity">Capacity for the packet writer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Writes a Color value to an outgoing network packet.</summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(System.Double)">
      <summary>Writes a Double value to an outgoing network packet.</summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Matrix)">
      <summary>Writes a Matrix value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Quaternion)">
      <summary>Writes a Quaternion value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(System.Single)">
      <summary>Writes a Single value to an outgoing network packet.</summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector2)">
      <summary>Writes a Vector2 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector3)">
      <summary>Writes a Vector3 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector4)">
      <summary>Writes a Vector4 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketWriter.Length">
      <summary>Gets the length of the packet being written.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketWriter.Position">
      <summary>Gets or sets the current packet write position.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.QualityOfService">
      <summary>Describes the quality of the network connection between this machine and the host of a multiplayer session that was discovered with a matchmaking query.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.AverageRoundtripTime">
      <summary>Gets the average (median) round trip time of all the network packets that were sent during the quality of service measurement process.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.BytesPerSecondDownstream">
      <summary>Gets an estimate of the available downstream network bandwidth from the session host to this machine, measured in bytes per second.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.BytesPerSecondUpstream">
      <summary>Gets an estimate of the available upstream network bandwidth from this machine to the session host, measured in bytes per second.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.IsAvailable">
      <summary>Checks whether this quality of service operation has completed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.MinimumRoundtripTime">
      <summary>Gets the minimum round trip time of any network packet that was sent during the quality of service measurement process.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.SendDataOptions">
      <summary>Defines options for network packet transmission.</summary>
      <param name="None">Sends the data with no guarantees. Packets of this type may be delivered in any order, with occasional packet loss. This is the most efficient option in terms of network bandwidth and machine resource usage. However, it is recommended only in situations where your game can recover from occasional packet loss.</param>
      <param name="Reliable">Sends the data with reliable delivery, but no special ordering. Packets of this type are resent until arrival at the destination. They may arrive out of order.</param>
      <param name="InOrder">Sends the data with guaranteed ordering, but without reliable delivery. Occasionally, packets of this type are not delivered. However, any delivered packets always arrive in the order in which they are sent. Use this option in situations where the transmitted value changes constantly. Old versions never arrive after a more recent version.</param>
      <param name="ReliableInOrder">Sends the data with reliability and arrival in the order originally sent. Packets of this type are resent until arrival and ordered internally. This means they arrive in the same order in which they were sent. In terms of network bandwidth usage, this is the strongest and most expensive option. Use this only when arrival and ordering are essential. Commonly, a game uses this option for a small percentage of packets. The majority of gameplay data is sent using None or Reliable.</param>
      <param name="Chat">Mark that this packet contains chat data, such as a player-to-player message string entered using the keyboard. To comply with international regulations, you must send such data without packet encryption. Therefore, you must use this flag to mark it. To maintain security, other game data should not use this flag. It is acceptable and efficient to mix encrypted and unencrypted data. If you send packets both with and without this flag within a single frame, both the encrypyted and unencrypted data streams will be merged into a single wire packet. This option can be combined with either or both of the Reliable and InOrder flags. When you request in-order delivery for chat packets, they will be ordered relative to other chat packets, but they may arrive out of order with respect to other non-chat data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageContainer">
      <summary>Represents a logical collection of storage files. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.Path">
      <summary>Gets the file path to the location of the user's save game files.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.StorageDevice">
      <summary>Gets the StorageDevice that holds the files in this container.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleLocation">
      <summary>Gets the file path to the location of the title storage space.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleName">
      <summary>Gets the name of the title.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Storage.StorageContainer.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDevice">
      <summary>Represents a storage device for user data, such as a memory unit or hard drive. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.DeleteContainer(System.String)">
      <summary />
      <param name="titleName">The name of the storage container to delete.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.OpenContainer(System.String)">
      <summary>Opens a StorageContainer containing any files for the specified title.</summary>
      <param name="titleName">The name of the XNA Framework title.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.FreeSpace">
      <summary>Gets the amount of free space on the device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.IsConnected">
      <summary>Gets whether the device is connected.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.TotalSpace">
      <summary>Gets the total amount of space on the device.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged">
      <summary>Occurs when a device is removed or inserted.</summary>
      <param name="" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException">
      <summary>The exception that is thrown when the requested StorageDevice is not connected.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of this class during deserialization.</summary>
      <param name="info">The information needed to serialize an object.</param>
      <param name="context">The source or destination for the serialization stream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
  </members>
</doc>